{"version":3,"file":"helpers.js","sources":["../../src/utils/helpers.ts"],"sourcesContent":["/**\n * 通用工具函数\n */\n\n/**\n * 深拷贝对象 - 优化版，避免循环引用，限制深度防止堆栈溢出\n */\nexport function deepClone<T>(obj: T, cache = new WeakMap(), depth = 0, maxDepth = 100): T {\n  // 基本类型直接返回\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  // 防止过深的嵌套\n  if (depth > maxDepth) {\n    console.warn('deepClone: Maximum depth exceeded')\n    return obj\n  }\n\n  // 检查循环引用\n  if (cache.has(obj)) {\n    return cache.get(obj)\n  }\n\n  let cloned: any\n\n  // 处理特殊对象类型\n  if (obj instanceof Date) {\n    cloned = new Date(obj.getTime())\n  } else if (obj instanceof RegExp) {\n    cloned = new RegExp(obj.source, obj.flags)\n  } else if (obj instanceof Set) {\n    cloned = new Set()\n    cache.set(obj, cloned)\n    obj.forEach(value => cloned.add(deepClone(value, cache, depth + 1, maxDepth)))\n  } else if (obj instanceof Map) {\n    cloned = new Map()\n    cache.set(obj, cloned)\n    obj.forEach((value, key) => cloned.set(deepClone(key, cache, depth + 1, maxDepth), deepClone(value, cache, depth + 1, maxDepth)))\n  } else if (Array.isArray(obj)) {\n    cloned = []\n    cache.set(obj, cloned)\n    for (let i = 0; i < obj.length; i++) {\n      cloned[i] = deepClone(obj[i], cache, depth + 1, maxDepth)\n    }\n  } else {\n    // 普通对象 - 使用Object.create保持原型链\n    cloned = Object.create(Object.getPrototypeOf(obj))\n    cache.set(obj, cloned)\n    // 优化：使用 Object.keys() 代替 for...in，性能更好且无需 hasOwnProperty 检查\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      cloned[key] = deepClone((obj as any)[key], cache, depth + 1, maxDepth)\n    }\n  }\n\n  return cloned as T\n}\n\n/**\n * 深合并对象\n */\nexport function deepMerge<T extends Record<string, any>>(\n  target: T,\n  ...sources: Partial<T>[]\n): T {\n  if (!sources.length) return target\n\n  const source = sources.shift()\n  if (!source) return target\n\n  for (const key in source) {\n    const sourceValue = source[key]\n    const targetValue = target[key]\n\n    if (isObject(sourceValue) && isObject(targetValue)) {\n      target[key] = deepMerge(targetValue, sourceValue) as any\n    } else if (Array.isArray(sourceValue)) {\n      target[key] = [...sourceValue] as any\n    } else if (sourceValue !== undefined) {\n      target[key] = sourceValue as any\n    }\n  }\n\n  return deepMerge(target, ...sources)\n}\n\n/**\n * 判断是否为对象\n */\nexport function isObject(obj: unknown): obj is Record<string, unknown> {\n  return obj !== null && typeof obj === 'object' && !Array.isArray(obj)\n}\n\n/**\n * 判断是否为空对象\n */\nexport function isEmpty(obj: unknown): boolean {\n  if (obj == null) return true\n  if (Array.isArray(obj) || typeof obj === 'string') return obj.length === 0\n  if (obj instanceof Set || obj instanceof Map) return obj.size === 0\n  if (isObject(obj)) return Object.keys(obj).length === 0\n  return false\n}\n\n/**\n * 防抖函数 - 增强版，支持取消和立即执行\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  delay: number,\n  options?: { leading?: boolean; trailing?: boolean }\n): (...args: Parameters<T>) => void & { cancel: () => void; flush: () => void } {\n  let timeoutId: ReturnType<typeof setTimeout> | null = null\n  let lastArgs: Parameters<T> | null = null\n  let lastCallTime: number | null = null\n  const { leading = false, trailing = true } = options || {}\n\n  const invokeFunc = () => {\nif (lastArgs) {\n      fn(...lastArgs)\n      lastArgs = null\n    }\n  }\n\n  const cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n      timeoutId = null\n    }\n    lastArgs = null\n    lastCallTime = null\n  }\n\n  const flush = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n      invokeFunc()\n    }\n  }\n\nconst debounced = function (...args: Parameters<T>) {\n    const now = Date.now()\n    const isFirstCall = !lastCallTime\n    lastCallTime = now\n    lastArgs = args\n\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n\n    if (isFirstCall && leading) {\n      invokeFunc()\n    } else if (trailing) {\n      timeoutId = setTimeout(() => {\n        invokeFunc()\n        timeoutId = null\n        lastCallTime = null\n      }, delay)\n    }\n  }\n\n  debounced.cancel = cancel\n  debounced.flush = flush\n\n  return debounced as any\n}\n\n/**\n * 节流函数 - 增强版，支持取消\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  fn: T,\n  limit: number\n): (...args: Parameters<T>) => void & { cancel: () => void } {\n  let inThrottle = false\n  let lastArgs: Parameters<T> | null = null\n  let timeoutId: ReturnType<typeof setTimeout> | null = null\n\n  const cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n      timeoutId = null\n    }\n    inThrottle = false\n    lastArgs = null\n  }\n\nconst throttled = function (...args: Parameters<T>) {\n    if (!inThrottle) {\nfn(...args)\n      inThrottle = true\n      \n      timeoutId = setTimeout(() => {\n        inThrottle = false\n        timeoutId = null\n        if (lastArgs !== null) {\n          fn(...lastArgs)\n          lastArgs = null\n        }\n      }, limit)\n    } else {\n      lastArgs = args\n    }\n  }\n  \n  throttled.cancel = cancel\n  return throttled as any\n}\n\n/**\n * 生成唯一ID\n */\nexport function generateId(prefix: string = 'id'): string {\n  const timestamp = Date.now().toString(36)\n  const randomStr = Math.random().toString(36).substr(2, 9)\n  return `${prefix}_${timestamp}_${randomStr}`\n}\n\n/**\n * 格式化字节大小 - 优化版，缓存计算结果\n */\nconst LOG_1024 = Math.log(1024) // 缓存常量计算\nconst SIZE_UNITS = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] as const\n\nexport function formatBytes(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return '0 Bytes'\n  if (bytes < 0) return 'Invalid size'\n\n  const dm = Math.max(0, decimals)\n  const i = Math.min(\n    Math.floor(Math.log(bytes) / LOG_1024),\n    SIZE_UNITS.length - 1\n  )\n\n  return `${Number.parseFloat((bytes / (1024 ** i)).toFixed(dm))  } ${  SIZE_UNITS[i]}`\n}\n\n/**\n * 睡眠函数\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n/**\n * 重试函数\n */\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  options: {\n    maxAttempts?: number\n    delay?: number\n    backoff?: number\n    onError?: (error: Error, attempt: number) => void\n  } = {}\n): Promise<T> {\n  const {\n    maxAttempts = 3,\n    delay = 1000,\n    backoff = 2,\n    onError\n  } = options\n\n  let lastError: Error | undefined\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn()\n    } catch (error) {\n      lastError = error as Error\n      \n      if (onError) {\n        onError(lastError, attempt)\n      }\n\n      if (attempt < maxAttempts) {\n        const waitTime = delay * backoff**(attempt - 1)\n        await sleep(waitTime)\n      }\n    }\n  }\n\n  if (lastError) throw lastError\n  throw new Error('Unknown error')\n}\n\n/**\n * 获取对象路径值 - 优化版，缓存路径解析\n */\nconst pathCache = new Map<string, string[]>()\nconst MAX_PATH_CACHE = 500\n\nexport function get<T = unknown>(obj: unknown, path: string, defaultValue?: T): T | undefined {\n  if (!obj || typeof obj !== 'object') return defaultValue\n  \n  // 使用缓存的路径解析结果\n  let keys = pathCache.get(path)\n  if (!keys) {\n    keys = path.split('.')\n    // 限制缓存大小\n    if (pathCache.size >= MAX_PATH_CACHE) {\n      const firstKey = pathCache.keys().next().value\n      if (firstKey) {\n        pathCache.delete(firstKey)\n      }\n    }\n    pathCache.set(path, keys)\n  }\n  \n  let result = obj\n  for (const key of keys) {\n    result = result?.[key]\n    if (result === undefined) {\n      return defaultValue\n    }\n  }\n\n  return result\n}\n\n/**\n * 设置对象路径值 - 优化版，复用路径缓存\n */\nexport function set(obj: unknown, path: string, value: unknown): void {\n  if (!obj || typeof obj !== 'object') return\n  \n  // 复用get函数的路径缓存\n  let keys = pathCache.get(path)\n  if (!keys) {\n    keys = path.split('.')\n    if (pathCache.size >= MAX_PATH_CACHE) {\n      const firstKey = pathCache.keys().next().value\n      if (firstKey) {\n        pathCache.delete(firstKey)\n      }\n    }\n    pathCache.set(path, keys)\n  }\n  \n  if (keys.length === 0) return\n  \n  const lastKey = keys[keys.length - 1]\n  let current = obj\n  \n  for (let i = 0; i < keys.length - 1; i++) {\n    const key = keys[i]\n    if (!(key in current) || !isObject(current[key])) {\n      current[key] = {}\n    }\n    current = current[key]\n  }\n  \n  current[lastKey] = value\n}\n\n/**\n * 删除对象路径值\n */\nexport function unset(obj: Record<string, unknown>, path: string): void {\n  const keys = path.split('.')\n  const lastKey = keys.pop()!\n  \n  let current = obj\n  for (const key of keys) {\n    if (!(key in current)) {\n      return\n    }\n    current = current[key]\n  }\n  \n  delete current[lastKey]\n}\n\n/**\n * 选择对象的指定字段\n */\nexport function pick<T extends Record<string, any>, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Pick<T, K> {\n  const result = {} as Pick<T, K>\n  \n  for (const key of keys) {\n    if (key in obj) {\n      result[key] = obj[key]\n    }\n  }\n  \n  return result\n}\n\n/**\n * 排除对象的指定字段\n */\nexport function omit<T extends Record<string, any>, K extends keyof T>(\n  obj: T,\n  keys: K[]\n): Omit<T, K> {\n  const result = { ...obj } as any\n  \n  for (const key of keys) {\n    delete result[key]\n  }\n  \n  return result\n}\n\n/**\n * 将数组转换为对象 - 优化版，使用Object.create(null)避免原型污染\n */\nexport function arrayToObject<T>(\n  array: T[],\n  keyFn: (item: T) => string\n): Record<string, T> {\n  const result: Record<string, T> = Object.create(null)\n  \n  for (const item of array) {\n    const key = keyFn(item)\n    result[key] = item\n  }\n  \n  return result\n}\n\n/**\n * 分组数组元素 - 优化版，使用Map提升性能\n */\nexport function groupBy<T>(\n  array: T[],\n  keyFn: (item: T) => string\n): Record<string, T[]> {\n  const map = new Map<string, T[]>()\n  \n  for (const item of array) {\n    const key = keyFn(item)\n    const group = map.get(key)\n    if (group) {\n      group.push(item)\n    } else {\n      map.set(key, [item])\n    }\n  }\n  \n  // 转换为普通对象\n  const result: Record<string, T[]> = Object.create(null)\n  for (const [key, value] of map) {\n    result[key] = value\n  }\n  \n  return result\n}\n"],"names":["deepClone","obj","cache","WeakMap","depth","maxDepth","console","warn","has","get","cloned","Date","getTime","RegExp","source","flags","Set","set","forEach","value","add","Map","key","Array","isArray","i","length","Object","create","getPrototypeOf","keys","deepMerge","target","sources","shift","sourceValue","targetValue","isObject","undefined","isEmpty","size","debounce","fn","delay","options","timeoutId","lastArgs","lastCallTime","leading","trailing","invokeFunc","cancel","clearTimeout","flush","debounced","args","now","isFirstCall","setTimeout","throttle","limit","inThrottle","throttled","generateId","prefix","timestamp","toString","randomStr","Math","random","substr","LOG_1024","log","SIZE_UNITS","formatBytes","bytes","decimals","dm","max","min","floor","Number","parseFloat","toFixed","sleep","ms","Promise","resolve","retry","maxAttempts","backoff","onError","lastError","attempt","error","waitTime","Error","pathCache","MAX_PATH_CACHE","path","defaultValue","split","firstKey","next","delete","result","lastKey","current","unset","pop","pick","omit","arrayToObject","array","keyFn","item","groupBy","map","group","push"],"mappings":"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"}
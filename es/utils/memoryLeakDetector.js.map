{"version":3,"file":"memoryLeakDetector.js","sources":["../../src/utils/memoryLeakDetector.ts"],"sourcesContent":["/**\r\n * 内存泄漏检测工具\r\n */\r\n\r\nimport { onBeforeUnmount, onUnmounted, type Ref } from 'vue'\r\n\r\nexport interface LeakDetectorOptions {\r\n  threshold?: number // 内存增长阈值（MB）\r\n  interval?: number  // 检测间隔（ms）\r\n  onLeak?: (info: LeakInfo) => void\r\n}\r\n\r\nexport interface LeakInfo {\r\n  type: 'memory' | 'dom' | 'listener' | 'timer'\r\n  description: string\r\n  value?: number\r\n  details?: any\r\n}\r\n\r\n/**\r\n * 内存泄漏检测器\r\n */\r\nexport class MemoryLeakDetector {\r\n  private listeners = new WeakMap<object, Set<{ element: EventTarget; type: string; handler: EventListener }>>()\r\n  private timers = new Set<number>()\r\n  private intervals = new Set<number>()\r\n  private animationFrames = new Set<number>()\r\n  private observers = new Set<MutationObserver | IntersectionObserver | ResizeObserver>()\r\n  private memorySnapshots: number[] = []\r\n  private checkInterval: number | null = null\r\n\r\n  constructor(private options: LeakDetectorOptions = {}) {\r\n    this.startMonitoring()\r\n  }\r\n\r\n  /**\r\n   * 开始监控\r\n   */\r\n  private startMonitoring() {\r\n    const interval = this.options.interval || 5000\r\n    \r\n    this.checkInterval = window.setInterval(() => {\r\n      this.checkMemoryGrowth()\r\n      this.checkDOMLeaks()\r\n    }, interval)\r\n  }\r\n\r\n  /**\r\n   * 检查内存增长\r\n   */\r\n  private checkMemoryGrowth() {\r\n    if (!('memory' in performance)) return\r\n\r\n    const memory = (performance as any).memory\r\n    const currentMemory = memory.usedJSHeapSize / 1024 / 1024 // MB\r\n\r\n    this.memorySnapshots.push(currentMemory)\r\n    \r\n    // 保留最近10次快照\r\n    if (this.memorySnapshots.length > 10) {\r\n      this.memorySnapshots.shift()\r\n    }\r\n\r\n    // 检查内存增长趋势\r\n    if (this.memorySnapshots.length >= 5) {\r\n      const recent = this.memorySnapshots.slice(-5)\r\n      const avgGrowth = recent.reduce((sum, val, i) => {\r\n        if (i === 0) return sum\r\n        return sum + (val - recent[i - 1])\r\n      }, 0) / (recent.length - 1)\r\n\r\n      const threshold = this.options.threshold || 10\r\n      if (avgGrowth > threshold) {\r\n        this.options.onLeak?.({\r\n          type: 'memory',\r\n          description: `内存持续增长，平均每次增长 ${avgGrowth.toFixed(2)} MB`,\r\n          value: currentMemory\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查 DOM 泄漏\r\n   */\r\n  private checkDOMLeaks() {\r\n    // 检查分离的 DOM 节点\r\n    const allNodes = document.querySelectorAll('*')\r\n    let detachedCount = 0\r\n\r\n    allNodes.forEach(node => {\r\n      if (!document.body.contains(node) && node.isConnected) {\r\n        detachedCount++\r\n      }\r\n    })\r\n\r\n    if (detachedCount > 100) {\r\n      this.options.onLeak?.({\r\n        type: 'dom',\r\n        description: `发现 ${detachedCount} 个分离的 DOM 节点`,\r\n        value: detachedCount\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 追踪事件监听器\r\n   */\r\n  trackEventListener(\r\n    element: EventTarget,\r\n    type: string,\r\n    handler: EventListener,\r\n    component?: object\r\n  ): () => void {\r\n    const key = component || element\r\n    \r\n    if (!this.listeners.has(key)) {\r\n      this.listeners.set(key, new Set())\r\n    }\r\n\r\n    const set = this.listeners.get(key)!\r\n    set.add({ element, type, handler })\r\n\r\n    // 返回清理函数\r\n    return () => {\r\n      element.removeEventListener(type, handler)\r\n      set.delete({ element, type, handler })\r\n      if (set.size === 0) {\r\n        this.listeners.delete(key)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 追踪定时器\r\n   */\r\n  trackTimer(id: number, type: 'timeout' | 'interval'): void {\r\n    if (type === 'timeout') {\r\n      this.timers.add(id)\r\n    } else {\r\n      this.intervals.add(id)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理定时器\r\n   */\r\n  clearTimer(id: number, type: 'timeout' | 'interval'): void {\r\n    if (type === 'timeout') {\r\n      clearTimeout(id)\r\n      this.timers.delete(id)\r\n    } else {\r\n      clearInterval(id)\r\n      this.intervals.delete(id)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 追踪动画帧\r\n   */\r\n  trackAnimationFrame(id: number): void {\r\n    this.animationFrames.add(id)\r\n  }\r\n\r\n  /**\r\n   * 清理动画帧\r\n   */\r\n  clearAnimationFrame(id: number): void {\r\n    cancelAnimationFrame(id)\r\n    this.animationFrames.delete(id)\r\n  }\r\n\r\n  /**\r\n   * 追踪观察者\r\n   */\r\n  trackObserver(observer: MutationObserver | IntersectionObserver | ResizeObserver): void {\r\n    this.observers.add(observer)\r\n  }\r\n\r\n  /**\r\n   * 清理观察者\r\n   */\r\n  clearObserver(observer: MutationObserver | IntersectionObserver | ResizeObserver): void {\r\n    observer.disconnect()\r\n    this.observers.delete(observer)\r\n  }\r\n\r\n  /**\r\n   * 清理所有追踪的资源\r\n   */\r\n  cleanup() {\r\n    // 清理定时器\r\n    this.timers.forEach(id => clearTimeout(id))\r\n    this.intervals.forEach(id => clearInterval(id))\r\n    this.animationFrames.forEach(id => cancelAnimationFrame(id))\r\n    \r\n    // 清理观察者\r\n    this.observers.forEach(observer => observer.disconnect())\r\n    \r\n    // 清理监听器\r\n    this.listeners = new WeakMap()\r\n    \r\n    // 清理监控\r\n    if (this.checkInterval) {\r\n      clearInterval(this.checkInterval)\r\n      this.checkInterval = null\r\n    }\r\n\r\n    // 清空集合\r\n    this.timers.clear()\r\n    this.intervals.clear()\r\n    this.animationFrames.clear()\r\n    this.observers.clear()\r\n    this.memorySnapshots = []\r\n  }\r\n\r\n  /**\r\n   * 生成泄漏报告\r\n   */\r\n  generateReport() {\r\n    return {\r\n      timers: this.timers.size,\r\n      intervals: this.intervals.size,\r\n      animationFrames: this.animationFrames.size,\r\n      observers: this.observers.size,\r\n      memory: this.memorySnapshots[this.memorySnapshots.length - 1] || 0,\r\n      memoryTrend: this.memorySnapshots\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 全局检测器实例\r\n */\r\nlet globalDetector: MemoryLeakDetector | null = null\r\n\r\n/**\r\n * 获取全局检测器\r\n */\r\nexport function getLeakDetector(): MemoryLeakDetector {\r\n  if (!globalDetector) {\r\n    globalDetector = new MemoryLeakDetector({\r\n      onLeak: (info) => {\r\n        console.warn(`[MemoryLeak] ${info.description}`, info)\r\n      }\r\n    })\r\n  }\r\n  return globalDetector\r\n}\r\n\r\n/**\r\n * 使用内存泄漏检测\r\n */\r\nexport function useMemoryLeakDetection(options: LeakDetectorOptions = {}) {\r\n  const detector = new MemoryLeakDetector(options)\r\n\r\n  onBeforeUnmount(() => {\r\n    detector.cleanup()\r\n  })\r\n\r\n  return {\r\n    trackEventListener: detector.trackEventListener.bind(detector),\r\n    trackTimer: detector.trackTimer.bind(detector),\r\n    clearTimer: detector.clearTimer.bind(detector),\r\n    trackAnimationFrame: detector.trackAnimationFrame.bind(detector),\r\n    clearAnimationFrame: detector.clearAnimationFrame.bind(detector),\r\n    trackObserver: detector.trackObserver.bind(detector),\r\n    clearObserver: detector.clearObserver.bind(detector),\r\n    generateReport: detector.generateReport.bind(detector),\r\n    cleanup: detector.cleanup.bind(detector)\r\n  }\r\n}\r\n\r\n/**\r\n * 安全的 setTimeout 包装\r\n */\r\nexport function safeSetTimeout(\r\n  handler: TimerHandler,\r\n  timeout?: number,\r\n  ...args: any[]\r\n): number {\r\n  const id = setTimeout(handler, timeout, ...args)\r\n  getLeakDetector().trackTimer(id, 'timeout')\r\n  return id\r\n}\r\n\r\n/**\r\n * 安全的 setInterval 包装\r\n */\r\nexport function safeSetInterval(\r\n  handler: TimerHandler,\r\n  timeout?: number,\r\n  ...args: any[]\r\n): number {\r\n  const id = setInterval(handler, timeout, ...args)\r\n  getLeakDetector().trackTimer(id, 'interval')\r\n  return id\r\n}\r\n\r\n/**\r\n * 安全的 requestAnimationFrame 包装\r\n */\r\nexport function safeRequestAnimationFrame(callback: FrameRequestCallback): number {\r\n  const id = requestAnimationFrame(callback)\r\n  getLeakDetector().trackAnimationFrame(id)\r\n  return id\r\n}\r\n\r\n/**\r\n * 自动清理的事件监听器\r\n */\r\nexport function useAutoCleanupListener(\r\n  target: Ref<EventTarget | null> | EventTarget,\r\n  event: string,\r\n  handler: EventListener,\r\n  options?: AddEventListenerOptions\r\n) {\r\n  const cleanup: (() => void)[] = []\r\n\r\n  const addEventListener = () => {\r\n    const element = 'value' in target ? target.value : target\r\n    if (!element) return\r\n\r\n    element.addEventListener(event, handler, options)\r\n    cleanup.push(() => element.removeEventListener(event, handler))\r\n  }\r\n\r\n  addEventListener()\r\n\r\n  onUnmounted(() => {\r\n    cleanup.forEach(fn => fn())\r\n  })\r\n\r\n  return {\r\n    cleanup: () => cleanup.forEach(fn => fn())\r\n  }\r\n}"],"names":["MemoryLeakDetector","constructor","options","listeners","WeakMap","timers","Set","intervals","animationFrames","observers","memorySnapshots","checkInterval","startMonitoring","interval","window","setInterval","checkMemoryGrowth","checkDOMLeaks","performance","memory","currentMemory","usedJSHeapSize","push","length","shift","recent","slice","avgGrowth","reduce","sum","val","i","threshold","onLeak","type","description","toFixed","value","allNodes","document","querySelectorAll","detachedCount","forEach","node","body","contains","isConnected","trackEventListener","element","handler","component","key","has","set","get","add","removeEventListener","delete","size","trackTimer","id","clearTimer","clearTimeout","clearInterval","trackAnimationFrame","clearAnimationFrame","cancelAnimationFrame","trackObserver","observer","clearObserver","disconnect","cleanup","clear","generateReport","memoryTrend","globalDetector","getLeakDetector","info","console","warn","useMemoryLeakDetection","detector","onBeforeUnmount","bind","safeSetTimeout","timeout","args","setTimeout","safeSetInterval","safeRequestAnimationFrame","callback","requestAnimationFrame","useAutoCleanupListener","target","event","addEventListener","onUnmounted","fn"],"mappings":"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"}
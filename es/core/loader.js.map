{"version":3,"file":"loader.js","sources":["../../src/core/loader.ts"],"sourcesContent":["/**\r\n * 模板加载器 - 动态加载模板组件\r\n */\r\n\r\nimport type { Component } from 'vue'\r\nimport type { TemplateFilter, TemplateLoadOptions, TemplateMetadata } from '../types'\r\nimport { getScanner } from './scanner'\r\nimport { loadComponentStyle } from './style-loader'\r\n\r\n/**\r\n * 模板加载器类 - 内存优化版本\r\n */\r\nexport class TemplateLoader {\r\n  // 使用 WeakRef 存储组件，允许垃圾回收\r\n  private loadedComponents: Map<string, WeakRef<Component>> = new Map()\r\n  // 加载中的 Promise 缓存，完成后立即清理\r\n  private loadingPromises: Map<string, Promise<Component>> = new Map()\r\n  // FinalizationRegistry 自动清理已回收的组件\r\n  private componentRegistry = new FinalizationRegistry((key: string) => {\r\n    // 自动清理已被垃圾回收的组件引用\r\n    this.loadedComponents.delete(key)\r\n  })\r\n  // 预编译的键生成函数，避免重复字符串拼接\r\n  private static createKey = (category: string, device: string, name: string): string => \r\n    `${category}/${device}/${name}`\r\n\r\n  /**\r\n   * 加载模板组件\r\n   */\r\n  async load(\r\n    category: string,\r\n    device: string,\r\n    name: string,\r\n    options?: TemplateLoadOptions\r\n  ): Promise<Component> {\r\n    const key = TemplateLoader.createKey(category, device, name)\r\n\r\n    // 检查缓存 - 优化查找逻辑\r\n    const weakRef = this.loadedComponents.get(key)\r\n    if (weakRef) {\r\n      const cached = weakRef.deref()\r\n      if (cached) {\r\n        options?.onLoad?.(cached)\r\n        return cached\r\n      }\r\n      // 组件已被垃圾回收，清理引用\r\n      this.loadedComponents.delete(key)\r\n    }\r\n\r\n    // 检查是否正在加载 - 简化逻辑\r\n    const pending = this.loadingPromises.get(key)\r\n    if (pending) return pending\r\n\r\n    // 从注册表获取模板\r\n    const scanner = getScanner()\r\n    const template = scanner.getTemplate(category, device, name)\r\n\r\n    if (!template) {\r\n      const error = new Error(`模板未找到: ${key}`)\r\n      options?.onError?.(error)\r\n      throw error\r\n    }\r\n\r\n    // 加载组件样式\r\n    loadComponentStyle(category, device, name, template.componentPath)\r\n\r\n    // 创建加载 Promise\r\n    const loadPromise = this._loadWithOptions(template.loader, key, options)\r\n    this.loadingPromises.set(key, loadPromise)\r\n\r\n    try {\r\n      const component = await loadPromise\r\n      // 使用WeakRef存储组件，允许垃圾回收\r\n      const weakRef = new WeakRef(component)\r\n      this.loadedComponents.set(key, weakRef)\r\n      this.componentRegistry.register(component, key)\r\n      this.loadingPromises.delete(key)\r\n      options?.onLoad?.(component)\r\n      return component\r\n    } catch (error) {\r\n      this.loadingPromises.delete(key)\r\n      options?.onError?.(error as Error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 带选项的加载\r\n   */\r\n  private async _loadWithOptions(\r\n    loader: () => Promise<Component>,\r\n    key: string,\r\n    options?: TemplateLoadOptions\r\n  ): Promise<Component> {\r\n    // 处理超时\r\n    if (options?.timeout) {\r\n      return Promise.race([\r\n        loader(),\r\n        new Promise<never>((_, reject) =>\r\n          setTimeout(() => reject(new Error(`加载超时: ${key}`)), options.timeout)\r\n        ),\r\n      ])\r\n    }\r\n\r\n    return loader()\r\n  }\r\n\r\n  /**\r\n   * 预加载模板\r\n   */\r\n  async preload(category: string, device: string, name: string): Promise<void> {\r\n    try {\r\n      await this.load(category, device, name, { preload: true })\r\n    } catch (error) {\r\n      console.warn(`[TemplateLoader] 预加载失败: ${category}/${device}/${name}`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量预加载模板\r\n   */\r\n  async preloadBatch(templates: Array<{ category: string; device: string; name: string }>): Promise<void> {\r\n    await Promise.allSettled(\r\n      templates.map(t => this.preload(t.category, t.device, t.name))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 根据过滤条件预加载模板\r\n   */\r\n  async preloadByFilter(filter: TemplateFilter): Promise<void> {\r\n    const scanner = getScanner()\r\n    const allMetadata = scanner.getAllMetadata()\r\n    \r\n    const filtered = this.filterTemplates(allMetadata, filter)\r\n    await this.preloadBatch(filtered)\r\n  }\r\n\r\n  /**\r\n   * 过滤模板 - 内存优化版本\r\n   */\r\n  private filterTemplates(templates: TemplateMetadata[], filter: TemplateFilter): TemplateMetadata[] {\r\n    // 预处理过滤条件，避免在循环中重复处理\r\n    const categorySet = filter.category ? \r\n      new Set(Array.isArray(filter.category) ? filter.category : [filter.category]) : null\r\n    const deviceSet = filter.device ? \r\n      new Set(Array.isArray(filter.device) ? filter.device : [filter.device]) : null\r\n    const nameSet = filter.name ? \r\n      new Set(Array.isArray(filter.name) ? filter.name : [filter.name]) : null\r\n    const tagsArray = filter.tags ? \r\n      (Array.isArray(filter.tags) ? filter.tags : [filter.tags]) : null\r\n\r\n    return templates.filter(t => {\r\n      // 使用 Set 进行 O(1) 查找\r\n      if (categorySet && !categorySet.has(t.category)) return false\r\n      if (deviceSet && !deviceSet.has(t.device)) return false\r\n      if (nameSet && !nameSet.has(t.name)) return false\r\n      if (tagsArray && (!t.tags || !tagsArray.some(tag => t.tags!.includes(tag)))) return false\r\n      if (filter.defaultOnly && !t.isDefault) return false\r\n      return true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 清除缓存 - 优化版本\r\n   */\r\n  clearCache(category?: string, device?: string, name?: string): void {\r\n    if (category && device && name) {\r\n      const key = TemplateLoader.createKey(category, device, name)\r\n      this.loadedComponents.delete(key)\r\n      this.loadingPromises.delete(key) // 同时清理加载中的 Promise\r\n    } else {\r\n      this.loadedComponents.clear()\r\n      this.loadingPromises.clear() // 清理所有加载中的 Promise\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取已加载的组件数量\r\n   */\r\n  getLoadedCount(): number {\r\n    return this.loadedComponents.size\r\n  }\r\n\r\n  /**\r\n   * 获取正在加载的组件数量\r\n   */\r\n  getLoadingCount(): number {\r\n    return this.loadingPromises.size\r\n  }\r\n}\r\n\r\n/**\r\n * 全局加载器实例\r\n */\r\nlet globalLoader: TemplateLoader | null = null\r\n\r\n/**\r\n * 获取全局加载器实例\r\n */\r\nexport function getLoader(): TemplateLoader {\r\n  if (!globalLoader) {\r\n    globalLoader = new TemplateLoader()\r\n  }\r\n  return globalLoader\r\n}\r\n\r\n/**\r\n * 加载模板（便捷方法）\r\n */\r\nexport async function loadTemplate(\r\n  category: string,\r\n  device: string,\r\n  name: string,\r\n  options?: TemplateLoadOptions\r\n): Promise<Component> {\r\n  const loader = getLoader()\r\n  return loader.load(category, device, name, options)\r\n}\r\n\r\n/**\r\n * 预加载模板（便捷方法）\r\n */\r\nexport async function preloadTemplate(\r\n  category: string,\r\n  device: string,\r\n  name: string\r\n): Promise<void> {\r\n  const loader = getLoader()\r\n  return loader.preload(category, device, name)\r\n}\r\n"],"names":["TemplateLoader","constructor","loadedComponents","Map","loadingPromises","componentRegistry","FinalizationRegistry","key","delete","load","category","device","name","options","createKey","weakRef","get","cached","deref","onLoad","pending","scanner","getScanner","template","getTemplate","error","Error","onError","loadComponentStyle","componentPath","loadPromise","_loadWithOptions","loader","set","component","WeakRef","register","timeout","Promise","race","_","reject","setTimeout","preload","console","warn","preloadBatch","templates","allSettled","map","t","preloadByFilter","filter","allMetadata","getAllMetadata","filtered","filterTemplates","categorySet","Set","Array","isArray","deviceSet","nameSet","tagsArray","tags","has","some","tag","includes","defaultOnly","isDefault","clearCache","clear","getLoadedCount","size","getLoadingCount","globalLoader","getLoader","loadTemplate","preloadTemplate"],"mappings":"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"}
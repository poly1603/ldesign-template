{"version":3,"file":"manager.js","sources":["../../src/core/manager.ts"],"sourcesContent":["/**\r\n * 模板管理器 - 统一管理模板扫描、加载和查询\r\n */\r\n\r\nimport type { Component } from 'vue'\r\nimport type {\r\n  DeviceType,\r\n  TemplateFilter,\r\n  TemplateLoadOptions,\r\n  TemplateManagerOptions,\r\n  TemplateMetadata,\r\n  TemplateRegistryItem,\r\n  TemplateScanResult,\r\n} from '../types'\r\nimport { createSetPool } from '../utils/objectPool'\r\nimport { getLoader } from './loader'\r\nimport { getScanner } from './scanner'\r\n\r\nexport class TemplateManager {\r\n  private initialized = false\r\n  private scanResult: TemplateScanResult | null = null\r\n  private options: TemplateManagerOptions\r\n  // 使用 WeakMap 缓存过滤结果，允许自动垃圾回收\r\n  private filterCache = new WeakMap<object, TemplateMetadata[]>()\r\n  // Set 池用于高效过滤\r\n  private setPool = createSetPool<string>(20)\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(options: TemplateManagerOptions = {}) {\r\n    this.options = options\r\n  }\r\n\r\n  /**\r\n   * 初始化（扫描所有模板）\r\n   */\r\n  async initialize(): Promise<TemplateScanResult> {\r\n    if (this.initialized && this.scanResult) {\r\n      return this.scanResult\r\n    }\r\n\r\n    const scanner = getScanner()\r\n    this.scanResult = await scanner.scan()\r\n    this.initialized = true\r\n\r\n    return this.scanResult\r\n  }\r\n\r\n  /**\r\n   * 确保已初始化\r\n   */\r\n  private async ensureInitialized(): Promise<void> {\r\n    if (!this.initialized) {\r\n      await this.initialize()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载模板组件\r\n   */\r\n  async loadTemplate(\r\n    category: string,\r\n    device: string,\r\n    name: string,\r\n    options?: TemplateLoadOptions\r\n  ): Promise<Component> {\r\n    await this.ensureInitialized()\r\n    const loader = getLoader()\r\n    return loader.load(category, device, name, options)\r\n  }\r\n\r\n  /**\r\n   * 获取所有模板元数据\r\n   */\r\n  async getAllTemplates(): Promise<TemplateMetadata[]> {\r\n    await this.ensureInitialized()\r\n    const scanner = getScanner()\r\n    return scanner.getAllMetadata()\r\n  }\r\n\r\n  /**\r\n   * 根据过滤条件查询模板\r\n   */\r\n  async queryTemplates(filter: TemplateFilter): Promise<TemplateMetadata[]> {\r\n    await this.ensureInitialized()\r\n    const allTemplates = await this.getAllTemplates()\r\n    return this.filterTemplates(allTemplates, filter)\r\n  }\r\n\r\n  /**\r\n   * 获取指定分类的所有模板\r\n   */\r\n  async getTemplatesByCategory(category: string): Promise<TemplateMetadata[]> {\r\n    return this.queryTemplates({ category })\r\n  }\r\n\r\n  /**\r\n   * 获取指定设备的所有模板\r\n   */\r\n  async getTemplatesByDevice(device: DeviceType): Promise<TemplateMetadata[]> {\r\n    return this.queryTemplates({ device })\r\n  }\r\n\r\n  /**\r\n   * 获取默认模板\r\n   */\r\n  async getDefaultTemplate(category: string, device: DeviceType | string): Promise<TemplateMetadata | null> {\r\n    const templates = await this.queryTemplates({\r\n      category,\r\n      device: device as DeviceType,\r\n      defaultOnly: true,\r\n    })\r\n    return templates[0] || null\r\n  }\r\n\r\n  /**\r\n   * 获取扫描结果\r\n   */\r\n  getScanResult(): TemplateScanResult | null {\r\n    return this.scanResult\r\n  }\r\n\r\n  /**\r\n   * 预加载模板\r\n   */\r\n  async preloadTemplate(category: string, device: string, name: string): Promise<void> {\r\n    await this.ensureInitialized()\r\n    const loader = getLoader()\r\n    return loader.preload(category, device, name)\r\n  }\r\n\r\n  /**\r\n   * 根据过滤条件预加载模板\r\n   */\r\n  async preloadByFilter(filter: TemplateFilter): Promise<void> {\r\n    await this.ensureInitialized()\r\n    const loader = getLoader()\r\n    return loader.preloadByFilter(filter)\r\n  }\r\n\r\n  /**\r\n   * 清除缓存\r\n   */\r\n  clearCache(category?: string, device?: string, name?: string): void {\r\n    const loader = getLoader()\r\n    loader.clearCache(category, device, name)\r\n  }\r\n\r\n  /**\r\n   * 扫描模板（别名方法）\r\n   */\r\n  async scanTemplates(): Promise<Map<string, TemplateRegistryItem>> {\r\n    await this.initialize()\r\n    // 返回注册表的 Map 格式\r\n    const scanner = getScanner()\r\n    return scanner.getRegistry()\r\n  }\r\n\r\n  /**\r\n   * 重新扫描模板\r\n   */\r\n  async rescan(): Promise<TemplateScanResult> {\r\n    this.initialized = false\r\n    return this.initialize()\r\n  }\r\n\r\n  /**\r\n   * 过滤模板 - 优化性能版本\r\n   */\r\n  private filterTemplates(templates: TemplateMetadata[], filter: TemplateFilter): TemplateMetadata[] {\r\n    // 检查缓存\r\n    const cacheKey = { ...filter }\r\n    const cached = this.filterCache.get(cacheKey)\r\n    if (cached) return cached\r\n\r\n    // 预处理过滤条件，复用 Set 对象\r\n    const categorySet = this.createFilterSet(filter.category)\r\n    const deviceSet = this.createFilterSet(filter.device)\r\n    const nameSet = this.createFilterSet(filter.name)\r\n    const tagsArray = filter.tags ? (Array.isArray(filter.tags) ? filter.tags : [filter.tags]) : null\r\n\r\n    const result = templates.filter(t => {\r\n      // 使用Set.has()代替Array.includes()，时间复杂度从O(n)降为O(1)\r\n      if (categorySet && !categorySet.has(t.category)) return false\r\n      if (deviceSet && !deviceSet.has(t.device)) return false\r\n      if (nameSet && !nameSet.has(t.name)) return false\r\n      \r\n      if (tagsArray && (!t.tags || !tagsArray.some(tag => t.tags!.includes(tag)))) return false\r\n      if (filter.defaultOnly && !t.isDefault) return false\r\n\r\n      return true\r\n    })\r\n\r\n    // 释放 Set 对象回池\r\n    if (categorySet) this.setPool.release(categorySet)\r\n    if (deviceSet) this.setPool.release(deviceSet)\r\n    if (nameSet) this.setPool.release(nameSet)\r\n\r\n    // 缓存结果\r\n    this.filterCache.set(cacheKey, result)\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 创建过滤用的 Set\r\n   */\r\n  private createFilterSet(value: string | string[] | undefined): Set<string> | null {\r\n    if (!value) return null\r\n    const set = this.setPool.acquire()\r\n    const values = Array.isArray(value) ? value : [value]\r\n    for (const v of values) {\r\n      set.add(v)\r\n    }\r\n    return set\r\n  }\r\n}\r\n\r\n/**\r\n * 全局管理器实例\r\n */\r\nlet globalManager: TemplateManager | null = null\r\n\r\n/**\r\n * 获取全局管理器实例\r\n */\r\nexport function getManager(): TemplateManager {\r\n  if (!globalManager) {\r\n    globalManager = new TemplateManager()\r\n  }\r\n  return globalManager\r\n}\r\n\r\n/**\r\n * 创建模板管理器实例\r\n */\r\nexport function createTemplateManager(): TemplateManager {\r\n  return new TemplateManager()\r\n}\r\n"],"names":["TemplateManager","constructor","options","initialized","scanResult","filterCache","WeakMap","setPool","createSetPool","initialize","scanner","getScanner","scan","ensureInitialized","loadTemplate","category","device","name","loader","getLoader","load","getAllTemplates","getAllMetadata","queryTemplates","filter","allTemplates","filterTemplates","getTemplatesByCategory","getTemplatesByDevice","getDefaultTemplate","templates","defaultOnly","getScanResult","preloadTemplate","preload","preloadByFilter","clearCache","scanTemplates","getRegistry","rescan","cacheKey","cached","get","categorySet","createFilterSet","deviceSet","nameSet","tagsArray","tags","Array","isArray","result","t","has","some","tag","includes","isDefault","release","set","value","acquire","values","v","add","globalManager","getManager","createTemplateManager"],"mappings":"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"}
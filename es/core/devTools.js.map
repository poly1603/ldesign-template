{"version":3,"file":"devTools.js","sources":["../../src/core/devTools.ts"],"sourcesContent":["/**\n * 模板开发工具系统\n */\n\nimport type { App, ComponentPublicInstance } from 'vue'\nimport type { Template } from '../types'\nimport { reactive, ref } from 'vue'\n\n/**\n * 开发工具配置\n */\nexport interface DevToolsConfig {\n  enabled: boolean\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  theme?: 'light' | 'dark'\n  collapsed?: boolean\n  features?: {\n    inspector?: boolean\n    debugger?: boolean\n    profiler?: boolean\n    analyzer?: boolean\n    network?: boolean\n    console?: boolean\n  }\n}\n\n/**\n * 调试信息\n */\nexport interface DebugInfo {\n  id: string\n  timestamp: number\n  type: 'log' | 'error' | 'warning' | 'info'\n  category: string\n  message: string\n  data?: any\n  stack?: string\n}\n\n/**\n * 性能指标\n */\nexport interface PerformanceMetrics {\n  renderTime: number\n  updateTime: number\n  mountTime: number\n  unmountTime: number\n  memoryUsage?: number\n  componentCount?: number\n  propUpdateCount?: number\n}\n\n/**\n * 模板调试器\n */\nexport class TemplateDebugger {\n  private logs: DebugInfo[] = reactive([])\n  private breakpoints: Map<string, Set<string>> = new Map()\n  private watchedTemplates: Set<string> = new Set()\n  private paused = ref(false)\n  private currentContext: any = null\n  \n  /**\n   * 添加日志\n   */\n  log(info: Omit<DebugInfo, 'id' | 'timestamp'>) {\n    const debugInfo: DebugInfo = {\n      ...info,\n      id: this.generateId(),\n      timestamp: Date.now()\n    }\n    \n    this.logs.push(debugInfo)\n    \n    // 限制日志数量\n    if (this.logs.length > 1000) {\n      this.logs.shift()\n    }\n    \n    // 触发断点\n    if (this.shouldBreak(info.category)) {\n      this.pause(debugInfo)\n    }\n  }\n  \n  /**\n   * 设置断点\n   */\n  setBreakpoint(templateId: string, point: string) {\n    if (!this.breakpoints.has(templateId)) {\n      this.breakpoints.set(templateId, new Set())\n    }\n    this.breakpoints.get(templateId)!.add(point)\n  }\n  \n  /**\n   * 移除断点\n   */\n  removeBreakpoint(templateId: string, point: string) {\n    const points = this.breakpoints.get(templateId)\n    if (points) {\n      points.delete(point)\n      if (points.size === 0) {\n        this.breakpoints.delete(templateId)\n      }\n    }\n  }\n  \n  /**\n   * 监视模板\n   */\n  watchTemplate(templateId: string) {\n    this.watchedTemplates.add(templateId)\n  }\n  \n  /**\n   * 取消监视\n   */\n  unwatchTemplate(templateId: string) {\n    this.watchedTemplates.delete(templateId)\n  }\n  \n  /**\n   * 暂停执行\n   */\n  private pause(info: DebugInfo) {\n    this.paused.value = true\n    this.currentContext = info\n    \n    // 在控制台中显示断点信息\n    console.log('🔴 Breakpoint hit:', info)\n    \n    // 等待继续命令\n    return new Promise(resolve => {\n      const checkResume = () => {\n        if (!this.paused.value) {\n          resolve(undefined)\n        } else {\n          setTimeout(checkResume, 100)\n        }\n      }\n      checkResume()\n    })\n  }\n  \n  /**\n   * 继续执行\n   */\n  resume() {\n    this.paused.value = false\n    this.currentContext = null\n  }\n  \n  /**\n   * 步进执行\n   */\n  stepOver() {\n    // 实现步进逻辑\n    this.resume()\n  }\n  \n  /**\n   * 步入执行\n   */\n  stepInto() {\n    // 实现步入逻辑\n    this.resume()\n  }\n  \n  /**\n   * 步出执行\n   */\n  stepOut() {\n    // 实现步出逻辑\n    this.resume()\n  }\n  \n  /**\n   * 清空日志\n   */\n  clearLogs() {\n    this.logs.splice(0, this.logs.length)\n  }\n  \n  /**\n   * 获取日志\n   */\n  getLogs(filter?: {\n    type?: DebugInfo['type']\n    category?: string\n    startTime?: number\n    endTime?: number\n  }): DebugInfo[] {\n    let result = [...this.logs]\n    \n    if (filter) {\n      if (filter.type) {\n        result = result.filter(log => log.type === filter.type)\n      }\n      if (filter.category) {\n        result = result.filter(log => log.category === filter.category)\n      }\n      if (filter.startTime) {\n        result = result.filter(log => log.timestamp >= filter.startTime!)\n      }\n      if (filter.endTime) {\n        result = result.filter(log => log.timestamp <= filter.endTime!)\n      }\n    }\n    \n    return result\n  }\n  \n  /**\n   * 导出日志\n   */\n  exportLogs(): string {\n    return JSON.stringify(this.logs, null, 2)\n  }\n  \n  /**\n   * 是否应该中断\n   */\n  private shouldBreak(category: string): boolean {\n    // 检查是否有对应的断点\nfor (const points of this.breakpoints.values()) {\n      if (points.has(category) || points.has('*')) {\n        return true\n      }\n    }\n    return false\n  }\n  \n  /**\n   * 生成唯一ID\n   */\n  private generateId(): string {\n    return `debug_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n}\n\n/**\n * 性能分析器\n */\nexport class TemplateProfiler {\n  private metrics: Map<string, PerformanceMetrics[]> = new Map()\n  private timers: Map<string, number> = new Map()\n  private enabled = ref(true)\n  \n  /**\n   * 开始计时\n   */\n  startTimer(id: string) {\n    if (!this.enabled.value) return\n    \n    this.timers.set(id, performance.now())\n  }\n  \n  /**\n   * 结束计时\n   */\n  endTimer(id: string): number {\n    if (!this.enabled.value) return 0\n    \n    const startTime = this.timers.get(id)\n    if (!startTime) return 0\n    \n    const duration = performance.now() - startTime\n    this.timers.delete(id)\n    \n    return duration\n  }\n  \n  /**\n   * 记录性能指标\n   */\n  recordMetrics(templateId: string, metrics: PerformanceMetrics) {\n    if (!this.metrics.has(templateId)) {\n      this.metrics.set(templateId, [])\n    }\n    \n    const templateMetrics = this.metrics.get(templateId)!\n    templateMetrics.push(metrics)\n    \n    // 限制存储数量\n    if (templateMetrics.length > 100) {\n      templateMetrics.shift()\n    }\n  }\n  \n  /**\n   * 获取性能指标\n   */\n  getMetrics(templateId?: string): Map<string, PerformanceMetrics[]> | PerformanceMetrics[] | undefined {\n    if (templateId) {\n      return this.metrics.get(templateId)\n    }\n    return this.metrics\n  }\n  \n  /**\n   * 获取平均性能\n   */\n  getAverageMetrics(templateId: string): PerformanceMetrics | undefined {\n    const metrics = this.metrics.get(templateId)\n    if (!metrics || metrics.length === 0) return undefined\n    \n    const sum = metrics.reduce((acc, m) => ({\n      renderTime: acc.renderTime + m.renderTime,\n      updateTime: acc.updateTime + m.updateTime,\n      mountTime: acc.mountTime + m.mountTime,\n      unmountTime: acc.unmountTime + m.unmountTime,\n      memoryUsage: (acc.memoryUsage || 0) + (m.memoryUsage || 0),\n      componentCount: (acc.componentCount || 0) + (m.componentCount || 0),\n      propUpdateCount: (acc.propUpdateCount || 0) + (m.propUpdateCount || 0)\n    }), {\n      renderTime: 0,\n      updateTime: 0,\n      mountTime: 0,\n      unmountTime: 0,\n      memoryUsage: 0,\n      componentCount: 0,\n      propUpdateCount: 0\n    })\n    \n    const count = metrics.length\n    \n    return {\n      renderTime: sum.renderTime / count,\n      updateTime: sum.updateTime / count,\n      mountTime: sum.mountTime / count,\n      unmountTime: sum.unmountTime / count,\n      memoryUsage: sum.memoryUsage ? sum.memoryUsage / count : undefined,\n      componentCount: sum.componentCount ? Math.round(sum.componentCount / count) : undefined,\n      propUpdateCount: sum.propUpdateCount ? Math.round(sum.propUpdateCount / count) : undefined\n    }\n  }\n  \n  /**\n   * 清空性能数据\n   */\n  clearMetrics(templateId?: string) {\n    if (templateId) {\n      this.metrics.delete(templateId)\n    } else {\n      this.metrics.clear()\n    }\n  }\n  \n  /**\n   * 导出性能数据\n   */\n  exportMetrics(): string {\n    const data: Record<string, any> = {}\n    \n    for (const [id, metrics] of this.metrics) {\n      data[id] = {\n        metrics,\n        average: this.getAverageMetrics(id)\n      }\n    }\n    \n    return JSON.stringify(data, null, 2)\n  }\n  \n  /**\n   * 启用/禁用性能分析\n   */\n  setEnabled(enabled: boolean) {\n    this.enabled.value = enabled\n  }\n}\n\n/**\n * 模板检查器\n */\nexport class TemplateInspector {\n  private selectedTemplate = ref<Template | null>(null)\n  private selectedComponent = ref<ComponentPublicInstance | null>(null)\n  private highlightEnabled = ref(false)\n  \n  /**\n   * 选择模板\n   */\n  selectTemplate(template: Template) {\n    this.selectedTemplate.value = template\n  }\n  \n  /**\n   * 选择组件\n   */\n  selectComponent(component: ComponentPublicInstance) {\n    this.selectedComponent.value = component\n  }\n  \n  /**\n   * 获取模板信息\n   */\n  getTemplateInfo(template: Template): Record<string, any> {\n    return {\n      id: template.id,\n      name: template.name,\n      category: template.category,\n      metadata: template.metadata,\n      config: template.config,\n      component: template.component,\n      content: template.content,\n      createdAt: template.createdAt,\n      updatedAt: template.updatedAt\n    }\n  }\n  \n  /**\n   * 获取组件信息\n   */\n  getComponentInfo(component: ComponentPublicInstance): Record<string, any> {\n    return {\n      name: component.$options.name || 'Anonymous',\n      props: component.$props,\n      data: component.$data,\n      computed: this.getComputedProperties(component),\n      methods: this.getMethods(component),\n      refs: component.$refs,\n      parent: component.$parent?.$options.name || null,\n      children: []  // $children is not available in Vue 3\n    }\n  }\n  \n  /**\n   * 获取计算属性\n   */\n  private getComputedProperties(component: ComponentPublicInstance): Record<string, any> {\n    const computed: Record<string, any> = {}\n    const options = component.$options.computed\n    \n    if (options) {\n      for (const key of Object.keys(options)) {\n        try {\n          computed[key] = (component as any)[key]\n        } catch {\n          computed[key] = '<Error>'\n        }\n      }\n    }\n    \n    return computed\n  }\n  \n  /**\n   * 获取方法\n   */\n  private getMethods(component: ComponentPublicInstance): string[] {\n    const methods: string[] = []\n    const options = component.$options.methods\n    \n    if (options) {\n      methods.push(...Object.keys(options))\n    }\n    \n    return methods\n  }\n  \n  /**\n   * 高亮元素\n   */\n  highlightElement(element: HTMLElement) {\n    if (!this.highlightEnabled.value) return\n    \n    // 添加高亮样式\n    const originalOutline = element.style.outline\n    element.style.outline = '2px solid #FF6B6B'\n    \n    // 3秒后移除高亮\n    setTimeout(() => {\n      element.style.outline = originalOutline\n    }, 3000)\n  }\n  \n  /**\n   * 启用/禁用高亮\n   */\n  setHighlightEnabled(enabled: boolean) {\n    this.highlightEnabled.value = enabled\n  }\n}\n\n/**\n * 网络监控器\n */\nexport class NetworkMonitor {\n  private requests: any[] = reactive([])\n  private enabled = ref(true)\n  \n  /**\n   * 拦截请求\n   */\n  interceptRequest(config: any) {\n    if (!this.enabled.value) return config\n    \n    const request = {\n      id: this.generateId(),\n      url: config.url,\n      method: config.method,\n      headers: config.headers,\n      data: config.data,\n      timestamp: Date.now(),\n      status: 'pending'\n    }\n    \n    this.requests.push(request)\n    \n    // 限制存储数量\n    if (this.requests.length > 500) {\n      this.requests.shift()\n    }\n    \n    // 添加请求ID到配置\n    config._requestId = request.id\n    \n    return config\n  }\n  \n  /**\n   * 处理响应\n   */\n  handleResponse(response: any) {\n    if (!this.enabled.value) return response\n    \n    const requestId = response.config?._requestId\n    if (requestId) {\n      const request = this.requests.find(r => r.id === requestId)\n      if (request) {\n        request.status = 'success'\n        request.response = {\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n          data: response.data\n        }\n        request.duration = Date.now() - request.timestamp\n      }\n    }\n    \n    return response\n  }\n  \n  /**\n   * 处理错误\n   */\n  handleError(error: any) {\n    if (!this.enabled.value) return Promise.reject(error)\n    \n    const requestId = error.config?._requestId\n    if (requestId) {\n      const request = this.requests.find(r => r.id === requestId)\n      if (request) {\n        request.status = 'error'\n        request.error = error.message\n        request.duration = Date.now() - request.timestamp\n      }\n    }\n    \n    return Promise.reject(error)\n  }\n  \n  /**\n   * 获取请求列表\n   */\n  getRequests(filter?: {\n    status?: string\n    method?: string\n    url?: string\n  }): any[] {\n    let result = [...this.requests]\n    \n    if (filter) {\n      if (filter.status) {\n        result = result.filter(r => r.status === filter.status)\n      }\n      if (filter.method) {\n        result = result.filter(r => r.method === filter.method)\n      }\n      if (filter.url) {\n        result = result.filter(r => r.url.includes(filter.url))\n      }\n    }\n    \n    return result\n  }\n  \n  /**\n   * 清空请求记录\n   */\n  clearRequests() {\n    this.requests.splice(0, this.requests.length)\n  }\n  \n  /**\n   * 生成唯一ID\n   */\n  private generateId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n  \n  /**\n   * 启用/禁用网络监控\n   */\n  setEnabled(enabled: boolean) {\n    this.enabled.value = enabled\n  }\n}\n\n/**\n * 控制台增强\n */\nexport class ConsoleEnhancer {\n  private originalConsole: any = {}\n  private logs: any[] = reactive([])\n  private filters: Set<string> = new Set(['log', 'info', 'warn', 'error', 'debug'])\n  \n  /**\n   * 增强控制台\n   */\n  enhance() {\n    // 保存原始console方法\n    this.originalConsole = {\n      log: console.log,\n      info: console.info,\n      warn: console.warn,\n      error: console.error,\n      debug: console.debug\n    }\n    \n    // 重写console方法\n    const methods = ['log', 'info', 'warn', 'error', 'debug']\n    \n    for (const method of methods) {\n      (console as any)[method] = (...args: any[]) => {\n        // 记录日志\n        this.addLog(method, args)\n        \n        // 调用原始方法\n        this.originalConsole[method](...args)\n      }\n    }\n  }\n  \n  /**\n   * 恢复控制台\n   */\n  restore() {\n    Object.assign(console, this.originalConsole)\n  }\n  \n  /**\n   * 添加日志\n   */\n  private addLog(type: string, args: any[]) {\n    const log = {\n      id: this.generateId(),\n      type,\n      timestamp: Date.now(),\n      args,\nstack: new Error('Stack').stack\n    }\n    \n    this.logs.push(log)\n    \n    // 限制日志数量\n    if (this.logs.length > 1000) {\n      this.logs.shift()\n    }\n  }\n  \n  /**\n   * 获取日志\n   */\n  getLogs(filter?: string[]): any[] {\n    if (!filter || filter.length === 0) {\n      return [...this.logs]\n    }\n    \n    return this.logs.filter(log => filter.includes(log.type))\n  }\n  \n  /**\n   * 清空日志\n   */\n  clearLogs() {\n    this.logs.splice(0, this.logs.length)\n  }\n  \n  /**\n   * 设置过滤器\n   */\n  setFilters(filters: string[]) {\n    this.filters = new Set(filters)\n  }\n  \n  /**\n   * 生成唯一ID\n   */\n  private generateId(): string {\n    return `console_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n}\n\n/**\n * 开发工具管理器\n */\nexport class DevToolsManager {\n  private static instance: DevToolsManager | null = null\n  private config: DevToolsConfig\n  private templateDebugger: TemplateDebugger | null = null\n  private profiler: TemplateProfiler | null = null\n  private inspector: TemplateInspector | null = null\n  private networkMonitor: NetworkMonitor | null = null\n  private consoleEnhancer: ConsoleEnhancer | null = null\n  private app: App | null = null\n  private disposed = false\n  \n  private constructor(config: DevToolsConfig) {\n    this.config = reactive(config)\n    \n    // 只在开发环境创建工具实例\nif (import.meta.env.DEV && config.enabled) {\n      this.templateDebugger = new TemplateDebugger()\n      this.profiler = new TemplateProfiler()\n      this.inspector = new TemplateInspector()\n      this.networkMonitor = new NetworkMonitor()\n      this.consoleEnhancer = new ConsoleEnhancer()\n    }\n  }\n  \n  /**\n   * 获取实例\n   */\n  static getInstance(config?: DevToolsConfig): DevToolsManager {\n    if (!this.instance) {\n      this.instance = new DevToolsManager(config || {\n        enabled: true,\n        position: 'bottom-right',\n        theme: 'dark',\n        collapsed: true,\n        features: {\n          inspector: true,\n          debugger: true,\n          profiler: true,\n          analyzer: true,\n          network: true,\n          console: true\n        }\n      })\n    }\n    return this.instance\n  }\n  \n  /**\n   * 安装到Vue应用\n   */\n  install(app: App) {\n    this.app = app\n    \n    // 注入全局属性\n    app.config.globalProperties.$devTools = this\n    \n    // 增强控制台\n    if (this.config.features?.console && this.consoleEnhancer) {\n      this.consoleEnhancer.enhance()\n    }\n    \n    // 添加全局错误处理\n    app.config.errorHandler = (err, instance, info) => {\n      if (this.templateDebugger) {\n        const error = err as Error\n        this.templateDebugger.log({\n          type: 'error',\n          category: 'global',\n          message: error.message || String(err),\n          data: {\n            error: err,\n            instance,\n            info\n          },\n          stack: error.stack\n        })\n      }\n    }\n    \n    // 添加警告处理\n    app.config.warnHandler = (msg, instance, trace) => {\n      if (this.templateDebugger) {\n        this.templateDebugger.log({\n          type: 'warning',\n          category: 'global',\n          message: msg,\n          data: {\n            instance,\n            trace\n          }\n        })\n      }\n    }\n  }\n  \n  /**\n   * 卸载\n   */\n  uninstall() {\n    if (this.disposed) return\n    \n    if (this.config.features?.console && this.consoleEnhancer) {\n      this.consoleEnhancer.restore()\n    }\n    \n    if (this.app) {\n      delete this.app.config.globalProperties.$devTools\n      this.app.config.errorHandler = undefined\n      this.app.config.warnHandler = undefined\n      this.app = null\n    }\n    \n    // 清理所有工具实例\n    this.dispose()\n  }\n  \n  /**\n   * 销毁实例\n   */\n  private dispose() {\n    this.disposed = true\n    \n    // 清理所有工具\n    if (this.templateDebugger) {\n      this.templateDebugger.clearLogs()\n      this.templateDebugger = null\n    }\n    if (this.profiler) {\n      this.profiler.clearMetrics()\n      this.profiler = null\n    }\n    if (this.inspector) {\n      this.inspector = null\n    }\n    if (this.networkMonitor) {\n      this.networkMonitor.clearRequests()\n      this.networkMonitor = null\n    }\n    if (this.consoleEnhancer) {\n      this.consoleEnhancer.clearLogs()\n      this.consoleEnhancer = null\n    }\n    \n    // 清理单例引用\n    if (DevToolsManager.instance === this) {\n      DevToolsManager.instance = null\n    }\n  }\n  \n  /**\n   * 获取调试器\n   */\n  getDebugger(): TemplateDebugger | null {\n    return this.templateDebugger\n  }\n  \n  /**\n   * 获取性能分析器\n   */\n  getProfiler(): TemplateProfiler | null {\n    return this.profiler\n  }\n  \n  /**\n   * 获取检查器\n   */\n  getInspector(): TemplateInspector | null {\n    return this.inspector\n  }\n  \n  /**\n   * 获取网络监控器\n   */\n  getNetworkMonitor(): NetworkMonitor | null {\n    return this.networkMonitor\n  }\n  \n  /**\n   * 获取控制台增强器\n   */\n  getConsoleEnhancer(): ConsoleEnhancer | null {\n    return this.consoleEnhancer\n  }\n  \n  /**\n   * 更新配置\n   */\n  updateConfig(config: Partial<DevToolsConfig>) {\n    Object.assign(this.config, config)\n  }\n  \n  /**\n   * 获取配置\n   */\n  getConfig(): DevToolsConfig {\n    return this.config\n  }\n  \n  /**\n   * 启用/禁用\n   */\n  setEnabled(enabled: boolean) {\n    this.config.enabled = enabled\n    \n    if (!enabled) {\n      this.consoleEnhancer?.restore()\n    } else if (this.config.features?.console) {\n      this.consoleEnhancer?.enhance()\n    }\n  }\n}\n\n// 导出单例\nexport const devTools = DevToolsManager.getInstance()"],"names":["TemplateDebugger","constructor","logs","reactive","breakpoints","Map","watchedTemplates","Set","paused","ref","currentContext","log","info","debugInfo","id","generateId","timestamp","Date","now","push","length","shift","shouldBreak","category","pause","setBreakpoint","templateId","point","has","set","get","add","removeBreakpoint","points","delete","size","watchTemplate","unwatchTemplate","value","console","Promise","resolve","checkResume","undefined","setTimeout","resume","stepOver","stepInto","stepOut","clearLogs","splice","getLogs","filter","result","type","startTime","endTime","exportLogs","JSON","stringify","values","Math","random","toString","substr","TemplateProfiler","metrics","timers","enabled","startTimer","performance","endTimer","duration","recordMetrics","templateMetrics","getMetrics","getAverageMetrics","sum","reduce","acc","m","renderTime","updateTime","mountTime","unmountTime","memoryUsage","componentCount","propUpdateCount","count","round","clearMetrics","clear","exportMetrics","data","average","setEnabled","TemplateInspector","selectedTemplate","selectedComponent","highlightEnabled","selectTemplate","template","selectComponent","component","getTemplateInfo","name","metadata","config","content","createdAt","updatedAt","getComponentInfo","$options","props","$props","$data","computed","getComputedProperties","methods","getMethods","refs","$refs","parent","$parent","children","options","key","Object","keys","highlightElement","element","originalOutline","style","outline","setHighlightEnabled","NetworkMonitor","requests","interceptRequest","request","url","method","headers","status","_requestId","handleResponse","response","requestId","find","r","statusText","handleError","error","reject","message","getRequests","includes","clearRequests","ConsoleEnhancer","originalConsole","filters","enhance","warn","debug","args","addLog","restore","assign","stack","Error","setFilters","DevToolsManager","templateDebugger","profiler","inspector","networkMonitor","consoleEnhancer","app","disposed","import","env","DEV","getInstance","instance","position","theme","collapsed","features","debugger","analyzer","network","install","globalProperties","$devTools","errorHandler","err","String","warnHandler","msg","trace","uninstall","dispose","getDebugger","getProfiler","getInspector","getNetworkMonitor","getConsoleEnhancer","updateConfig","getConfig","devTools"],"mappings":"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"}
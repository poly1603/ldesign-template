{"version":3,"file":"snapshot.js","sources":["../../src/core/snapshot.ts"],"sourcesContent":["/**\n * 模板快照与时间旅行系统\n */\n\nimport type { Template } from '../types'\n\n/**\n * 快照类型\n */\nexport interface Snapshot {\n  /**\n   * 快照ID\n   */\n  id: string\n  \n  /**\n   * 快照名称\n   */\n  name?: string\n  \n  /**\n   * 快照描述\n   */\n  description?: string\n  \n  /**\n   * 创建时间\n   */\n  timestamp: Date\n  \n  /**\n   * 模板状态\n   */\n  state: TemplateState\n  \n  /**\n   * 快照元数据\n   */\n  metadata?: Record<string, any>\n  \n  /**\n   * 快照标签\n   */\n  tags?: string[]\n  \n  /**\n   * 是否为自动快照\n   */\n  auto?: boolean\n}\n\n/**\n * 模板状态\n */\nexport interface TemplateState {\n  /**\n   * 模板数据\n   */\n  template: Template\n  \n  /**\n   * 表单数据\n   */\n  formData?: Record<string, any>\n  \n  /**\n   * 用户偏好\n   */\n  preferences?: Record<string, any>\n  \n  /**\n   * 运行时状态\n   */\n  runtime?: Record<string, any>\n  \n  /**\n   * DOM快照\n   */\n  domSnapshot?: string\n}\n\n/**\n * 快照配置\n */\nexport interface SnapshotConfig {\n  /**\n   * 最大快照数量\n   */\n  maxSnapshots?: number\n  \n  /**\n   * 自动快照间隔（毫秒）\n   */\n  autoSnapshotInterval?: number\n  \n  /**\n   * 是否压缩存储\n   */\n  compress?: boolean\n  \n  /**\n   * 是否持久化存储\n   */\n  persist?: boolean\n  \n  /**\n   * 存储键名\n   */\n  storageKey?: string\n  \n  /**\n   * 快照前钩子\n   */\n  beforeSnapshot?: (state: TemplateState) => TemplateState | false\n  \n  /**\n   * 快照后钩子\n   */\n  afterSnapshot?: (snapshot: Snapshot) => void\n  \n  /**\n   * 恢复前钩子\n   */\n  beforeRestore?: (snapshot: Snapshot) => boolean\n  \n  /**\n   * 恢复后钩子\n   */\n  afterRestore?: (snapshot: Snapshot) => void\n}\n\n/**\n * 时间旅行配置\n */\nexport interface TimeTravelConfig {\n  /**\n   * 是否启用\n   */\n  enabled?: boolean\n  \n  /**\n   * 最大历史记录\n   */\n  maxHistory?: number\n  \n  /**\n   * 是否记录DOM变化\n   */\n  recordDOM?: boolean\n  \n  /**\n   * 忽略的属性\n   */\n  ignoreProperties?: string[]\n  \n  /**\n   * 差异算法\n   */\n  diffAlgorithm?: 'deep' | 'shallow' | 'custom'\n  \n  /**\n   * 自定义差异函数\n   */\n  customDiff?: (prev: any, next: any) => any\n}\n\n/**\n * 快照管理器\n */\nexport class SnapshotManager {\n  private snapshots: Map<string, Snapshot> = new Map()\n  private history: string[] = []\n  private currentIndex: number = -1\n  private config: SnapshotConfig\n  private autoSnapshotTimer: ReturnType<typeof setInterval> | null = null\n  \n  constructor(config: SnapshotConfig = {}) {\n    this.config = {\n      maxSnapshots: 50,\n      autoSnapshotInterval: 0,\n      compress: false,\n      persist: true,\n      storageKey: 'template-snapshots',\n      ...config\n    }\n    \n    if (this.config.persist) {\n      this.loadFromStorage()\n    }\n    \n    if (this.config.autoSnapshotInterval && this.config.autoSnapshotInterval > 0) {\n      this.startAutoSnapshot()\n    }\n  }\n  \n  /**\n   * 创建快照\n   */\n  createSnapshot(\n    state: TemplateState,\n    options: Partial<Snapshot> = {}\n  ): Snapshot | null {\n    // 执行前置钩子\n    if (this.config.beforeSnapshot) {\n      const processed = this.config.beforeSnapshot(state)\n      if (processed === false) return null\n      if (processed) state = processed\n    }\n    \n    const snapshot: Snapshot = {\n      id: this.generateId(),\n      timestamp: new Date(),\n      state: this.cloneState(state),\n      ...options\n    }\n    \n    // 添加到快照集合\n    this.snapshots.set(snapshot.id, snapshot)\n    this.history.push(snapshot.id)\n    this.currentIndex = this.history.length - 1\n    \n    // 限制快照数量\n    if (this.config.maxSnapshots && this.history.length > this.config.maxSnapshots) {\n      const removed = this.history.shift()\n      if (removed) {\n        this.snapshots.delete(removed)\n        this.currentIndex--\n      }\n    }\n    \n    // 持久化存储\n    if (this.config.persist) {\n      this.saveToStorage()\n    }\n    \n    // 执行后置钩子\n    if (this.config.afterSnapshot) {\n      this.config.afterSnapshot(snapshot)\n    }\n    \n    return snapshot\n  }\n  \n  /**\n   * 恢复快照\n   */\n  restoreSnapshot(snapshotId: string): TemplateState | null {\n    const snapshot = this.snapshots.get(snapshotId)\n    if (!snapshot) return null\n    \n    // 执行前置钩子\n    if (this.config.beforeRestore) {\n      const shouldRestore = this.config.beforeRestore(snapshot)\n      if (!shouldRestore) return null\n    }\n    \n    // 更新当前索引\n    const index = this.history.indexOf(snapshotId)\n    if (index !== -1) {\n      this.currentIndex = index\n    }\n    \n    // 执行后置钩子\n    if (this.config.afterRestore) {\n      this.config.afterRestore(snapshot)\n    }\n    \n    return this.cloneState(snapshot.state)\n  }\n  \n  /**\n   * 获取快照\n   */\n  getSnapshot(snapshotId: string): Snapshot | undefined {\n    return this.snapshots.get(snapshotId)\n  }\n  \n  /**\n   * 获取所有快照\n   */\n  getAllSnapshots(): Snapshot[] {\n    return this.history.map(id => this.snapshots.get(id)!).filter(Boolean)\n  }\n  \n  /**\n   * 删除快照\n   */\n  deleteSnapshot(snapshotId: string): boolean {\n    const deleted = this.snapshots.delete(snapshotId)\n    if (deleted) {\n      const index = this.history.indexOf(snapshotId)\n      if (index !== -1) {\n        this.history.splice(index, 1)\n        if (this.currentIndex >= index) {\n          this.currentIndex--\n        }\n      }\n      \n      if (this.config.persist) {\n        this.saveToStorage()\n      }\n    }\n    \n    return deleted\n  }\n  \n  /**\n   * 清空快照\n   */\n  clearSnapshots() {\n    this.snapshots.clear()\n    this.history = []\n    this.currentIndex = -1\n    \n    if (this.config.persist) {\n      this.clearStorage()\n    }\n  }\n  \n  /**\n   * 撤销\n   */\n  undo(): TemplateState | null {\n    if (this.currentIndex > 0) {\n      this.currentIndex--\n      const snapshotId = this.history[this.currentIndex]\n      return this.restoreSnapshot(snapshotId)\n    }\n    return null\n  }\n  \n  /**\n   * 重做\n   */\n  redo(): TemplateState | null {\n    if (this.currentIndex < this.history.length - 1) {\n      this.currentIndex++\n      const snapshotId = this.history[this.currentIndex]\n      return this.restoreSnapshot(snapshotId)\n    }\n    return null\n  }\n  \n  /**\n   * 是否可以撤销\n   */\n  canUndo(): boolean {\n    return this.currentIndex > 0\n  }\n  \n  /**\n   * 是否可以重做\n   */\n  canRedo(): boolean {\n    return this.currentIndex < this.history.length - 1\n  }\n  \n  /**\n   * 开始自动快照\n   */\n  private startAutoSnapshot() {\n    if (this.autoSnapshotTimer) {\n      this.stopAutoSnapshot()\n    }\n    \n    this.autoSnapshotTimer = setInterval(() => {\n      // 这里需要外部传入当前状态\n      // 通过事件或回调获取\n    }, this.config.autoSnapshotInterval!)\n  }\n  \n  /**\n   * 停止自动快照\n   */\n  private stopAutoSnapshot() {\n    if (this.autoSnapshotTimer) {\n      clearInterval(this.autoSnapshotTimer)\n      this.autoSnapshotTimer = null\n    }\n  }\n  \n  /**\n   * 生成ID\n   */\n  private generateId(): string {\n    return `snapshot-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n  \n  /**\n   * 克隆状态\n   */\n  private cloneState(state: TemplateState): TemplateState {\n    if (this.config.compress) {\n      // 实现压缩逻辑\n      return JSON.parse(JSON.stringify(state))\n    }\n    return JSON.parse(JSON.stringify(state))\n  }\n  \n  /**\n   * 保存到存储\n   */\n  private saveToStorage() {\n    if (!this.config.persist || !this.config.storageKey) return\n    \n    try {\n      const data = {\n        snapshots: Array.from(this.snapshots.entries()),\n        history: this.history,\n        currentIndex: this.currentIndex\n      }\n      \n      localStorage.setItem(this.config.storageKey, JSON.stringify(data))\n    } catch (error) {\n      console.error('Failed to save snapshots:', error)\n    }\n  }\n  \n  /**\n   * 从存储加载\n   */\n  private loadFromStorage() {\n    if (!this.config.persist || !this.config.storageKey) return\n    \n    try {\n      const stored = localStorage.getItem(this.config.storageKey)\n      if (stored) {\n        const data = JSON.parse(stored)\n        this.snapshots = new Map(data.snapshots)\n        this.history = data.history || []\n        this.currentIndex = data.currentIndex ?? -1\n      }\n    } catch (error) {\n      console.error('Failed to load snapshots:', error)\n    }\n  }\n  \n  /**\n   * 清空存储\n   */\n  private clearStorage() {\n    if (!this.config.persist || !this.config.storageKey) return\n    \n    try {\n      localStorage.removeItem(this.config.storageKey)\n    } catch (error) {\n      console.error('Failed to clear storage:', error)\n    }\n  }\n  \n  /**\n   * 销毁\n   */\n  destroy() {\n    this.stopAutoSnapshot()\n    this.clearSnapshots()\n  }\n}\n\n/**\n * 时间旅行控制器\n */\nexport class TimeTravelController {\n  private history: TemplateState[] = []\n  private currentIndex: number = -1\n  private config: TimeTravelConfig\n  private observers: MutationObserver[] = []\n  \n  constructor(config: TimeTravelConfig = {}) {\n    this.config = {\n      enabled: true,\n      maxHistory: 100,\n      recordDOM: false,\n      ignoreProperties: [],\n      diffAlgorithm: 'deep',\n      ...config\n    }\n  }\n  \n  /**\n   * 记录状态\n   */\n  record(state: TemplateState) {\n    if (!this.config.enabled) return\n    \n    // 如果不是在最新状态，删除后面的历史\n    if (this.currentIndex < this.history.length - 1) {\n      this.history = this.history.slice(0, this.currentIndex + 1)\n    }\n    \n    // 添加新状态\n    this.history.push(this.cloneState(state))\n    this.currentIndex++\n    \n    // 限制历史记录数量\n    if (this.config.maxHistory && this.history.length > this.config.maxHistory) {\n      this.history.shift()\n      this.currentIndex--\n    }\n  }\n  \n  /**\n   * 后退\n   */\n  backward(): TemplateState | null {\n    if (this.currentIndex > 0) {\n      this.currentIndex--\n      return this.cloneState(this.history[this.currentIndex])\n    }\n    return null\n  }\n  \n  /**\n   * 前进\n   */\n  forward(): TemplateState | null {\n    if (this.currentIndex < this.history.length - 1) {\n      this.currentIndex++\n      return this.cloneState(this.history[this.currentIndex])\n    }\n    return null\n  }\n  \n  /**\n   * 跳转到指定位置\n   */\n  goto(index: number): TemplateState | null {\n    if (index >= 0 && index < this.history.length) {\n      this.currentIndex = index\n      return this.cloneState(this.history[this.currentIndex])\n    }\n    return null\n  }\n  \n  /**\n   * 获取历史记录\n   */\n  getHistory(): TemplateState[] {\n    return this.history.map(state => this.cloneState(state))\n  }\n  \n  /**\n   * 获取当前索引\n   */\n  getCurrentIndex(): number {\n    return this.currentIndex\n  }\n  \n  /**\n   * 是否可以后退\n   */\n  canBackward(): boolean {\n    return this.currentIndex > 0\n  }\n  \n  /**\n   * 是否可以前进\n   */\n  canForward(): boolean {\n    return this.currentIndex < this.history.length - 1\n  }\n  \n  /**\n   * 清空历史\n   */\n  clear() {\n    this.history = []\n    this.currentIndex = -1\n  }\n  \n  /**\n   * 开始观察DOM变化\n   */\n  observeDOM(element: HTMLElement, callback?: (mutation: MutationRecord) => void) {\n    if (!this.config.recordDOM) return\n    \n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach(mutation => {\n        if (callback) {\n          callback(mutation)\n        }\n        \n        // 记录DOM快照\n        this.recordDOMSnapshot(element)\n      })\n    })\n    \n    observer.observe(element, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: true\n    })\n    \n    this.observers.push(observer)\n  }\n  \n  /**\n   * 停止观察\n   */\n  disconnect() {\n    this.observers.forEach(observer => observer.disconnect())\n    this.observers = []\n  }\n  \n  /**\n   * 记录DOM快照\n   */\nprivate recordDOMSnapshot(_element: HTMLElement) {\n    // const snapshot = element.innerHTML // Not used currently\n    // 可以将DOM快照添加到当前状态\n  }\n  \n  /**\n   * 克隆状态\n   */\n  private cloneState(state: TemplateState): TemplateState {\n    return JSON.parse(JSON.stringify(state))\n  }\n  \n  /**\n   * 计算差异\n   */\n  diff(prev: TemplateState, next: TemplateState): any {\n    if (this.config.customDiff) {\n      return this.config.customDiff(prev, next)\n    }\n    \n    switch (this.config.diffAlgorithm) {\n      case 'shallow':\n        return this.shallowDiff(prev, next)\n      case 'deep':\n      default:\n        return this.deepDiff(prev, next)\n    }\n  }\n  \n  /**\n   * 浅比较\n   */\n  private shallowDiff(prev: any, next: any): any {\n    const diff: any = {}\n    \n    // 优化：使用 Object.keys() 代替 for...in，性能更好\n    const prevKeys = Object.keys(prev)\n    const nextKeys = Object.keys(next)\n    \n    // 检查删除的属性\n    for (let i = 0; i < prevKeys.length; i++) {\n      const key = prevKeys[i]\n      if (!(key in next)) {\n        diff[key] = { type: 'deleted', value: prev[key] }\n      }\n    }\n    \n    // 检查新增或修改的属性\n    for (let i = 0; i < nextKeys.length; i++) {\n      const key = nextKeys[i]\n      if (!(key in prev)) {\n        diff[key] = { type: 'added', value: next[key] }\n      } else if (prev[key] !== next[key]) {\n        diff[key] = { type: 'modified', prev: prev[key], next: next[key] }\n      }\n    }\n    \n    return diff\n  }\n  \n  /**\n   * 深比较\n   */\n  private deepDiff(prev: any, next: any, path: string = ''): any {\n    const diff: any = {}\n    \n    if (this.isPrimitive(prev) || this.isPrimitive(next)) {\n      if (prev !== next) {\n        return { type: 'modified', prev, next }\n      }\n      return null\n    }\n    \n    // 递归比较对象属性\n    const allKeys = new Set([...Object.keys(prev || {}), ...Object.keys(next || {})])\n    \n    for (const key of allKeys) {\n      const currentPath = path ? `${path}.${key}` : key\n      \n      if (this.config.ignoreProperties?.includes(currentPath)) {\n        continue\n      }\n      \n      if (!(key in next)) {\n        diff[key] = { type: 'deleted', value: prev[key] }\n      } else if (!(key in prev)) {\n        diff[key] = { type: 'added', value: next[key] }\n      } else {\n        const childDiff = this.deepDiff(prev[key], next[key], currentPath)\n        if (childDiff) {\n          diff[key] = childDiff\n        }\n      }\n    }\n    \n    return Object.keys(diff).length > 0 ? diff : null\n  }\n  \n  /**\n   * 判断是否为原始类型\n   */\n  private isPrimitive(value: any): boolean {\n    return value === null || \n           value === undefined ||\n           typeof value === 'string' ||\n           typeof value === 'number' ||\n           typeof value === 'boolean'\n  }\n  \n  /**\n   * 销毁\n   */\n  destroy() {\n    this.disconnect()\n    this.clear()\n  }\n}\n\n// 导出单例\nexport const snapshotManager = new SnapshotManager()\nexport const timeTravelController = new TimeTravelController()"],"names":["SnapshotManager","constructor","config","snapshots","Map","history","currentIndex","autoSnapshotTimer","maxSnapshots","autoSnapshotInterval","compress","persist","storageKey","loadFromStorage","startAutoSnapshot","createSnapshot","state","options","beforeSnapshot","processed","snapshot","id","generateId","timestamp","Date","cloneState","set","push","length","removed","shift","delete","saveToStorage","afterSnapshot","restoreSnapshot","snapshotId","get","beforeRestore","shouldRestore","index","indexOf","afterRestore","getSnapshot","getAllSnapshots","map","filter","Boolean","deleteSnapshot","deleted","splice","clearSnapshots","clear","clearStorage","undo","redo","canUndo","canRedo","stopAutoSnapshot","setInterval","clearInterval","now","Math","random","toString","substr","JSON","parse","stringify","data","Array","from","entries","localStorage","setItem","error","console","stored","getItem","removeItem","destroy","TimeTravelController","observers","enabled","maxHistory","recordDOM","ignoreProperties","diffAlgorithm","record","slice","backward","forward","goto","getHistory","getCurrentIndex","canBackward","canForward","observeDOM","element","callback","observer","MutationObserver","mutations","forEach","mutation","recordDOMSnapshot","observe","attributes","childList","subtree","characterData","disconnect","_element","diff","prev","next","customDiff","shallowDiff","deepDiff","prevKeys","Object","keys","nextKeys","i","key","type","value","path","isPrimitive","allKeys","Set","currentPath","includes","childDiff","undefined","snapshotManager","timeTravelController"],"mappings":"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"}
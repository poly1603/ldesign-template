{"version":3,"file":"analyzer.js","sources":["../../src/core/analyzer.ts"],"sourcesContent":["/**\r\n * 模板分析工具\r\n */\r\n\r\nimport type { Template } from '../types'\r\nimport { reactive, ref } from 'vue'\r\n\r\n/**\r\n * 模板使用统计\r\n */\r\nexport interface TemplateUsageStats {\r\n  templateId: string\r\n  templateName: string\r\n  usageCount: number\r\n  lastUsed: number\r\n  firstUsed: number\r\n  averageRenderTime: number\r\n  errorCount: number\r\n  successRate: number\r\n  userPreference: number\r\n}\r\n\r\n/**\r\n * 模板依赖关系\r\n */\r\nexport interface TemplateDependency {\r\n  templateId: string\r\n  dependencies: string[]\r\n  dependents: string[]\r\n  depth: number\r\n  circular: boolean\r\n}\r\n\r\n/**\r\n * 性能报告\r\n */\r\nexport interface PerformanceReport {\r\n  timestamp: number\r\n  duration: number\r\n  templates: {\r\n    id: string\r\n    name: string\r\n    renderTime: number\r\n    updateTime: number\r\n    memoryUsage: number\r\n    domNodes: number\r\n    componentCount: number\r\n  }[]\r\n  summary: {\r\n    totalRenderTime: number\r\n    averageRenderTime: number\r\n    slowestTemplate: string\r\n    fastestTemplate: string\r\n    totalMemoryUsage: number\r\n    totalDomNodes: number\r\n  }\r\n}\r\n\r\n/**\r\n * 复杂度指标\r\n */\r\nexport interface ComplexityMetrics {\r\n  templateId: string\r\n  cyclomaticComplexity: number\r\n  cognitiveComplexity: number\r\n  nestingDepth: number\r\n  parameterCount: number\r\n  lineCount: number\r\n  maintainabilityIndex: number\r\n}\r\n\r\n/**\r\n * 模板统计分析器\r\n */\r\n// 公共工具函数\r\nconst createStatsEntry = (): TemplateUsageStats => ({\r\n  templateId: '',\r\n  templateName: '',\r\n  usageCount: 0,\r\n  lastUsed: 0,\r\n  firstUsed: 0,\r\n  averageRenderTime: 0,\r\n  errorCount: 0,\r\n  successRate: 100,\r\n  userPreference: 0\r\n})\r\n\r\nconst calculateAverage = (numbers: number[]): number => {\r\n  if (numbers.length === 0) return 0\r\n  const sum = numbers.reduce((a, b) => a + b, 0)\r\n  return sum / numbers.length\r\n}\r\n\r\nconst limitArraySize = <T>(arr: T[], maxSize: number): T[] => {\r\n  while (arr.length > maxSize) {\r\n    arr.shift()\r\n  }\r\n  return arr\r\n}\r\n\r\nexport class TemplateStatisticsAnalyzer {\r\n  private usageStats: Map<string, TemplateUsageStats> = new Map()\r\n  private performanceData: Map<string, number[]> = new Map()\r\n  private errorLogs: Map<string, any[]> = new Map()\r\n  private readonly MAX_PERFORMANCE_ENTRIES = 1000\r\n  private readonly MAX_ERROR_LOGS = 100\r\n  private readonly MAX_STATS_ENTRIES = 500\r\n  private cleanupTimer: ReturnType<typeof setTimeout> | null = null\r\n  \r\n  /**\r\n   * 记录模板使用\r\n   */\r\n  recordUsage(templateId: string, templateName: string) {\r\n    const now = Date.now()\r\n    let stats = this.usageStats.get(templateId)\r\n    \r\n    if (!stats) {\r\n      stats = createStatsEntry()\r\n      stats.templateId = templateId\r\n      stats.templateName = templateName\r\n      stats.firstUsed = now\r\n      this.usageStats.set(templateId, stats)\r\n    }\r\n    \r\n    stats.usageCount++\r\n    stats.lastUsed = now\r\n    \r\n    // 触发定期清理\r\n    this.scheduleCleanup()\r\n  }\r\n  \r\n  /**\r\n   * 记录渲染时间\r\n   */\r\n  recordRenderTime(templateId: string, time: number) {\r\n    let times = this.performanceData.get(templateId)\r\n    if (!times) {\r\n      times = []\r\n      this.performanceData.set(templateId, times)\r\n    }\r\n    \r\n    times.push(time)\r\n    limitArraySize(times, this.MAX_PERFORMANCE_ENTRIES)\r\n    \r\n    // 更新平均渲染时间\r\n    const stats = this.usageStats.get(templateId)\r\n    if (stats) {\r\n      stats.averageRenderTime = calculateAverage(times)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 记录错误\r\n   */\r\n  recordError(templateId: string, error: any) {\r\n    if (!this.errorLogs.has(templateId)) {\r\n      this.errorLogs.set(templateId, [])\r\n    }\r\n    \r\n    const errors = this.errorLogs.get(templateId)!\r\n    errors.push({\r\n      timestamp: Date.now(),\r\n      error: error.message || String(error),\r\n      stack: error.stack\r\n    })\r\n    \r\n    // 限制错误日志大小\r\n    limitArraySize(errors, this.MAX_ERROR_LOGS)\r\n    \r\n    // 更新错误统计\r\n    const stats = this.usageStats.get(templateId)\r\n    if (stats) {\r\n      stats.errorCount++\r\n      stats.successRate = ((stats.usageCount - stats.errorCount) / stats.usageCount) * 100\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取使用统计\r\n   */\r\n  getUsageStats(templateId?: string): TemplateUsageStats[] | TemplateUsageStats | undefined {\r\n    if (templateId) {\r\n      return this.usageStats.get(templateId)\r\n    }\r\n    \r\n    return Array.from(this.usageStats.values())\r\n  }\r\n  \r\n  /**\r\n   * 获取热门模板\r\n   */\r\n  getPopularTemplates(limit: number = 10): TemplateUsageStats[] {\r\n    return Array.from(this.usageStats.values())\r\n      .sort((a, b) => b.usageCount - a.usageCount)\r\n      .slice(0, limit)\r\n  }\r\n  \r\n  /**\r\n   * 获取性能差的模板\r\n   */\r\n  getSlowTemplates(limit: number = 10): TemplateUsageStats[] {\r\n    return Array.from(this.usageStats.values())\r\n      .filter(s => s.averageRenderTime > 0)\r\n      .sort((a, b) => b.averageRenderTime - a.averageRenderTime)\r\n      .slice(0, limit)\r\n  }\r\n  \r\n  /**\r\n   * 获取错误率高的模板\r\n   */\r\n  getErrorProneTemplates(limit: number = 10): TemplateUsageStats[] {\r\n    return Array.from(this.usageStats.values())\r\n      .filter(s => s.errorCount > 0)\r\n      .sort((a, b) => b.errorCount - a.errorCount)\r\n      .slice(0, limit)\r\n  }\r\n  \r\n  /**\r\n   * 生成使用报告\r\n   */\r\n  generateUsageReport(): any {\r\n    const templates = Array.from(this.usageStats.values())\r\n    const totalUsage = templates.reduce((sum, t) => sum + t.usageCount, 0)\r\n    const totalErrors = templates.reduce((sum, t) => sum + t.errorCount, 0)\r\n    const avgRenderTime = templates.reduce((sum, t) => sum + t.averageRenderTime, 0) / templates.length\r\n    \r\n    return {\r\n      timestamp: Date.now(),\r\n      totalTemplates: templates.length,\r\n      totalUsage,\r\n      totalErrors,\r\n      overallSuccessRate: ((totalUsage - totalErrors) / totalUsage) * 100,\r\n      averageRenderTime: avgRenderTime,\r\n      popularTemplates: this.getPopularTemplates(5),\r\n      slowTemplates: this.getSlowTemplates(5),\r\n      errorProneTemplates: this.getErrorProneTemplates(5)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 清空统计数据\r\n   */\r\n  clearStats(templateId?: string) {\r\n    if (templateId) {\r\n      this.usageStats.delete(templateId)\r\n      this.performanceData.delete(templateId)\r\n      this.errorLogs.delete(templateId)\r\n    } else {\r\n      this.usageStats.clear()\r\n      this.performanceData.clear()\r\n      this.errorLogs.clear()\r\n    }\r\n    \r\n    if (this.cleanupTimer) {\r\n      clearTimeout(this.cleanupTimer)\r\n      this.cleanupTimer = null\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 定期清理调度\r\n   */\r\n  private scheduleCleanup(): void {\r\n    if (this.cleanupTimer) return\r\n    \r\n    this.cleanupTimer = setTimeout(() => {\r\n      // 清理过旧的统计数据\r\n      if (this.usageStats.size > this.MAX_STATS_ENTRIES) {\r\n        const sortedStats = Array.from(this.usageStats.entries())\r\n          .sort((a, b) => b[1].lastUsed - a[1].lastUsed)\r\n        \r\n        // 保留最近使用的\r\n        const toKeep = sortedStats.slice(0, this.MAX_STATS_ENTRIES)\r\n        this.usageStats.clear()\r\n        toKeep.forEach(([id, stats]) => this.usageStats.set(id, stats))\r\n      }\r\n      \r\n      this.cleanupTimer = null\r\n    }, 60000) // 60秒后执行\r\n  }\r\n}\r\n\r\n/**\r\n * 模板依赖分析器\r\n */\r\nexport class TemplateDependencyAnalyzer {\r\n  private dependencies: Map<string, Set<string>> = new Map()\r\n  private dependents: Map<string, Set<string>> = new Map()\r\n  private readonly MAX_DEPENDENCIES = 1000\r\n  private cleanupTimer: ReturnType<typeof setTimeout> | null = null\r\n  \r\n  /**\r\n   * 添加依赖关系\r\n   */\r\n  addDependency(templateId: string, dependsOn: string) {\r\n    // 添加依赖\r\n    if (!this.dependencies.has(templateId)) {\r\n      this.dependencies.set(templateId, new Set())\r\n    }\r\n    this.dependencies.get(templateId)!.add(dependsOn)\r\n    \r\n    // 添加被依赖\r\n    if (!this.dependents.has(dependsOn)) {\r\n      this.dependents.set(dependsOn, new Set())\r\n    }\r\n    this.dependents.get(dependsOn)!.add(templateId)\r\n    \r\n    // 触发定期清理\r\n    this.scheduleCleanup()\r\n  }\r\n  \r\n  /**\r\n   * 移除依赖关系\r\n   */\r\n  removeDependency(templateId: string, dependsOn: string) {\r\n    const deps = this.dependencies.get(templateId)\r\n    if (deps) {\r\n      deps.delete(dependsOn)\r\n      if (deps.size === 0) {\r\n        this.dependencies.delete(templateId)\r\n      }\r\n    }\r\n    \r\n    const depts = this.dependents.get(dependsOn)\r\n    if (depts) {\r\n      depts.delete(templateId)\r\n      if (depts.size === 0) {\r\n        this.dependents.delete(dependsOn)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取模板依赖\r\n   */\r\n  getDependencies(templateId: string): string[] {\r\n    const deps = this.dependencies.get(templateId)\r\n    return deps ? Array.from(deps) : []\r\n  }\r\n  \r\n  /**\r\n   * 获取依赖此模板的模板\r\n   */\r\n  getDependents(templateId: string): string[] {\r\n    const depts = this.dependents.get(templateId)\r\n    return depts ? Array.from(depts) : []\r\n  }\r\n  \r\n  /**\r\n   * 检测循环依赖\r\n   */\r\n  detectCircularDependencies(templateId: string): boolean {\r\n    const visited = new Set<string>()\r\n    const stack = new Set<string>()\r\n    \r\n    const hasCircular = (id: string): boolean => {\r\n      if (stack.has(id)) return true\r\n      if (visited.has(id)) return false\r\n      \r\n      visited.add(id)\r\n      stack.add(id)\r\n      \r\n      const deps = this.dependencies.get(id)\r\n      if (deps) {\r\n        for (const dep of deps) {\r\n          if (hasCircular(dep)) return true\r\n        }\r\n      }\r\n      \r\n      stack.delete(id)\r\n      return false\r\n    }\r\n    \r\n    return hasCircular(templateId)\r\n  }\r\n  \r\n  /**\r\n   * 计算依赖深度\r\n   */\r\n  calculateDepth(templateId: string): number {\r\n    const visited = new Set<string>()\r\n    \r\n    const getDepth = (id: string): number => {\r\n      if (visited.has(id)) return 0\r\n      visited.add(id)\r\n      \r\n      const deps = this.dependencies.get(id)\r\n      if (!deps || deps.size === 0) return 0\r\n      \r\n      let maxDepth = 0\r\n      for (const dep of deps) {\r\n        maxDepth = Math.max(maxDepth, getDepth(dep))\r\n      }\r\n      \r\n      return maxDepth + 1\r\n    }\r\n    \r\n    return getDepth(templateId)\r\n  }\r\n  \r\n  /**\r\n   * 生成依赖图\r\n   */\r\n  generateDependencyGraph(): Map<string, TemplateDependency> {\r\n    const graph = new Map<string, TemplateDependency>()\r\n    \r\n    // 获取所有模板ID\r\n    const allTemplates = new Set([\r\n      ...this.dependencies.keys(),\r\n      ...this.dependents.keys()\r\n    ])\r\n    \r\n    for (const templateId of allTemplates) {\r\n      graph.set(templateId, {\r\n        templateId,\r\n        dependencies: this.getDependencies(templateId),\r\n        dependents: this.getDependents(templateId),\r\n        depth: this.calculateDepth(templateId),\r\n        circular: this.detectCircularDependencies(templateId)\r\n      })\r\n    }\r\n    \r\n    return graph\r\n  }\r\n  \r\n  /**\r\n   * 获取依赖链\r\n   */\r\n  getDependencyChain(templateId: string): string[] {\r\n    const chain: string[] = []\r\n    const visited = new Set<string>()\r\n    \r\n    const buildChain = (id: string) => {\r\n      if (visited.has(id)) return\r\n      \r\n      visited.add(id)\r\n      chain.push(id)\r\n      \r\n      const deps = this.dependencies.get(id)\r\n      if (deps) {\r\n        for (const dep of deps) {\r\n          buildChain(dep)\r\n        }\r\n      }\r\n    }\r\n    \r\n    buildChain(templateId)\r\n    return chain\r\n  }\r\n  \r\n  /**\r\n   * 清空依赖数据\r\n   */\r\n  clearDependencies(templateId?: string) {\r\n    if (templateId) {\r\n      // 清理特定模板的依赖\r\n      this.dependencies.delete(templateId)\r\n      // 从被依赖中移除\r\n      this.dependents.forEach((depts) => depts.delete(templateId))\r\n      // 清理空的被依赖集合\r\n      Array.from(this.dependents.entries()).forEach(([id, depts]) => {\r\n        if (depts.size === 0) this.dependents.delete(id)\r\n      })\r\n    } else {\r\n      this.dependencies.clear()\r\n      this.dependents.clear()\r\n    }\r\n    \r\n    if (this.cleanupTimer) {\r\n      clearTimeout(this.cleanupTimer)\r\n      this.cleanupTimer = null\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 定期清理旧依赖\r\n   */\r\n  private scheduleCleanup(): void {\r\n    if (this.cleanupTimer) return\r\n    \r\n    this.cleanupTimer = setTimeout(() => {\r\n      // 限制依赖图大小\r\n      if (this.dependencies.size > this.MAX_DEPENDENCIES) {\r\n        const entries = Array.from(this.dependencies.entries())\r\n        const toRemove = entries.slice(this.MAX_DEPENDENCIES)\r\n        \r\n        toRemove.forEach(([id]) => {\r\n          this.clearDependencies(id)\r\n        })\r\n      }\r\n      \r\n      this.cleanupTimer = null\r\n    }, 90000) // 90秒后执行\r\n  }\r\n}\r\n\r\n/**\r\n * 模板性能分析器\r\n */\r\nexport class TemplatePerformanceAnalyzer {\r\n  private performanceReports: PerformanceReport[] = reactive([])\r\n  private metricsCollector: Map<string, any[]> = new Map()\r\n  private recording = ref(false)\r\n  private startTime: number = 0\r\n  private readonly MAX_REPORTS = 50\r\n  private readonly MAX_METRICS_PER_TEMPLATE = 100\r\n  \r\n  /**\r\n   * 开始记录\r\n   */\r\n  startRecording() {\r\n    this.recording.value = true\r\n    this.startTime = performance.now()\r\n    this.metricsCollector.clear()\r\n  }\r\n  \r\n  /**\r\n   * 停止记录\r\n   */\r\n  stopRecording(): PerformanceReport {\r\n    this.recording.value = false\r\n    const duration = performance.now() - this.startTime\r\n    \r\n    const templates = Array.from(this.metricsCollector.entries()).map(([id, metrics]) => {\r\n      const latestMetric = metrics[metrics.length - 1]\r\n      return {\r\n        id,\r\n        name: latestMetric.name || id,\r\n        renderTime: latestMetric.renderTime || 0,\r\n        updateTime: latestMetric.updateTime || 0,\r\n        memoryUsage: latestMetric.memoryUsage || 0,\r\n        domNodes: latestMetric.domNodes || 0,\r\n        componentCount: latestMetric.componentCount || 0\r\n      }\r\n    })\r\n    \r\n    const report: PerformanceReport = {\r\n      timestamp: Date.now(),\r\n      duration,\r\n      templates,\r\n      summary: {\r\n        totalRenderTime: templates.reduce((sum, t) => sum + t.renderTime, 0),\r\n        averageRenderTime: templates.length > 0 \r\n          ? templates.reduce((sum, t) => sum + t.renderTime, 0) / templates.length \r\n          : 0,\r\n        slowestTemplate: templates.length > 0\r\n          ? templates.reduce((slowest, t) => \r\n              t.renderTime > (slowest?.renderTime || 0) ? t : slowest, templates[0]).id\r\n          : '',\r\n        fastestTemplate: templates.length > 0\r\n          ? templates.reduce((fastest, t) => \r\n              t.renderTime < (fastest?.renderTime || Infinity) ? t : fastest, templates[0]).id\r\n          : '',\r\n        totalMemoryUsage: templates.reduce((sum, t) => sum + t.memoryUsage, 0),\r\n        totalDomNodes: templates.reduce((sum, t) => sum + t.domNodes, 0)\r\n      }\r\n    }\r\n    \r\n    this.performanceReports.push(report)\r\n    \r\n    // 限制报告数量\r\n    if (this.performanceReports.length > this.MAX_REPORTS) {\r\n      this.performanceReports.splice(0, this.performanceReports.length - this.MAX_REPORTS)\r\n    }\r\n    \r\n    return report\r\n  }\r\n  \r\n  /**\r\n   * 收集指标\r\n   */\r\n  collectMetrics(templateId: string, metrics: any) {\r\n    if (!this.metricsCollector.has(templateId)) {\r\n      this.metricsCollector.set(templateId, [])\r\n    }\r\n    const templateMetrics = this.metricsCollector.get(templateId)!\r\n    templateMetrics.push({\r\n      timestamp: Date.now(),\r\n      ...metrics\r\n    })\r\n    \r\n    // 限制每个模板的指标数量\r\n    if (templateMetrics.length > this.MAX_METRICS_PER_TEMPLATE) {\r\n      templateMetrics.splice(0, templateMetrics.length - this.MAX_METRICS_PER_TEMPLATE)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取性能报告\r\n   */\r\n  getReports(filter?: {\r\n    startTime?: number\r\n    endTime?: number\r\n    templateId?: string\r\n  }): PerformanceReport[] {\r\n    let reports = [...this.performanceReports]\r\n    \r\n    if (filter) {\r\n      if (filter.startTime) {\r\n        reports = reports.filter(r => r.timestamp >= filter.startTime!)\r\n      }\r\n      if (filter.endTime) {\r\n        reports = reports.filter(r => r.timestamp <= filter.endTime!)\r\n      }\r\n      if (filter.templateId) {\r\n        reports = reports.map(r => ({\r\n          ...r,\r\n          templates: r.templates.filter(t => t.id === filter.templateId)\r\n        }))\r\n      }\r\n    }\r\n    \r\n    return reports\r\n  }\r\n  \r\n  /**\r\n   * 分析性能趋势\r\n   */\r\n  analyzeTrends(templateId: string, metricType: 'renderTime' | 'memoryUsage' | 'domNodes'): {\r\n    trend: 'improving' | 'degrading' | 'stable'\r\n    percentage: number\r\n    data: number[]\r\n  } {\r\n    const data: number[] = []\r\n    \r\n    for (const report of this.performanceReports) {\r\n      const template = report.templates.find(t => t.id === templateId)\r\n      if (template) {\r\n        data.push(template[metricType])\r\n      }\r\n    }\r\n    \r\n    if (data.length < 2) {\r\n      return { trend: 'stable', percentage: 0, data }\r\n    }\r\n    \r\n    // 计算趋势\r\n    const recentAvg = data.slice(-5).reduce((a, b) => a + b, 0) / Math.min(5, data.slice(-5).length)\r\n    const previousAvg = data.slice(-10, -5).reduce((a, b) => a + b, 0) / Math.min(5, data.slice(-10, -5).length)\r\n    \r\n    const change = ((recentAvg - previousAvg) / previousAvg) * 100\r\n    \r\n    let trend: 'improving' | 'degrading' | 'stable'\r\n    if (change < -5) {\r\n      trend = 'improving'\r\n    } else if (change > 5) {\r\n      trend = 'degrading'\r\n    } else {\r\n      trend = 'stable'\r\n    }\r\n    \r\n    return { trend, percentage: Math.abs(change), data }\r\n  }\r\n  \r\n  /**\r\n   * 生成性能建议\r\n   */\r\n  generateRecommendations(report: PerformanceReport): string[] {\r\n    const recommendations: string[] = []\r\n    \r\n    // 渲染时间建议\r\n    const slowTemplates = report.templates.filter(t => t.renderTime > 100)\r\n    if (slowTemplates.length > 0) {\r\n      recommendations.push(\r\n        `优化慢速模板: ${slowTemplates.map(t => t.name).join(', ')} 的渲染时间超过100ms`\r\n      )\r\n    }\r\n    \r\n    // 内存使用建议\r\n    const highMemoryTemplates = report.templates.filter(t => t.memoryUsage > 10 * 1024 * 1024)\r\n    if (highMemoryTemplates.length > 0) {\r\n      recommendations.push(\r\n        `降低内存使用: ${highMemoryTemplates.map(t => t.name).join(', ')} 的内存使用超过10MB`\r\n      )\r\n    }\r\n    \r\n    // DOM节点建议\r\n    const highDomTemplates = report.templates.filter(t => t.domNodes > 1000)\r\n    if (highDomTemplates.length > 0) {\r\n      recommendations.push(\r\n        `减少DOM节点: ${highDomTemplates.map(t => t.name).join(', ')} 的DOM节点数超过1000`\r\n      )\r\n    }\r\n    \r\n    // 组件数量建议\r\n    const highComponentTemplates = report.templates.filter(t => t.componentCount > 50)\r\n    if (highComponentTemplates.length > 0) {\r\n      recommendations.push(\r\n        `优化组件结构: ${highComponentTemplates.map(t => t.name).join(', ')} 的组件数超过50`\r\n      )\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n}\r\n\r\n/**\r\n * 模板复杂度分析器\r\n */\r\nexport class TemplateComplexityAnalyzer {\r\n  /**\r\n   * 计算圈复杂度\r\n   */\r\n  calculateCyclomaticComplexity(template: Template): number {\r\n    // 简化的圈复杂度计算\r\n    let complexity = 1\r\n    \r\n    const code = template.component?.toString() || ''\r\n    \r\n    // 统计条件语句\r\n    complexity += (code.match(/if\\s*\\(/g) || []).length\r\n    complexity += (code.match(/else\\s+if\\s*\\(/g) || []).length\r\n    complexity += (code.match(/\\?[^:]+:/g) || []).length\r\n    complexity += (code.match(/case\\s+/g) || []).length\r\n    complexity += (code.match(/for\\s*\\(/g) || []).length\r\n    complexity += (code.match(/while\\s*\\(/g) || []).length\r\n    complexity += (code.match(/catch\\s*\\(/g) || []).length\r\n    \r\n    return complexity\r\n  }\r\n  \r\n  /**\r\n   * 计算认知复杂度\r\n   */\r\n  calculateCognitiveComplexity(template: Template): number {\r\n    // 简化的认知复杂度计算\r\n    let complexity = 0\r\n    const code = template.component?.toString() || ''\r\n    \r\n    // 嵌套深度影响\r\n    let nestingLevel = 0\r\n    const lines = code.split('\\n')\r\n    \r\n    for (const line of lines) {\r\n      if (line.includes('{')) nestingLevel++\r\n      if (line.includes('}')) nestingLevel--\r\n      \r\n      if (line.match(/if\\s*\\(/) || line.match(/for\\s*\\(/) || line.match(/while\\s*\\(/)) {\r\n        complexity += 1 + nestingLevel\r\n      }\r\n    }\r\n    \r\n    return complexity\r\n  }\r\n  \r\n  /**\r\n   * 计算嵌套深度\r\n   */\r\n  calculateNestingDepth(template: Template): number {\r\n    const code = template.component?.toString() || ''\r\n    let maxDepth = 0\r\n    let currentDepth = 0\r\n    \r\n    for (const char of code) {\r\n      if (char === '{') {\r\n        currentDepth++\r\n        maxDepth = Math.max(maxDepth, currentDepth)\r\n      } else if (char === '}') {\r\n        currentDepth--\r\n      }\r\n    }\r\n    \r\n    return maxDepth\r\n  }\r\n  \r\n  /**\r\n   * 计算参数数量\r\n   */\r\n  calculateParameterCount(template: Template): number {\r\n    return Object.keys(template.config || {}).length\r\n  }\r\n  \r\n  /**\r\n   * 计算代码行数\r\n   */\r\n  calculateLineCount(template: Template): number {\r\n    const code = template.component?.toString() || ''\r\n    return code.split('\\n').length\r\n  }\r\n  \r\n  /**\r\n   * 计算可维护性指数\r\n   */\r\n  calculateMaintainabilityIndex(metrics: ComplexityMetrics): number {\r\n    // 简化的可维护性指数计算\r\n    const { cyclomaticComplexity, lineCount } = metrics\r\n    \r\n    // Microsoft可维护性指数公式的简化版本\r\n    const volume = lineCount * Math.log2(lineCount + 1)\r\n    const index = Math.max(0, \r\n      (171 - 5.2 * Math.log(volume) - 0.23 * cyclomaticComplexity) * 100 / 171\r\n    )\r\n    \r\n    return Math.round(index)\r\n  }\r\n  \r\n  /**\r\n   * 分析模板复杂度\r\n   */\r\n  analyzeTemplate(template: Template): ComplexityMetrics {\r\n    const metrics: ComplexityMetrics = {\r\n      templateId: template.id,\r\n      cyclomaticComplexity: this.calculateCyclomaticComplexity(template),\r\n      cognitiveComplexity: this.calculateCognitiveComplexity(template),\r\n      nestingDepth: this.calculateNestingDepth(template),\r\n      parameterCount: this.calculateParameterCount(template),\r\n      lineCount: this.calculateLineCount(template),\r\n      maintainabilityIndex: 0\r\n    }\r\n    \r\n    metrics.maintainabilityIndex = this.calculateMaintainabilityIndex(metrics)\r\n    \r\n    return metrics\r\n  }\r\n  \r\n  /**\r\n   * 生成复杂度报告\r\n   */\r\n  generateComplexityReport(templates: Template[]): any {\r\n    const metrics = templates.map(t => this.analyzeTemplate(t))\r\n    \r\n    return {\r\n      timestamp: Date.now(),\r\n      totalTemplates: templates.length,\r\n      metrics,\r\n      summary: {\r\n        averageCyclomaticComplexity: metrics.reduce((sum, m) => sum + m.cyclomaticComplexity, 0) / metrics.length,\r\n        averageCognitiveComplexity: metrics.reduce((sum, m) => sum + m.cognitiveComplexity, 0) / metrics.length,\r\n        averageMaintainabilityIndex: metrics.reduce((sum, m) => sum + m.maintainabilityIndex, 0) / metrics.length,\r\n        highComplexityTemplates: metrics.filter(m => m.cyclomaticComplexity > 10).map(m => m.templateId),\r\n        lowMaintainabilityTemplates: metrics.filter(m => m.maintainabilityIndex < 50).map(m => m.templateId)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 模板分析管理器\r\n */\r\nexport class TemplateAnalyzer {\r\n  private static instance: TemplateAnalyzer\r\n  private statisticsAnalyzer: TemplateStatisticsAnalyzer\r\n  private dependencyAnalyzer: TemplateDependencyAnalyzer\r\n  private performanceAnalyzer: TemplatePerformanceAnalyzer\r\n  private complexityAnalyzer: TemplateComplexityAnalyzer\r\n  \r\n  private constructor() {\r\n    this.statisticsAnalyzer = new TemplateStatisticsAnalyzer()\r\n    this.dependencyAnalyzer = new TemplateDependencyAnalyzer()\r\n    this.performanceAnalyzer = new TemplatePerformanceAnalyzer()\r\n    this.complexityAnalyzer = new TemplateComplexityAnalyzer()\r\n  }\r\n  \r\n  static getInstance(): TemplateAnalyzer {\r\n    if (!this.instance) {\r\n      this.instance = new TemplateAnalyzer()\r\n    }\r\n    return this.instance\r\n  }\r\n  \r\n  /**\r\n   * 获取统计分析器\r\n   */\r\n  getStatisticsAnalyzer(): TemplateStatisticsAnalyzer {\r\n    return this.statisticsAnalyzer\r\n  }\r\n  \r\n  /**\r\n   * 获取依赖分析器\r\n   */\r\n  getDependencyAnalyzer(): TemplateDependencyAnalyzer {\r\n    return this.dependencyAnalyzer\r\n  }\r\n  \r\n  /**\r\n   * 获取性能分析器\r\n   */\r\n  getPerformanceAnalyzer(): TemplatePerformanceAnalyzer {\r\n    return this.performanceAnalyzer\r\n  }\r\n  \r\n  /**\r\n   * 获取复杂度分析器\r\n   */\r\n  getComplexityAnalyzer(): TemplateComplexityAnalyzer {\r\n    return this.complexityAnalyzer\r\n  }\r\n  \r\n  /**\r\n   * 生成综合报告\r\n   */\r\n  generateComprehensiveReport(templates: Template[]): any {\r\n    return {\r\n      timestamp: Date.now(),\r\n      usage: this.statisticsAnalyzer.generateUsageReport(),\r\n      dependencies: Array.from(this.dependencyAnalyzer.generateDependencyGraph().values()),\r\n      performance: this.performanceAnalyzer.getReports(),\r\n      complexity: this.complexityAnalyzer.generateComplexityReport(templates)\r\n    }\r\n  }\r\n}\r\n\r\n// 导出单例\r\nexport const templateAnalyzer = TemplateAnalyzer.getInstance()"],"names":["createStatsEntry","templateId","templateName","usageCount","lastUsed","firstUsed","averageRenderTime","errorCount","successRate","userPreference","calculateAverage","numbers","length","sum","reduce","a","b","limitArraySize","arr","maxSize","shift","TemplateStatisticsAnalyzer","constructor","usageStats","Map","performanceData","errorLogs","MAX_PERFORMANCE_ENTRIES","MAX_ERROR_LOGS","MAX_STATS_ENTRIES","cleanupTimer","recordUsage","now","Date","stats","get","set","scheduleCleanup","recordRenderTime","time","times","push","recordError","error","has","errors","timestamp","message","String","stack","getUsageStats","Array","from","values","getPopularTemplates","limit","sort","slice","getSlowTemplates","filter","s","getErrorProneTemplates","generateUsageReport","templates","totalUsage","t","totalErrors","avgRenderTime","totalTemplates","overallSuccessRate","popularTemplates","slowTemplates","errorProneTemplates","clearStats","delete","clear","clearTimeout","setTimeout","size","sortedStats","entries","toKeep","forEach","id","TemplateDependencyAnalyzer","dependencies","dependents","MAX_DEPENDENCIES","addDependency","dependsOn","Set","add","removeDependency","deps","depts","getDependencies","getDependents","detectCircularDependencies","visited","hasCircular","dep","calculateDepth","getDepth","maxDepth","Math","max","generateDependencyGraph","graph","allTemplates","keys","depth","circular","getDependencyChain","chain","buildChain","clearDependencies","toRemove","TemplatePerformanceAnalyzer","performanceReports","reactive","metricsCollector","recording","ref","startTime","MAX_REPORTS","MAX_METRICS_PER_TEMPLATE","startRecording","value","performance","stopRecording","duration","map","metrics","latestMetric","name","renderTime","updateTime","memoryUsage","domNodes","componentCount","report","summary","totalRenderTime","slowestTemplate","slowest","fastestTemplate","fastest","Infinity","totalMemoryUsage","totalDomNodes","splice","collectMetrics","templateMetrics","getReports","reports","r","endTime","analyzeTrends","metricType","data","template","find","trend","percentage","recentAvg","min","previousAvg","change","abs","generateRecommendations","recommendations","join","highMemoryTemplates","highDomTemplates","highComponentTemplates","TemplateComplexityAnalyzer","calculateCyclomaticComplexity","complexity","code","component","toString","match","calculateCognitiveComplexity","nestingLevel","lines","split","line","includes","calculateNestingDepth","currentDepth","char","calculateParameterCount","Object","config","calculateLineCount","calculateMaintainabilityIndex","cyclomaticComplexity","lineCount","volume","log2","index","log","round","analyzeTemplate","cognitiveComplexity","nestingDepth","parameterCount","maintainabilityIndex","generateComplexityReport","averageCyclomaticComplexity","m","averageCognitiveComplexity","averageMaintainabilityIndex","highComplexityTemplates","lowMaintainabilityTemplates","TemplateAnalyzer","statisticsAnalyzer","dependencyAnalyzer","performanceAnalyzer","complexityAnalyzer","getInstance","instance","getStatisticsAnalyzer","getDependencyAnalyzer","getPerformanceAnalyzer","getComplexityAnalyzer","generateComprehensiveReport","usage","templateAnalyzer"],"mappings":";;;;;;;;;;;AA2EA,MAAMA,mBAAmBA,OAA2B;AAAA,EAClDC,UAAAA,EAAY,EAAA;AAAA,EACZC,YAAAA,EAAc,EAAA;AAAA,EACdC,UAAAA,EAAY,CAAA;AAAA,EACZC,QAAAA,EAAU,CAAA;AAAA,EACVC,SAAAA,EAAW,CAAA;AAAA,EACXC,iBAAAA,EAAmB,CAAA;AAAA,EACnBC,UAAAA,EAAY,CAAA;AAAA,EACZC,WAAAA,EAAa,GAAA;AAAA,EACbC,cAAAA,EAAgB;AACjB,CAAA,CAAA;AAED,MAAMC,mBAAoBC,CAAAA,OAAAA,KAA6B;AACrD,EAAA,IAAIA,OAAAA,CAAQC,MAAAA,KAAW,CAAA,EAAG,OAAO,CAAA;AACjC,EAAA,MAAMC,GAAAA,GAAMF,QAAQG,MAAAA,CAAO,CAACC,GAAGC,CAAAA,KAAMD,CAAAA,GAAIC,GAAG,CAAC,CAAA;AAC7C,EAAA,OAAOH,MAAMF,OAAAA,CAAQC,MAAAA;AACvB,CAAA;AAEA,MAAMK,cAAAA,GAAiBA,CAAIC,GAAAA,EAAUC,OAAAA,KAAwB;AAC3D,EAAA,OAAOD,GAAAA,CAAIN,SAASO,OAAAA,EAAS;AAC3BD,IAAAA,GAAAA,CAAIE,KAAAA,EAAK;AAAA,EACX;AACA,EAAA,OAAOF,GAAAA;AACT,CAAA;MAEaG,0BAAAA,CAA0B;AAAA,EAAvCC,WAAAA,GAAA;AACU,IAAA,IAAA,CAAAC,UAAAA,uBAAkDC,GAAAA,EAAG;AACrD,IAAA,IAAA,CAAAC,eAAAA,uBAA6CD,GAAAA,EAAG;AAChD,IAAA,IAAA,CAAAE,SAAAA,uBAAoCF,GAAAA,EAAG;AAC9B,IAAA,IAAA,CAAAG,uBAAAA,GAA0B,GAAA;AAC1B,IAAA,IAAA,CAAAC,cAAAA,GAAiB,GAAA;AACjB,IAAA,IAAA,CAAAC,iBAAAA,GAAoB,GAAA;AAC7B,IAAA,IAAA,CAAAC,YAAAA,GAAqD,IAAA;AAAA,EA6K/D;AAAA;AAAA;AAAA;AAAA,EAxKEC,WAAAA,CAAY9B,YAAoBC,YAAAA,EAAoB;AAClD,IAAA,MAAM8B,GAAAA,GAAMC,KAAKD,GAAAA;AACjB,IAAA,IAAIE,KAAAA,GAAQ,IAAA,CAAKX,UAAAA,CAAWY,GAAAA,CAAIlC,UAAU,CAAA;AAE1C,IAAA,IAAI,CAACiC,KAAAA,EAAO;AACVA,MAAAA,KAAAA,GAAQlC,gBAAAA,EAAgB;AACxBkC,MAAAA,KAAAA,CAAMjC,UAAAA,GAAaA,UAAAA;AACnBiC,MAAAA,KAAAA,CAAMhC,YAAAA,GAAeA,YAAAA;AACrBgC,MAAAA,KAAAA,CAAM7B,SAAAA,GAAY2B,GAAAA;AAClB,MAAA,IAAA,CAAKT,UAAAA,CAAWa,GAAAA,CAAInC,UAAAA,EAAYiC,KAAK,CAAA;AAAA,IACvC;AAEAA,IAAAA,KAAAA,CAAM/B,UAAAA,EAAAA;AACN+B,IAAAA,KAAAA,CAAM9B,QAAAA,GAAW4B,GAAAA;AAGjB,IAAA,IAAA,CAAKK,eAAAA,EAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKAC,gBAAAA,CAAiBrC,YAAoBsC,IAAAA,EAAY;AAC/C,IAAA,IAAIC,KAAAA,GAAQ,IAAA,CAAKf,eAAAA,CAAgBU,GAAAA,CAAIlC,UAAU,CAAA;AAC/C,IAAA,IAAI,CAACuC,KAAAA,EAAO;AACVA,MAAAA,KAAAA,GAAQ,EAAA;AACR,MAAA,IAAA,CAAKf,eAAAA,CAAgBW,GAAAA,CAAInC,UAAAA,EAAYuC,KAAK,CAAA;AAAA,IAC5C;AAEAA,IAAAA,KAAAA,CAAMC,KAAKF,IAAI,CAAA;AACftB,IAAAA,cAAAA,CAAeuB,KAAAA,EAAO,KAAKb,uBAAuB,CAAA;AAGlD,IAAA,MAAMO,KAAAA,GAAQ,IAAA,CAAKX,UAAAA,CAAWY,GAAAA,CAAIlC,UAAU,CAAA;AAC5C,IAAA,IAAIiC,KAAAA,EAAO;AACTA,MAAAA,KAAAA,CAAM5B,iBAAAA,GAAoBI,iBAAiB8B,KAAK,CAAA;AAAA,IAClD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKAE,WAAAA,CAAYzC,YAAoB0C,KAAAA,EAAU;AACxC,IAAA,IAAI,CAAC,IAAA,CAAKjB,SAAAA,CAAUkB,GAAAA,CAAI3C,UAAU,CAAA,EAAG;AACnC,MAAA,IAAA,CAAKyB,SAAAA,CAAUU,GAAAA,CAAInC,UAAAA,EAAY,EAAE,CAAA;AAAA,IACnC;AAEA,IAAA,MAAM4C,MAAAA,GAAS,IAAA,CAAKnB,SAAAA,CAAUS,GAAAA,CAAIlC,UAAU,CAAA;AAC5C4C,IAAAA,MAAAA,CAAOJ,IAAAA,CAAK;AAAA,MACVK,SAAAA,EAAWb,KAAKD,GAAAA,EAAG;AAAA,MACnBW,KAAAA,EAAOA,KAAAA,CAAMI,OAAAA,IAAWC,MAAAA,CAAOL,KAAK,CAAA;AAAA,MACpCM,OAAON,KAAAA,CAAMM;AAAAA,KACd,CAAA;AAGDhC,IAAAA,cAAAA,CAAe4B,MAAAA,EAAQ,KAAKjB,cAAc,CAAA;AAG1C,IAAA,MAAMM,KAAAA,GAAQ,IAAA,CAAKX,UAAAA,CAAWY,GAAAA,CAAIlC,UAAU,CAAA;AAC5C,IAAA,IAAIiC,KAAAA,EAAO;AACTA,MAAAA,KAAAA,CAAM3B,UAAAA,EAAAA;AACN2B,MAAAA,KAAAA,CAAM1B,eAAgB0B,KAAAA,CAAM/B,UAAAA,GAAa+B,KAAAA,CAAM3B,UAAAA,IAAc2B,MAAM/B,UAAAA,GAAc,GAAA;AAAA,IACnF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA+C,cAAcjD,UAAAA,EAAmB;AAC/B,IAAA,IAAIA,UAAAA,EAAY;AACd,MAAA,OAAO,IAAA,CAAKsB,UAAAA,CAAWY,GAAAA,CAAIlC,UAAU,CAAA;AAAA,IACvC;AAEA,IAAA,OAAOkD,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAK7B,UAAAA,CAAW8B,QAAQ,CAAA;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKAC,mBAAAA,CAAoBC,QAAgB,EAAA,EAAE;AACpC,IAAA,OAAOJ,MAAMC,IAAAA,CAAK,IAAA,CAAK7B,WAAW8B,MAAAA,EAAQ,EACvCG,IAAAA,CAAK,CAACzC,CAAAA,EAAGC,CAAAA,KAAMA,EAAEb,UAAAA,GAAaY,CAAAA,CAAEZ,UAAU,CAAA,CAC1CsD,KAAAA,CAAM,GAAGF,KAAK,CAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKAG,gBAAAA,CAAiBH,QAAgB,EAAA,EAAE;AACjC,IAAA,OAAOJ,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAK7B,UAAAA,CAAW8B,MAAAA,EAAQ,CAAA,CACvCM,MAAAA,CAAOC,CAAAA,CAAAA,KAAKA,CAAAA,CAAEtD,iBAAAA,GAAoB,CAAC,EACnCkD,IAAAA,CAAK,CAACzC,CAAAA,EAAGC,CAAAA,KAAMA,CAAAA,CAAEV,iBAAAA,GAAoBS,EAAET,iBAAiB,CAAA,CACxDmD,KAAAA,CAAM,CAAA,EAAGF,KAAK,CAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKAM,sBAAAA,CAAuBN,QAAgB,EAAA,EAAE;AACvC,IAAA,OAAOJ,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAK7B,UAAAA,CAAW8B,MAAAA,EAAQ,CAAA,CACvCM,MAAAA,CAAOC,CAAAA,CAAAA,KAAKA,CAAAA,CAAErD,UAAAA,GAAa,CAAC,EAC5BiD,IAAAA,CAAK,CAACzC,CAAAA,EAAGC,CAAAA,KAAMA,CAAAA,CAAET,UAAAA,GAAaQ,EAAER,UAAU,CAAA,CAC1CkD,KAAAA,CAAM,CAAA,EAAGF,KAAK,CAAA;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKAO,mBAAAA,GAAmB;AACjB,IAAA,MAAMC,YAAYZ,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAK7B,UAAAA,CAAW8B,QAAQ,CAAA;AACrD,IAAA,MAAMW,UAAAA,GAAaD,UAAUjD,MAAAA,CAAO,CAACD,KAAKoD,CAAAA,KAAMpD,GAAAA,GAAMoD,CAAAA,CAAE9D,UAAAA,EAAY,CAAC,CAAA;AACrE,IAAA,MAAM+D,WAAAA,GAAcH,UAAUjD,MAAAA,CAAO,CAACD,KAAKoD,CAAAA,KAAMpD,GAAAA,GAAMoD,CAAAA,CAAE1D,UAAAA,EAAY,CAAC,CAAA;AACtE,IAAA,MAAM4D,aAAAA,GAAgBJ,SAAAA,CAAUjD,MAAAA,CAAO,CAACD,GAAAA,EAAKoD,CAAAA,KAAMpD,GAAAA,GAAMoD,CAAAA,CAAE3D,iBAAAA,EAAmB,CAAC,CAAA,GAAIyD,SAAAA,CAAUnD,MAAAA;AAE7F,IAAA,OAAO;AAAA,MACLkC,SAAAA,EAAWb,KAAKD,GAAAA,EAAG;AAAA,MACnBoC,gBAAgBL,SAAAA,CAAUnD,MAAAA;AAAAA,MAC1BoD,UAAAA;AAAAA,MACAE,WAAAA;AAAAA,MACAG,kBAAAA,EAAAA,CAAsBL,UAAAA,GAAaE,WAAAA,IAAeF,UAAAA,GAAc,GAAA;AAAA,MAChE1D,iBAAAA,EAAmB6D,aAAAA;AAAAA,MACnBG,gBAAAA,EAAkB,IAAA,CAAKhB,mBAAAA,CAAoB,CAAC,CAAA;AAAA,MAC5CiB,aAAAA,EAAe,IAAA,CAAKb,gBAAAA,CAAiB,CAAC,CAAA;AAAA,MACtCc,mBAAAA,EAAqB,IAAA,CAAKX,sBAAAA,CAAuB,CAAC;AAAA;EAEtD;AAAA;AAAA;AAAA;AAAA,EAKAY,WAAWxE,UAAAA,EAAmB;AAC5B,IAAA,IAAIA,UAAAA,EAAY;AACd,MAAA,IAAA,CAAKsB,UAAAA,CAAWmD,OAAOzE,UAAU,CAAA;AACjC,MAAA,IAAA,CAAKwB,eAAAA,CAAgBiD,OAAOzE,UAAU,CAAA;AACtC,MAAA,IAAA,CAAKyB,SAAAA,CAAUgD,OAAOzE,UAAU,CAAA;AAAA,IAClC,CAAA,MAAO;AACL,MAAA,IAAA,CAAKsB,WAAWoD,KAAAA;AAChB,MAAA,IAAA,CAAKlD,gBAAgBkD,KAAAA;AACrB,MAAA,IAAA,CAAKjD,UAAUiD,KAAAA;IACjB;AAEA,IAAA,IAAI,KAAK7C,YAAAA,EAAc;AACrB8C,MAAAA,YAAAA,CAAa,KAAK9C,YAAY,CAAA;AAC9B,MAAA,IAAA,CAAKA,YAAAA,GAAe,IAAA;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQO,eAAAA,GAAe;AACrB,IAAA,IAAI,KAAKP,YAAAA,EAAc;AAEvB,IAAA,IAAA,CAAKA,YAAAA,GAAe+C,WAAW,MAAK;AAElC,MAAA,IAAI,IAAA,CAAKtD,UAAAA,CAAWuD,IAAAA,GAAO,IAAA,CAAKjD,iBAAAA,EAAmB;AACjD,QAAA,MAAMkD,cAAc5B,KAAAA,CAAMC,IAAAA,CAAK,KAAK7B,UAAAA,CAAWyD,OAAAA,EAAS,CAAA,CACrDxB,IAAAA,CAAK,CAACzC,CAAAA,EAAGC,CAAAA,KAAMA,EAAE,CAAC,CAAA,CAAEZ,WAAWW,CAAAA,CAAE,CAAC,EAAEX,QAAQ,CAAA;AAG/C,QAAA,MAAM6E,MAAAA,GAASF,WAAAA,CAAYtB,KAAAA,CAAM,CAAA,EAAG,KAAK5B,iBAAiB,CAAA;AAC1D,QAAA,IAAA,CAAKN,WAAWoD,KAAAA;AAChBM,QAAAA,MAAAA,CAAOC,OAAAA,CAAQ,CAAC,CAACC,EAAAA,EAAIjD,KAAK,CAAA,KAAM,IAAA,CAAKX,UAAAA,CAAWa,GAAAA,CAAI+C,EAAAA,EAAIjD,KAAK,CAAC,CAAA;AAAA,MAChE;AAEA,MAAA,IAAA,CAAKJ,YAAAA,GAAe,IAAA;AAAA,IACtB,GAAG,GAAK,CAAA;AAAA,EACV;AACD;MAKYsD,0BAAAA,CAA0B;AAAA,EAAvC9D,WAAAA,GAAA;AACU,IAAA,IAAA,CAAA+D,YAAAA,uBAA6C7D,GAAAA,EAAG;AAChD,IAAA,IAAA,CAAA8D,UAAAA,uBAA2C9D,GAAAA,EAAG;AACrC,IAAA,IAAA,CAAA+D,gBAAAA,GAAmB,GAAA;AAC5B,IAAA,IAAA,CAAAzD,YAAAA,GAAqD,IAAA;AAAA,EA6M/D;AAAA;AAAA;AAAA;AAAA,EAxME0D,aAAAA,CAAcvF,YAAoBwF,SAAAA,EAAiB;AAEjD,IAAA,IAAI,CAAC,IAAA,CAAKJ,YAAAA,CAAazC,GAAAA,CAAI3C,UAAU,CAAA,EAAG;AACtC,MAAA,IAAA,CAAKoF,YAAAA,CAAajD,GAAAA,CAAInC,UAAAA,kBAAY,IAAIyF,KAAK,CAAA;AAAA,IAC7C;AACA,IAAA,IAAA,CAAKL,YAAAA,CAAalD,GAAAA,CAAIlC,UAAU,CAAA,CAAG0F,IAAIF,SAAS,CAAA;AAGhD,IAAA,IAAI,CAAC,IAAA,CAAKH,UAAAA,CAAW1C,GAAAA,CAAI6C,SAAS,CAAA,EAAG;AACnC,MAAA,IAAA,CAAKH,UAAAA,CAAWlD,GAAAA,CAAIqD,SAAAA,kBAAW,IAAIC,KAAK,CAAA;AAAA,IAC1C;AACA,IAAA,IAAA,CAAKJ,UAAAA,CAAWnD,GAAAA,CAAIsD,SAAS,CAAA,CAAGE,IAAI1F,UAAU,CAAA;AAG9C,IAAA,IAAA,CAAKoC,eAAAA,EAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKAuD,gBAAAA,CAAiB3F,YAAoBwF,SAAAA,EAAiB;AACpD,IAAA,MAAMI,IAAAA,GAAO,IAAA,CAAKR,YAAAA,CAAalD,GAAAA,CAAIlC,UAAU,CAAA;AAC7C,IAAA,IAAI4F,IAAAA,EAAM;AACRA,MAAAA,IAAAA,CAAKnB,OAAOe,SAAS,CAAA;AACrB,MAAA,IAAII,IAAAA,CAAKf,SAAS,CAAA,EAAG;AACnB,QAAA,IAAA,CAAKO,YAAAA,CAAaX,OAAOzE,UAAU,CAAA;AAAA,MACrC;AAAA,IACF;AAEA,IAAA,MAAM6F,KAAAA,GAAQ,IAAA,CAAKR,UAAAA,CAAWnD,GAAAA,CAAIsD,SAAS,CAAA;AAC3C,IAAA,IAAIK,KAAAA,EAAO;AACTA,MAAAA,KAAAA,CAAMpB,OAAOzE,UAAU,CAAA;AACvB,MAAA,IAAI6F,KAAAA,CAAMhB,SAAS,CAAA,EAAG;AACpB,QAAA,IAAA,CAAKQ,UAAAA,CAAWZ,OAAOe,SAAS,CAAA;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKAM,gBAAgB9F,UAAAA,EAAkB;AAChC,IAAA,MAAM4F,IAAAA,GAAO,IAAA,CAAKR,YAAAA,CAAalD,GAAAA,CAAIlC,UAAU,CAAA;AAC7C,IAAA,OAAO4F,IAAAA,GAAO1C,KAAAA,CAAMC,IAAAA,CAAKyC,IAAI,IAAI,EAAA;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKAG,cAAc/F,UAAAA,EAAkB;AAC9B,IAAA,MAAM6F,KAAAA,GAAQ,IAAA,CAAKR,UAAAA,CAAWnD,GAAAA,CAAIlC,UAAU,CAAA;AAC5C,IAAA,OAAO6F,KAAAA,GAAQ3C,KAAAA,CAAMC,IAAAA,CAAK0C,KAAK,IAAI,EAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKAG,2BAA2BhG,UAAAA,EAAkB;AAC3C,IAAA,MAAMiG,OAAAA,uBAAcR,GAAAA;AACpB,IAAA,MAAMzC,KAAAA,uBAAYyC,GAAAA;AAElB,IAAA,MAAMS,cAAehB,CAAAA,EAAAA,KAAuB;AAC1C,MAAA,IAAIlC,KAAAA,CAAML,GAAAA,CAAIuC,EAAE,CAAA,EAAG,OAAO,IAAA;AAC1B,MAAA,IAAIe,OAAAA,CAAQtD,GAAAA,CAAIuC,EAAE,CAAA,EAAG,OAAO,KAAA;AAE5Be,MAAAA,OAAAA,CAAQP,IAAIR,EAAE,CAAA;AACdlC,MAAAA,KAAAA,CAAM0C,IAAIR,EAAE,CAAA;AAEZ,MAAA,MAAMU,IAAAA,GAAO,IAAA,CAAKR,YAAAA,CAAalD,GAAAA,CAAIgD,EAAE,CAAA;AACrC,MAAA,IAAIU,IAAAA,EAAM;AACR,QAAA,KAAA,MAAWO,OAAOP,IAAAA,EAAM;AACtB,UAAA,IAAIM,WAAAA,CAAYC,GAAG,CAAA,EAAG,OAAO,IAAA;AAAA,QAC/B;AAAA,MACF;AAEAnD,MAAAA,KAAAA,CAAMyB,OAAOS,EAAE,CAAA;AACf,MAAA,OAAO,KAAA;AAAA,IACT,CAAA;AAEA,IAAA,OAAOgB,YAAYlG,UAAU,CAAA;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKAoG,eAAepG,UAAAA,EAAkB;AAC/B,IAAA,MAAMiG,OAAAA,uBAAcR,GAAAA;AAEpB,IAAA,MAAMY,WAAYnB,CAAAA,EAAAA,KAAsB;AACtC,MAAA,IAAIe,OAAAA,CAAQtD,GAAAA,CAAIuC,EAAE,CAAA,EAAG,OAAO,CAAA;AAC5Be,MAAAA,OAAAA,CAAQP,IAAIR,EAAE,CAAA;AAEd,MAAA,MAAMU,IAAAA,GAAO,IAAA,CAAKR,YAAAA,CAAalD,GAAAA,CAAIgD,EAAE,CAAA;AACrC,MAAA,IAAI,CAACU,IAAAA,IAAQA,IAAAA,CAAKf,IAAAA,KAAS,GAAG,OAAO,CAAA;AAErC,MAAA,IAAIyB,QAAAA,GAAW,CAAA;AACf,MAAA,KAAA,MAAWH,OAAOP,IAAAA,EAAM;AACtBU,QAAAA,QAAAA,GAAWC,IAAAA,CAAKC,GAAAA,CAAIF,QAAAA,EAAUD,QAAAA,CAASF,GAAG,CAAC,CAAA;AAAA,MAC7C;AAEA,MAAA,OAAOG,QAAAA,GAAW,CAAA;AAAA,IACpB,CAAA;AAEA,IAAA,OAAOD,SAASrG,UAAU,CAAA;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKAyG,uBAAAA,GAAuB;AACrB,IAAA,MAAMC,KAAAA,uBAAYnF,GAAAA;AAGlB,IAAA,MAAMoF,YAAAA,mBAAe,IAAIlB,GAAAA,CAAI,CAC3B,GAAG,IAAA,CAAKL,YAAAA,CAAawB,IAAAA,EAAI,EACzB,GAAG,IAAA,CAAKvB,UAAAA,CAAWuB,IAAAA,EAAM,CAC1B,CAAA;AAED,IAAA,KAAA,MAAW5G,cAAc2G,YAAAA,EAAc;AACrCD,MAAAA,KAAAA,CAAMvE,IAAInC,UAAAA,EAAY;AAAA,QACpBA,UAAAA;AAAAA,QACAoF,YAAAA,EAAc,IAAA,CAAKU,eAAAA,CAAgB9F,UAAU,CAAA;AAAA,QAC7CqF,UAAAA,EAAY,IAAA,CAAKU,aAAAA,CAAc/F,UAAU,CAAA;AAAA,QACzC6G,KAAAA,EAAO,IAAA,CAAKT,cAAAA,CAAepG,UAAU,CAAA;AAAA,QACrC8G,QAAAA,EAAU,IAAA,CAAKd,0BAAAA,CAA2BhG,UAAU;AAAA,OACrD,CAAA;AAAA,IACH;AAEA,IAAA,OAAO0G,KAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAK,mBAAmB/G,UAAAA,EAAkB;AACnC,IAAA,MAAMgH,QAAkB,EAAA;AACxB,IAAA,MAAMf,OAAAA,uBAAcR,GAAAA;AAEpB,IAAA,MAAMwB,aAAc/B,CAAAA,EAAAA,KAAc;AAChC,MAAA,IAAIe,OAAAA,CAAQtD,GAAAA,CAAIuC,EAAE,CAAA,EAAG;AAErBe,MAAAA,OAAAA,CAAQP,IAAIR,EAAE,CAAA;AACd8B,MAAAA,KAAAA,CAAMxE,KAAK0C,EAAE,CAAA;AAEb,MAAA,MAAMU,IAAAA,GAAO,IAAA,CAAKR,YAAAA,CAAalD,GAAAA,CAAIgD,EAAE,CAAA;AACrC,MAAA,IAAIU,IAAAA,EAAM;AACR,QAAA,KAAA,MAAWO,OAAOP,IAAAA,EAAM;AACtBqB,UAAAA,UAAAA,CAAWd,GAAG,CAAA;AAAA,QAChB;AAAA,MACF;AAAA,IACF,CAAA;AAEAc,IAAAA,UAAAA,CAAWjH,UAAU,CAAA;AACrB,IAAA,OAAOgH,KAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAE,kBAAkBlH,UAAAA,EAAmB;AACnC,IAAA,IAAIA,UAAAA,EAAY;AAEd,MAAA,IAAA,CAAKoF,YAAAA,CAAaX,OAAOzE,UAAU,CAAA;AAEnC,MAAA,IAAA,CAAKqF,WAAWJ,OAAAA,CAASY,CAAAA,KAAAA,KAAUA,KAAAA,CAAMpB,MAAAA,CAAOzE,UAAU,CAAC,CAAA;AAE3DkD,MAAAA,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAKkC,UAAAA,CAAWN,OAAAA,EAAS,CAAA,CAAEE,OAAAA,CAAQ,CAAC,CAACC,EAAAA,EAAIW,KAAK,CAAA,KAAK;AAC5D,QAAA,IAAIA,MAAMhB,IAAAA,KAAS,CAAA,EAAG,IAAA,CAAKQ,UAAAA,CAAWZ,OAAOS,EAAE,CAAA;AAAA,MACjD,CAAC,CAAA;AAAA,IACH,CAAA,MAAO;AACL,MAAA,IAAA,CAAKE,aAAaV,KAAAA;AAClB,MAAA,IAAA,CAAKW,WAAWX,KAAAA;IAClB;AAEA,IAAA,IAAI,KAAK7C,YAAAA,EAAc;AACrB8C,MAAAA,YAAAA,CAAa,KAAK9C,YAAY,CAAA;AAC9B,MAAA,IAAA,CAAKA,YAAAA,GAAe,IAAA;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQO,eAAAA,GAAe;AACrB,IAAA,IAAI,KAAKP,YAAAA,EAAc;AAEvB,IAAA,IAAA,CAAKA,YAAAA,GAAe+C,WAAW,MAAK;AAElC,MAAA,IAAI,IAAA,CAAKQ,YAAAA,CAAaP,IAAAA,GAAO,IAAA,CAAKS,gBAAAA,EAAkB;AAClD,QAAA,MAAMP,UAAU7B,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAKiC,YAAAA,CAAaL,SAAS,CAAA;AACtD,QAAA,MAAMoC,QAAAA,GAAWpC,OAAAA,CAAQvB,KAAAA,CAAM,IAAA,CAAK8B,gBAAgB,CAAA;AAEpD6B,QAAAA,QAAAA,CAASlC,OAAAA,CAAQ,CAAC,CAACC,EAAE,CAAA,KAAK;AACxB,UAAA,IAAA,CAAKgC,kBAAkBhC,EAAE,CAAA;AAAA,QAC3B,CAAC,CAAA;AAAA,MACH;AAEA,MAAA,IAAA,CAAKrD,YAAAA,GAAe,IAAA;AAAA,IACtB,GAAG,GAAK,CAAA;AAAA,EACV;AACD;MAKYuF,2BAAAA,CAA2B;AAAA,EAAxC/F,WAAAA,GAAA;AACU,IAAA,IAAA,CAAAgG,kBAAAA,GAA0CC,QAAAA,CAAS,EAAE,CAAA;AACrD,IAAA,IAAA,CAAAC,gBAAAA,uBAA2ChG,GAAAA,EAAG;AAC9C,IAAA,IAAA,CAAAiG,SAAAA,GAAYC,IAAI,KAAK,CAAA;AACrB,IAAA,IAAA,CAAAC,SAAAA,GAAoB,CAAA;AACX,IAAA,IAAA,CAAAC,WAAAA,GAAc,EAAA;AACd,IAAA,IAAA,CAAAC,wBAAAA,GAA2B,GAAA;AAAA,EA6L9C;AAAA;AAAA;AAAA;AAAA,EAxLEC,cAAAA,GAAc;AACZ,IAAA,IAAA,CAAKL,UAAUM,KAAAA,GAAQ,IAAA;AACvB,IAAA,IAAA,CAAKJ,SAAAA,GAAYK,YAAYhG,GAAAA;AAC7B,IAAA,IAAA,CAAKwF,iBAAiB7C,KAAAA;EACxB;AAAA;AAAA;AAAA;AAAA,EAKAsD,aAAAA,GAAa;AACX,IAAA,IAAA,CAAKR,UAAUM,KAAAA,GAAQ,KAAA;AACvB,IAAA,MAAMG,QAAAA,GAAWF,WAAAA,CAAYhG,GAAAA,KAAQ,IAAA,CAAK2F,SAAAA;AAE1C,IAAA,MAAM5D,SAAAA,GAAYZ,KAAAA,CAAMC,IAAAA,CAAK,IAAA,CAAKoE,gBAAAA,CAAiBxC,OAAAA,EAAS,CAAA,CAAEmD,GAAAA,CAAI,CAAC,CAAChD,EAAAA,EAAIiD,OAAO,CAAA,KAAK;AAClF,MAAA,MAAMC,YAAAA,GAAeD,OAAAA,CAAQA,OAAAA,CAAQxH,MAAAA,GAAS,CAAC,CAAA;AAC/C,MAAA,OAAO;AAAA,QACLuE,EAAAA;AAAAA,QACAmD,IAAAA,EAAMD,aAAaC,IAAAA,IAAQnD,EAAAA;AAAAA,QAC3BoD,UAAAA,EAAYF,aAAaE,UAAAA,IAAc,CAAA;AAAA,QACvCC,UAAAA,EAAYH,aAAaG,UAAAA,IAAc,CAAA;AAAA,QACvCC,WAAAA,EAAaJ,aAAaI,WAAAA,IAAe,CAAA;AAAA,QACzCC,QAAAA,EAAUL,aAAaK,QAAAA,IAAY,CAAA;AAAA,QACnCC,cAAAA,EAAgBN,aAAaM,cAAAA,IAAkB;AAAA;IAEnD,CAAC,CAAA;AAED,IAAA,MAAMC,MAAAA,GAA4B;AAAA,MAChC9F,SAAAA,EAAWb,KAAKD,GAAAA,EAAG;AAAA,MACnBkG,QAAAA;AAAAA,MACAnE,SAAAA;AAAAA,MACA8E,OAAAA,EAAS;AAAA,QACPC,eAAAA,EAAiB/E,UAAUjD,MAAAA,CAAO,CAACD,KAAKoD,CAAAA,KAAMpD,GAAAA,GAAMoD,CAAAA,CAAEsE,UAAAA,EAAY,CAAC,CAAA;AAAA,QACnEjI,iBAAAA,EAAmByD,SAAAA,CAAUnD,MAAAA,GAAS,CAAA,GAClCmD,UAAUjD,MAAAA,CAAO,CAACD,GAAAA,EAAKoD,CAAAA,KAAMpD,MAAMoD,CAAAA,CAAEsE,UAAAA,EAAY,CAAC,CAAA,GAAIxE,UAAUnD,MAAAA,GAChE,CAAA;AAAA,QACJmI,eAAAA,EAAiBhF,UAAUnD,MAAAA,GAAS,CAAA,GAChCmD,UAAUjD,MAAAA,CAAO,CAACkI,SAAS/E,CAAAA,KACzBA,CAAAA,CAAEsE,cAAcS,OAAAA,EAAST,UAAAA,IAAc,KAAKtE,CAAAA,GAAI+E,OAAAA,EAASjF,UAAU,CAAC,CAAC,EAAEoB,EAAAA,GACzE,EAAA;AAAA,QACJ8D,eAAAA,EAAiBlF,UAAUnD,MAAAA,GAAS,CAAA,GAChCmD,UAAUjD,MAAAA,CAAO,CAACoI,SAASjF,CAAAA,KACzBA,CAAAA,CAAEsE,cAAcW,OAAAA,EAASX,UAAAA,IAAcY,YAAYlF,CAAAA,GAAIiF,OAAAA,EAASnF,UAAU,CAAC,CAAC,EAAEoB,EAAAA,GAChF,EAAA;AAAA,QACJiE,gBAAAA,EAAkBrF,UAAUjD,MAAAA,CAAO,CAACD,KAAKoD,CAAAA,KAAMpD,GAAAA,GAAMoD,CAAAA,CAAEwE,WAAAA,EAAa,CAAC,CAAA;AAAA,QACrEY,aAAAA,EAAetF,UAAUjD,MAAAA,CAAO,CAACD,KAAKoD,CAAAA,KAAMpD,GAAAA,GAAMoD,CAAAA,CAAEyE,QAAAA,EAAU,CAAC;AAAA;AAChE;AAGH,IAAA,IAAA,CAAKpB,kBAAAA,CAAmB7E,KAAKmG,MAAM,CAAA;AAGnC,IAAA,IAAI,IAAA,CAAKtB,kBAAAA,CAAmB1G,MAAAA,GAAS,IAAA,CAAKgH,WAAAA,EAAa;AACrD,MAAA,IAAA,CAAKN,mBAAmBgC,MAAAA,CAAO,CAAA,EAAG,KAAKhC,kBAAAA,CAAmB1G,MAAAA,GAAS,KAAKgH,WAAW,CAAA;AAAA,IACrF;AAEA,IAAA,OAAOgB,MAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAW,cAAAA,CAAetJ,YAAoBmI,OAAAA,EAAY;AAC7C,IAAA,IAAI,CAAC,IAAA,CAAKZ,gBAAAA,CAAiB5E,GAAAA,CAAI3C,UAAU,CAAA,EAAG;AAC1C,MAAA,IAAA,CAAKuH,gBAAAA,CAAiBpF,GAAAA,CAAInC,UAAAA,EAAY,EAAE,CAAA;AAAA,IAC1C;AACA,IAAA,MAAMuJ,eAAAA,GAAkB,IAAA,CAAKhC,gBAAAA,CAAiBrF,GAAAA,CAAIlC,UAAU,CAAA;AAC5DuJ,IAAAA,eAAAA,CAAgB/G,IAAAA,CAAK;AAAA,MACnBK,SAAAA,EAAWb,KAAKD,GAAAA,EAAG;AAAA,MACnB,GAAGoG;AAAAA,KACJ,CAAA;AAGD,IAAA,IAAIoB,eAAAA,CAAgB5I,MAAAA,GAAS,IAAA,CAAKiH,wBAAAA,EAA0B;AAC1D2B,MAAAA,eAAAA,CAAgBF,MAAAA,CAAO,CAAA,EAAGE,eAAAA,CAAgB5I,MAAAA,GAAS,KAAKiH,wBAAwB,CAAA;AAAA,IAClF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA4B,WAAW9F,MAAAA,EAIV;AACC,IAAA,IAAI+F,OAAAA,GAAU,CAAC,GAAG,IAAA,CAAKpC,kBAAkB,CAAA;AAEzC,IAAA,IAAI3D,MAAAA,EAAQ;AACV,MAAA,IAAIA,OAAOgE,SAAAA,EAAW;AACpB+B,QAAAA,OAAAA,GAAUA,QAAQ/F,MAAAA,CAAOgG,CAAAA,CAAAA,KAAKA,CAAAA,CAAE7G,SAAAA,IAAaa,OAAOgE,SAAU,CAAA;AAAA,MAChE;AACA,MAAA,IAAIhE,OAAOiG,OAAAA,EAAS;AAClBF,QAAAA,OAAAA,GAAUA,QAAQ/F,MAAAA,CAAOgG,CAAAA,CAAAA,KAAKA,CAAAA,CAAE7G,SAAAA,IAAaa,OAAOiG,OAAQ,CAAA;AAAA,MAC9D;AACA,MAAA,IAAIjG,OAAO1D,UAAAA,EAAY;AACrByJ,QAAAA,OAAAA,GAAUA,OAAAA,CAAQvB,IAAIwB,CAAAA,CAAAA,MAAM;AAAA,UAC1B,GAAGA,CAAAA;AAAAA,UACH5F,SAAAA,EAAW4F,EAAE5F,SAAAA,CAAUJ,MAAAA,CAAOM,OAAKA,CAAAA,CAAEkB,EAAAA,KAAOxB,OAAO1D,UAAU;AAAA,SAC9D,CAAC,CAAA;AAAA,MACJ;AAAA,IACF;AAEA,IAAA,OAAOyJ,OAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAG,aAAAA,CAAc5J,YAAoB6J,UAAAA,EAAqD;AAKrF,IAAA,MAAMC,OAAiB,EAAA;AAEvB,IAAA,KAAA,MAAWnB,MAAAA,IAAU,KAAKtB,kBAAAA,EAAoB;AAC5C,MAAA,MAAM0C,WAAWpB,MAAAA,CAAO7E,SAAAA,CAAUkG,KAAKhG,CAAAA,CAAAA,KAAKA,CAAAA,CAAEkB,OAAOlF,UAAU,CAAA;AAC/D,MAAA,IAAI+J,QAAAA,EAAU;AACZD,QAAAA,IAAAA,CAAKtH,IAAAA,CAAKuH,QAAAA,CAASF,UAAU,CAAC,CAAA;AAAA,MAChC;AAAA,IACF;AAEA,IAAA,IAAIC,IAAAA,CAAKnJ,SAAS,CAAA,EAAG;AACnB,MAAA,OAAO;AAAA,QAAEsJ,KAAAA,EAAO,QAAA;AAAA,QAAUC,UAAAA,EAAY,CAAA;AAAA,QAAGJ;AAAAA,OAAI;AAAA,IAC/C;AAGA,IAAA,MAAMK,SAAAA,GAAYL,KAAKtG,KAAAA,CAAM,EAAE,EAAE3C,MAAAA,CAAO,CAACC,GAAGC,CAAAA,KAAMD,CAAAA,GAAIC,GAAG,CAAC,CAAA,GAAIwF,KAAK6D,GAAAA,CAAI,CAAA,EAAGN,KAAKtG,KAAAA,CAAM,EAAE,EAAE7C,MAAM,CAAA;AAC/F,IAAA,MAAM0J,WAAAA,GAAcP,KAAKtG,KAAAA,CAAM,GAAA,EAAK,EAAE,CAAA,CAAE3C,MAAAA,CAAO,CAACC,CAAAA,EAAGC,CAAAA,KAAMD,CAAAA,GAAIC,GAAG,CAAC,CAAA,GAAIwF,KAAK6D,GAAAA,CAAI,CAAA,EAAGN,KAAKtG,KAAAA,CAAM,GAAA,EAAK,EAAE,CAAA,CAAE7C,MAAM,CAAA;AAE3G,IAAA,MAAM2J,MAAAA,GAAAA,CAAWH,SAAAA,GAAYE,WAAAA,IAAeA,WAAAA,GAAe,GAAA;AAE3D,IAAA,IAAIJ,KAAAA;AACJ,IAAA,IAAIK,SAAS,EAAA,EAAI;AACfL,MAAAA,KAAAA,GAAQ,WAAA;AAAA,IACV,CAAA,MAAA,IAAWK,SAAS,CAAA,EAAG;AACrBL,MAAAA,KAAAA,GAAQ,WAAA;AAAA,IACV,CAAA,MAAO;AACLA,MAAAA,KAAAA,GAAQ,QAAA;AAAA,IACV;AAEA,IAAA,OAAO;AAAA,MAAEA,KAAAA;AAAAA,MAAOC,UAAAA,EAAY3D,IAAAA,CAAKgE,GAAAA,CAAID,MAAM,CAAA;AAAA,MAAGR;AAAAA;EAChD;AAAA;AAAA;AAAA;AAAA,EAKAU,wBAAwB7B,MAAAA,EAAyB;AAC/C,IAAA,MAAM8B,kBAA4B,EAAA;AAGlC,IAAA,MAAMnG,gBAAgBqE,MAAAA,CAAO7E,SAAAA,CAAUJ,OAAOM,CAAAA,CAAAA,KAAKA,CAAAA,CAAEsE,aAAa,GAAG,CAAA;AACrE,IAAA,IAAIhE,aAAAA,CAAc3D,SAAS,CAAA,EAAG;AAC5B8J,MAAAA,eAAAA,CAAgBjI,IAAAA,CACd,CAAA,sCAAA,EAAW8B,aAAAA,CAAc4D,GAAAA,CAAIlE,CAAAA,CAAAA,KAAKA,CAAAA,CAAEqE,IAAI,CAAA,CAAEqC,IAAAA,CAAK,IAAI,CAAC,CAAA,gDAAA,CAAe,CAAA;AAAA,IAEvE;AAGA,IAAA,MAAMC,mBAAAA,GAAsBhC,OAAO7E,SAAAA,CAAUJ,MAAAA,CAAOM,OAAKA,CAAAA,CAAEwE,WAAAA,GAAc,EAAA,GAAK,IAAA,GAAO,IAAI,CAAA;AACzF,IAAA,IAAImC,mBAAAA,CAAoBhK,SAAS,CAAA,EAAG;AAClC8J,MAAAA,eAAAA,CAAgBjI,IAAAA,CACd,CAAA,sCAAA,EAAWmI,mBAAAA,CAAoBzC,GAAAA,CAAIlE,CAAAA,CAAAA,KAAKA,CAAAA,CAAEqE,IAAI,CAAA,CAAEqC,IAAAA,CAAK,IAAI,CAAC,CAAA,+CAAA,CAAc,CAAA;AAAA,IAE5E;AAGA,IAAA,MAAME,mBAAmBjC,MAAAA,CAAO7E,SAAAA,CAAUJ,OAAOM,CAAAA,CAAAA,KAAKA,CAAAA,CAAEyE,WAAW,GAAI,CAAA;AACvE,IAAA,IAAImC,gBAAAA,CAAiBjK,SAAS,CAAA,EAAG;AAC/B8J,MAAAA,eAAAA,CAAgBjI,IAAAA,CACd,CAAA,6BAAA,EAAYoI,gBAAAA,CAAiB1C,GAAAA,CAAIlE,CAAAA,CAAAA,KAAKA,CAAAA,CAAEqE,IAAI,CAAA,CAAEqC,IAAAA,CAAK,IAAI,CAAC,CAAA,4CAAA,CAAgB,CAAA;AAAA,IAE5E;AAGA,IAAA,MAAMG,yBAAyBlC,MAAAA,CAAO7E,SAAAA,CAAUJ,OAAOM,CAAAA,CAAAA,KAAKA,CAAAA,CAAE0E,iBAAiB,EAAE,CAAA;AACjF,IAAA,IAAImC,sBAAAA,CAAuBlK,SAAS,CAAA,EAAG;AACrC8J,MAAAA,eAAAA,CAAgBjI,IAAAA,CACd,CAAA,sCAAA,EAAWqI,sBAAAA,CAAuB3C,GAAAA,CAAIlE,CAAAA,CAAAA,KAAKA,CAAAA,CAAEqE,IAAI,CAAA,CAAEqC,IAAAA,CAAK,IAAI,CAAC,CAAA,uCAAA,CAAW,CAAA;AAAA,IAE5E;AAEA,IAAA,OAAOD,eAAAA;AAAAA,EACT;AACD;MAKYK,0BAAAA,CAA0B;AAAA;AAAA;AAAA;AAAA,EAIrCC,8BAA8BhB,QAAAA,EAAkB;AAE9C,IAAA,IAAIiB,UAAAA,GAAa,CAAA;AAEjB,IAAA,MAAMC,IAAAA,GAAOlB,QAAAA,CAASmB,SAAAA,EAAWC,QAAAA,EAAQ,IAAM,EAAA;AAG/CH,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,UAAU,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AAC7CqK,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,iBAAiB,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AACpDqK,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,WAAW,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AAC9CqK,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,UAAU,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AAC7CqK,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,WAAW,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AAC9CqK,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,aAAa,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AAChDqK,IAAAA,UAAAA,IAAAA,CAAeC,IAAAA,CAAKG,KAAAA,CAAM,aAAa,CAAA,IAAK,EAAA,EAAIzK,MAAAA;AAEhD,IAAA,OAAOqK,UAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAK,6BAA6BtB,QAAAA,EAAkB;AAE7C,IAAA,IAAIiB,UAAAA,GAAa,CAAA;AACjB,IAAA,MAAMC,IAAAA,GAAOlB,QAAAA,CAASmB,SAAAA,EAAWC,QAAAA,EAAQ,IAAM,EAAA;AAG/C,IAAA,IAAIG,YAAAA,GAAe,CAAA;AACnB,IAAA,MAAMC,KAAAA,GAAQN,IAAAA,CAAKO,KAAAA,CAAM,IAAI,CAAA;AAE7B,IAAA,KAAA,MAAWC,QAAQF,KAAAA,EAAO;AACxB,MAAA,IAAIE,IAAAA,CAAKC,QAAAA,CAAS,GAAG,CAAA,EAAGJ,YAAAA,EAAAA;AACxB,MAAA,IAAIG,IAAAA,CAAKC,QAAAA,CAAS,GAAG,CAAA,EAAGJ,YAAAA,EAAAA;AAExB,MAAA,IAAIG,IAAAA,CAAKL,KAAAA,CAAM,SAAS,CAAA,IAAKK,IAAAA,CAAKL,KAAAA,CAAM,UAAU,CAAA,IAAKK,IAAAA,CAAKL,KAAAA,CAAM,YAAY,CAAA,EAAG;AAC/EJ,QAAAA,UAAAA,IAAc,CAAA,GAAIM,YAAAA;AAAAA,MACpB;AAAA,IACF;AAEA,IAAA,OAAON,UAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAW,sBAAsB5B,QAAAA,EAAkB;AACtC,IAAA,MAAMkB,IAAAA,GAAOlB,QAAAA,CAASmB,SAAAA,EAAWC,QAAAA,EAAQ,IAAM,EAAA;AAC/C,IAAA,IAAI7E,QAAAA,GAAW,CAAA;AACf,IAAA,IAAIsF,YAAAA,GAAe,CAAA;AAEnB,IAAA,KAAA,MAAWC,QAAQZ,IAAAA,EAAM;AACvB,MAAA,IAAIY,SAAS,GAAA,EAAK;AAChBD,QAAAA,YAAAA,EAAAA;AACAtF,QAAAA,QAAAA,GAAWC,IAAAA,CAAKC,GAAAA,CAAIF,QAAAA,EAAUsF,YAAY,CAAA;AAAA,MAC5C,CAAA,MAAA,IAAWC,SAAS,GAAA,EAAK;AACvBD,QAAAA,YAAAA,EAAAA;AAAAA,MACF;AAAA,IACF;AAEA,IAAA,OAAOtF,QAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKAwF,wBAAwB/B,QAAAA,EAAkB;AACxC,IAAA,OAAOgC,OAAOnF,IAAAA,CAAKmD,QAAAA,CAASiC,MAAAA,IAAU,EAAE,CAAA,CAAErL,MAAAA;AAAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAKAsL,mBAAmBlC,QAAAA,EAAkB;AACnC,IAAA,MAAMkB,IAAAA,GAAOlB,QAAAA,CAASmB,SAAAA,EAAWC,QAAAA,EAAQ,IAAM,EAAA;AAC/C,IAAA,OAAOF,IAAAA,CAAKO,KAAAA,CAAM,IAAI,CAAA,CAAE7K,MAAAA;AAAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKAuL,8BAA8B/D,OAAAA,EAA0B;AAEtD,IAAA,MAAM;AAAA,MAAEgE,oBAAAA;AAAAA,MAAsBC;AAAAA,KAAS,GAAKjE,OAAAA;AAG5C,IAAA,MAAMkE,MAAAA,GAASD,SAAAA,GAAY7F,IAAAA,CAAK+F,IAAAA,CAAKF,YAAY,CAAC,CAAA;AAClD,IAAA,MAAMG,KAAAA,GAAQhG,IAAAA,CAAKC,GAAAA,CAAI,CAAA,EAAA,CACpB,GAAA,GAAM,GAAA,GAAMD,IAAAA,CAAKiG,GAAAA,CAAIH,MAAM,CAAA,GAAI,IAAA,GAAOF,oBAAAA,IAAwB,MAAM,GAAG,CAAA;AAG1E,IAAA,OAAO5F,IAAAA,CAAKkG,MAAMF,KAAK,CAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKAG,gBAAgB3C,QAAAA,EAAkB;AAChC,IAAA,MAAM5B,OAAAA,GAA6B;AAAA,MACjCnI,YAAY+J,QAAAA,CAAS7E,EAAAA;AAAAA,MACrBiH,oBAAAA,EAAsB,IAAA,CAAKpB,6BAAAA,CAA8BhB,QAAQ,CAAA;AAAA,MACjE4C,mBAAAA,EAAqB,IAAA,CAAKtB,4BAAAA,CAA6BtB,QAAQ,CAAA;AAAA,MAC/D6C,YAAAA,EAAc,IAAA,CAAKjB,qBAAAA,CAAsB5B,QAAQ,CAAA;AAAA,MACjD8C,cAAAA,EAAgB,IAAA,CAAKf,uBAAAA,CAAwB/B,QAAQ,CAAA;AAAA,MACrDqC,SAAAA,EAAW,IAAA,CAAKH,kBAAAA,CAAmBlC,QAAQ,CAAA;AAAA,MAC3C+C,oBAAAA,EAAsB;AAAA;AAGxB3E,IAAAA,OAAAA,CAAQ2E,oBAAAA,GAAuB,IAAA,CAAKZ,6BAAAA,CAA8B/D,OAAO,CAAA;AAEzE,IAAA,OAAOA,OAAAA;AAAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA4E,yBAAyBjJ,SAAAA,EAAqB;AAC5C,IAAA,MAAMqE,UAAUrE,SAAAA,CAAUoE,GAAAA,CAAIlE,OAAK,IAAA,CAAK0I,eAAAA,CAAgB1I,CAAC,CAAC,CAAA;AAE1D,IAAA,OAAO;AAAA,MACLnB,SAAAA,EAAWb,KAAKD,GAAAA,EAAG;AAAA,MACnBoC,gBAAgBL,SAAAA,CAAUnD,MAAAA;AAAAA,MAC1BwH,OAAAA;AAAAA,MACAS,OAAAA,EAAS;AAAA,QACPoE,2BAAAA,EAA6B7E,OAAAA,CAAQtH,MAAAA,CAAO,CAACD,GAAAA,EAAKqM,CAAAA,KAAMrM,GAAAA,GAAMqM,CAAAA,CAAEd,oBAAAA,EAAsB,CAAC,CAAA,GAAIhE,OAAAA,CAAQxH,MAAAA;AAAAA,QACnGuM,0BAAAA,EAA4B/E,OAAAA,CAAQtH,MAAAA,CAAO,CAACD,GAAAA,EAAKqM,CAAAA,KAAMrM,GAAAA,GAAMqM,CAAAA,CAAEN,mBAAAA,EAAqB,CAAC,CAAA,GAAIxE,OAAAA,CAAQxH,MAAAA;AAAAA,QACjGwM,2BAAAA,EAA6BhF,OAAAA,CAAQtH,MAAAA,CAAO,CAACD,GAAAA,EAAKqM,CAAAA,KAAMrM,GAAAA,GAAMqM,CAAAA,CAAEH,oBAAAA,EAAsB,CAAC,CAAA,GAAI3E,OAAAA,CAAQxH,MAAAA;AAAAA,QACnGyM,uBAAAA,EAAyBjF,OAAAA,CAAQzE,MAAAA,CAAOuJ,CAAAA,CAAAA,KAAKA,CAAAA,CAAEd,oBAAAA,GAAuB,EAAE,CAAA,CAAEjE,GAAAA,CAAI+E,CAAAA,CAAAA,KAAKA,CAAAA,CAAEjN,UAAU,CAAA;AAAA,QAC/FqN,2BAAAA,EAA6BlF,OAAAA,CAAQzE,MAAAA,CAAOuJ,CAAAA,CAAAA,KAAKA,CAAAA,CAAEH,oBAAAA,GAAuB,EAAE,CAAA,CAAE5E,GAAAA,CAAI+E,CAAAA,CAAAA,KAAKA,CAAAA,CAAEjN,UAAU;AAAA;AACpG;EAEL;AACD;MAKYsN,gBAAAA,CAAgB;AAAA,EAO3BjM,WAAAA,GAAA;AACE,IAAA,IAAA,CAAKkM,kBAAAA,GAAqB,IAAInM,0BAAAA;AAC9B,IAAA,IAAA,CAAKoM,kBAAAA,GAAqB,IAAIrI,0BAAAA;AAC9B,IAAA,IAAA,CAAKsI,mBAAAA,GAAsB,IAAIrG,2BAAAA;AAC/B,IAAA,IAAA,CAAKsG,kBAAAA,GAAqB,IAAI5C,0BAAAA;EAChC;AAAA,EAEA,OAAO6C,WAAAA,GAAW;AAChB,IAAA,IAAI,CAAC,KAAKC,QAAAA,EAAU;AAClB,MAAA,IAAA,CAAKA,QAAAA,GAAW,IAAIN,gBAAAA;IACtB;AACA,IAAA,OAAO,IAAA,CAAKM,QAAAA;AAAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKAC,qBAAAA,GAAqB;AACnB,IAAA,OAAO,IAAA,CAAKN,kBAAAA;AAAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKAO,qBAAAA,GAAqB;AACnB,IAAA,OAAO,IAAA,CAAKN,kBAAAA;AAAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKAO,sBAAAA,GAAsB;AACpB,IAAA,OAAO,IAAA,CAAKN,mBAAAA;AAAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKAO,qBAAAA,GAAqB;AACnB,IAAA,OAAO,IAAA,CAAKN,kBAAAA;AAAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKAO,4BAA4BnK,SAAAA,EAAqB;AAC/C,IAAA,OAAO;AAAA,MACLjB,SAAAA,EAAWb,KAAKD,GAAAA,EAAG;AAAA,MACnBmM,KAAAA,EAAO,IAAA,CAAKX,kBAAAA,CAAmB1J,mBAAAA,EAAmB;AAAA,MAClDuB,YAAAA,EAAclC,MAAMC,IAAAA,CAAK,IAAA,CAAKqK,mBAAmB/G,uBAAAA,EAAuB,CAAGrD,QAAQ,CAAA;AAAA,MACnF2E,WAAAA,EAAa,IAAA,CAAK0F,mBAAAA,CAAoBjE,UAAAA,EAAU;AAAA,MAChDwB,UAAAA,EAAY,IAAA,CAAK0C,kBAAAA,CAAmBX,wBAAAA,CAAyBjJ,SAAS;AAAA;EAE1E;AACD;AAGM,MAAMqK,gBAAAA,GAAmBb,iBAAiBK,WAAAA;;;;;;;"}
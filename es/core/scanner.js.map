{"version":3,"file":"scanner.js","sources":["../../src/core/scanner.ts"],"sourcesContent":["/**\r\n * 模板扫描器 - 使用 import.meta.glob 动态扫描模板\r\n */\r\n\r\nimport type { Component } from 'vue'\r\nimport type { DeviceType, TemplateConfig, TemplateMetadata, TemplateRegistryItem, TemplateScanResult } from '../types'\r\n\r\n/**\r\n * 模板路径解析结果\r\n */\r\ninterface PathInfo {\r\n  category: string\r\n  device: string\r\n  name: string\r\n  fullPath: string\r\n}\r\n\r\n/**\r\n * 解析模板路径 - 内存优化版本\r\n * 路径格式：../templates/{category}/{device}/{name}/config.ts\r\n */\r\nfunction parseTemplatePath(path: string): PathInfo | null {\r\n  // 使用正则，避免每次调用创建新正则\r\n  const match = path.match(/templates\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/config\\.(ts|js)$/)\r\n  \r\n  if (!match) {\r\n    return null\r\n  }\r\n\r\n  const [, category, device, name] = match\r\n\r\n  // 直接返回对象字面量，避免中间变量\r\n  return {\r\n    category,\r\n    device,\r\n    name,\r\n    fullPath: path,\r\n  }\r\n}\r\n\r\n/**\r\n * 获取组件路径（从配置路径推导）- 内存优化\r\n */\r\nfunction getComponentPath(configPath: string): string {\r\n  // 使用正则，避免重复创建\r\n  return configPath.replace(/config\\.(ts|js)$/, 'index.vue')\r\n}\r\n\r\n/**\r\n * 获取打包后的组件路径 - 内存优化\r\n */\r\nfunction getBuiltComponentPath(configPath: string): string {\r\n  // 使用正则，避免重复创建\r\n  return configPath.replace(/config\\.(ts|js)$/, 'index.vue.js')\r\n}\r\n\r\n/**\r\n * 模板扫描器类 - 内存优化版本\r\n */\r\nexport class TemplateScanner {\r\n  // 使用 null 初始化，扫描后立即清理，减少内存占用\r\n  private configModules: Record<string, unknown> | null = null\r\n  private componentModules: Record<string, unknown> | null = null\r\n  // 使用 Map 存储注册表，支持高效查找\r\n  private registry: Map<string, TemplateRegistryItem> = new Map()\r\n  // WeakMap 缓存扫描结果，允许垃圾回收\r\n  private scanCache: WeakMap<object, TemplateScanResult> = new WeakMap()\r\n  // 复用正则表达式，避免重复创建\r\n  static readonly PATH_REGEX = /templates\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/config\\.(ts|js)$/\r\n  static readonly CONFIG_REPLACE_REGEX = /config\\.(ts|js)$/\r\n\r\n  /**\r\n   * 扫描所有模板\r\n   * \r\n   * 关键点：\r\n   * 1. 使用 import.meta.glob 的 eager 模式同步加载所有配置\r\n   * 2. 使用普通模式（懒加载）加载组件\r\n   * 3. 支持 .ts 和 .js 配置文件（开发和生产环境）\r\n   * 4. 支持 .vue 文件（开发环境）和 .vue.js 文件（打包后）\r\n   */\r\n  async scan(): Promise<TemplateScanResult> {\r\n    const startTime = performance.now()\r\n\r\n    // 使用缓存键检查是否已扫描\r\n    const cacheKey = { _scanner: true }\r\n    const cached = this.scanCache.get(cacheKey)\r\n    if (cached) return cached\r\n\r\n    // 1. 扫描所有 config.ts/js 文件（eager 模式，同步加载）\r\n    this.configModules = import.meta.glob(\r\n      '../templates/**/config.{ts,js}',\r\n      { eager: true }\r\n    )\r\n\r\n    // 2. 扫描所有 index.vue 和 index.vue.js 文件（懒加载模式）\r\n    // 开发环境使用 .vue，生产环境使用 .vue.js\r\n    this.componentModules = {\r\n      ...import.meta.glob('../templates/**/index.vue'),\r\n      ...import.meta.glob('../templates/**/index.vue.js'),\r\n    }\r\n\r\n    // 3. 解析并注册所有模板 - 预分配数组大小以减少扩容\r\n    const moduleEntries = Object.entries(this.configModules)\r\n    const templates: TemplateMetadata[] = Array.from({length: moduleEntries.length})\r\n    let templateIndex = 0\r\n    const byCategory: Record<string, number> = Object.create(null) // 使用 Object.create(null) 节省原型链内存\r\n    const byDevice: Record<string, number> = Object.create(null)\r\n\r\n    for (const [path, module] of moduleEntries) {\r\n      const pathInfo = parseTemplatePath(path)\r\n      \r\n      if (!pathInfo) {\r\n        console.warn(`[TemplateScanner] 无法解析路径: ${path}`)\r\n        continue\r\n      }\r\n\r\n      // 获取配置（支持 default export 和直接 export）\r\n      const mod = module as unknown as { default?: TemplateConfig } | TemplateConfig\r\n      const config: TemplateConfig = (mod && typeof mod === 'object' && 'default' in mod)\r\n        ? (mod.default as TemplateConfig)\r\n        : (mod as TemplateConfig)\r\n\r\n      // 构建完整的元数据\r\n      const metadata: TemplateMetadata = {\r\n        ...config,\r\n        category: pathInfo.category,\r\n        device: pathInfo.device as DeviceType,\r\n        name: config.name || pathInfo.name,\r\n      }\r\n\r\n      // 获取组件路径（尝试 .vue 和 .vue.js）\r\n      const componentPath = getComponentPath(path)\r\n      const builtComponentPath = getBuiltComponentPath(path)\r\n      \r\n      // 优先使用 .vue 文件（开发环境），如果不存在则使用 .vue.js（生产环境）\r\n      const componentLoader = this.componentModules[componentPath] || \r\n                             this.componentModules[builtComponentPath]\r\n      \r\n      const actualComponentPath = this.componentModules[componentPath] ? \r\n                                  componentPath : builtComponentPath\r\n\r\n      if (!componentLoader) {\r\n        console.warn(\r\n          `[TemplateScanner] 未找到组件: ${componentPath} 或 ${builtComponentPath} (配置: ${path})`\r\n        )\r\n        continue\r\n      }\r\n\r\n      // 创建注册表项\r\n      const registryItem: TemplateRegistryItem = {\r\n        metadata,\r\n        loader: async () => {\r\n          const mod = await (componentLoader as () => Promise<unknown>)()\r\n          const m = mod as { default?: Component }\r\n          return (m.default ?? (mod as Component))\r\n        },\r\n        configPath: path,\r\n        componentPath: actualComponentPath,\r\n      }\r\n\r\n      // 生成唯一键：category/device/name\r\n      const key = `${metadata.category}/${metadata.device}/${metadata.name}`\r\n      this.registry.set(key, registryItem)\r\n\r\n      // 统计 - 使用预分配的数组位置\r\n      templates[templateIndex++] = metadata\r\n      byCategory[metadata.category] = (byCategory[metadata.category] || 0) + 1\r\n      byDevice[metadata.device] = (byDevice[metadata.device] || 0) + 1\r\n    }\r\n\r\n    // 调整数组大小到实际使用的长度\r\n    templates.length = templateIndex\r\n\r\n    const scanTime = performance.now() - startTime\r\n\r\n    const result = {\r\n      total: templates.length,\r\n      byCategory,\r\n      byDevice,\r\n      scanTime,\r\n      templates,\r\n    }\r\n\r\n    // 缓存扫描结果\r\n    this.scanCache.set(cacheKey, result)\r\n\r\n    // 清理不再需要的模块引用，释放内存\r\n    this.configModules = null\r\n    this.componentModules = null\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 获取注册表\r\n   */\r\n  getRegistry(): Map<string, TemplateRegistryItem> {\r\n    return this.registry\r\n  }\r\n\r\n  /**\r\n   * 根据键获取模板\r\n   */\r\n  getTemplate(category: string, device: string, name: string): TemplateRegistryItem | undefined {\r\n    const key = `${category}/${device}/${name}`\r\n    return this.registry.get(key)\r\n  }\r\n\r\n  /**\r\n   * 获取所有模板元数据\r\n   */\r\n  getAllMetadata(): TemplateMetadata[] {\r\n    return Array.from(this.registry.values()).map(item => item.metadata)\r\n  }\r\n}\r\n\r\n/**\r\n * 全局扫描器实例\r\n */\r\nlet globalScanner: TemplateScanner | null = null\r\n\r\n/**\r\n * 获取全局扫描器实例\r\n */\r\nexport function getScanner(): TemplateScanner {\r\n  if (!globalScanner) {\r\n    globalScanner = new TemplateScanner()\r\n  }\r\n  return globalScanner\r\n}\r\n\r\n/**\r\n * 扫描所有模板（便捷方法）\r\n */\r\nexport async function scanTemplates(): Promise<TemplateScanResult> {\r\n  const scanner = getScanner()\r\n  return scanner.scan()\r\n}\r\n"],"names":["parseTemplatePath","path","match","category","device","name","fullPath","getComponentPath","configPath","replace","getBuiltComponentPath","TemplateScanner","constructor","configModules","componentModules","registry","Map","scanCache","WeakMap","scan","startTime","performance","now","cacheKey","_scanner","cached","get","import","glob","eager","moduleEntries","Object","entries","templates","Array","from","length","templateIndex","byCategory","create","byDevice","module","pathInfo","console","warn","mod","config","default","metadata","componentPath","builtComponentPath","componentLoader","actualComponentPath","registryItem","loader","m","key","set","scanTime","result","total","getRegistry","getTemplate","getAllMetadata","values","map","item","PATH_REGEX","CONFIG_REPLACE_REGEX","globalScanner","getScanner","scanTemplates","scanner"],"mappings":"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"}
{"version":3,"file":"useTemplate.js","sources":["../../src/composables/useTemplate.ts"],"sourcesContent":["/**\n * Vue 组合式函数 - 模板管理\n */\n\nimport type { DeviceType, TemplateFilter, TemplateLoadOptions, TemplateMetadata } from '../types'\nimport { type Component, computed, markRaw, onMounted, onUnmounted, ref, type Ref, watch } from 'vue'\nimport { getManager } from '../core/manager'\n\n/**\n * 使用模板 - 内存优化版本\n */\nexport function useTemplate(\n  category: Ref<string> | string,\n  device: Ref<string | DeviceType> | string | DeviceType,\n  name: Ref<string> | string,\n  options?: TemplateLoadOptions\n) {\n  // 使用 unref 避免创建不必要的 ref\n  const categoryRef = typeof category === 'string' ? ref(category) : category as Ref<string>\n  const deviceRef = typeof device === 'string' ? ref(device) : device as Ref<string | DeviceType>\n  const nameRef = typeof name === 'string' ? ref(name) : name as Ref<string>\n\n  const component = ref<Component | null>(null)\n  const loading = ref(false)\n  const error = ref<Error | null>(null)\n  const metadata = ref<TemplateMetadata | null>(null)\n\n  // 延迟获取 manager，避免过早初始化\n  let manager: ReturnType<typeof getManager> | null = null\n  const getManagerLazy = () => {\n    if (!manager) manager = getManager()\n    return manager\n  }\n\n  /**\n   * 加载模板 - 优化版本\n   */\n  const load = async () => {\n    const cat = categoryRef.value\n    const dev = deviceRef.value\n    const nm = nameRef.value\n\n    if (!cat || !dev || !nm) return\n\n    loading.value = true\n    error.value = null\n\n    try {\n      const mgr = getManagerLazy()\n      const loaded = await mgr.loadTemplate(cat, dev, nm, options)\n      component.value = markRaw(loaded) // markRaw 避免响应式转换\n\n      // 获取元数据 - 只在需要时查询\n      if (!metadata.value || metadata.value.name !== nm) {\n        const templates = await mgr.queryTemplates({\n          category: cat,\n          device: dev as DeviceType,\n          name: nm,\n        })\n        metadata.value = templates[0] || null\n      }\n    } catch (e) {\n      error.value = e as Error\n      component.value = null\n      metadata.value = null\n    } finally {\n      loading.value = false\n    }\n  }\n\n  /**\n   * 重新加载 - 优化版本\n   */\n  const reload = () => {\n    const mgr = getManagerLazy()\n    mgr.clearCache(categoryRef.value, deviceRef.value, nameRef.value)\n    metadata.value = null // 清理元数据缓存\n    return load()\n  }\n\n  // 监听参数变化 - 使用防抖\n  let loadTimer: ReturnType<typeof setTimeout> | null = null\n  watch([categoryRef, deviceRef, nameRef], () => {\n    if (loadTimer) clearTimeout(loadTimer)\n    loadTimer = setTimeout(() => {\n      load()\n      loadTimer = null\n    }, 100) // 100ms 防抖\n  })\n\n  // 初始加载\n  onMounted(() => {\n    load()\n  })\n\n  // 清理定时器\n  onUnmounted(() => {\n    if (loadTimer) {\n      clearTimeout(loadTimer)\n      loadTimer = null\n    }\n  })\n\n  return {\n    // 直接返回 ref，避免不必要的 computed 包装\n    component: component as Readonly<Ref<Component | null>>,\n    loading: loading as Readonly<Ref<boolean>>,\n    error: error as Readonly<Ref<Error | null>>,\n    metadata: metadata as Readonly<Ref<TemplateMetadata | null>>,\n    load,\n    reload,\n  }\n}\n\n/**\n * 使用模板列表 - 内存优化版本\n */\nexport function useTemplateList(filter?: Ref<TemplateFilter> | TemplateFilter) {\n  const filterRef = typeof filter === 'object' && 'value' in filter ?\n    filter as Ref<TemplateFilter> : ref(filter || {})\n  const templates = ref<TemplateMetadata[]>([])\n  const loading = ref(false)\n  const error = ref<Error | null>(null)\n\n  // 延迟获取 manager\n  let manager: ReturnType<typeof getManager> | null = null\n  const getManagerLazy = () => {\n    if (!manager) manager = getManager()\n    return manager\n  }\n\n  /**\n   * 查询模板 - 优化版本\n   */\n  const query = async () => {\n    loading.value = true\n    error.value = null\n\n    try {\n      const mgr = getManagerLazy()\n      templates.value = await mgr.queryTemplates(filterRef.value)\n    } catch (e) {\n      error.value = e as Error\n      templates.value = []\n    } finally {\n      loading.value = false\n    }\n  }\n\n  /**\n   * 刷新列表 - 优化版本\n   */\n  const refresh = async () => {\n    const mgr = getManagerLazy()\n    await mgr.rescan()\n    return query()\n  }\n\n  // 监听过滤条件变化 - 使用防抖以减少查询次数\n  let queryTimer: ReturnType<typeof setTimeout> | null = null\n  watch(filterRef, () => {\n    if (queryTimer) clearTimeout(queryTimer)\n    queryTimer = setTimeout(() => {\n      query()\n      queryTimer = null\n    }, 200) // 200ms 防抖\n  }, { deep: true })\n\n  // 初始查询\n  onMounted(() => {\n    query()\n  })\n\n  // 清理定时器\n  onUnmounted(() => {\n    if (queryTimer) {\n      clearTimeout(queryTimer)\n      queryTimer = null\n    }\n  })\n\n  return {\n    // 直接返回 ref，避免 computed 开销\n    templates: templates as Readonly<Ref<TemplateMetadata[]>>,\n    loading: loading as Readonly<Ref<boolean>>,\n    error: error as Readonly<Ref<Error | null>>,\n    query,\n    refresh,\n  }\n}\n\n/**\n * 使用默认模板\n */\nexport function useDefaultTemplate(\n  category: Ref<string> | string,\n  device: Ref<string> | string\n) {\n  const categoryRef = ref(category)\n  const deviceRef = ref(device)\n\n  const template = ref<TemplateMetadata | null>(null)\n  const loading = ref(false)\n  const error = ref<Error | null>(null)\n\n  const manager = getManager()\n\n  /**\n   * 获取默认模板\n   */\n  const getDefault = async () => {\n    if (!categoryRef.value || !deviceRef.value) {\n      return\n    }\n\n    loading.value = true\n    error.value = null\n\n    try {\n      template.value = await manager.getDefaultTemplate(\n        categoryRef.value,\n        deviceRef.value\n      )\n    } catch (e) {\n      error.value = e as Error\n      template.value = null\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // 监听参数变化\n  watch([categoryRef, deviceRef], () => {\n    getDefault()\n  })\n\n  // 初始加载\n  onMounted(() => {\n    getDefault()\n  })\n\n  return {\n    template: computed(() => template.value),\n    loading: computed(() => loading.value),\n    error: computed(() => error.value),\n    getDefault,\n  }\n}\n\n/**\n * 使用模板管理器\n */\nexport function useTemplateManager() {\n  const manager = getManager()\n  const initialized = ref(false)\n  const scanResult = ref(manager.getScanResult())\n\n  /**\n   * 初始化\n   */\n  const initialize = async () => {\n    if (initialized.value) {\n      return scanResult.value ?? await manager.initialize()\n    }\n\n    const result = await manager.initialize()\n    scanResult.value = result\n    initialized.value = true\n    return result\n  }\n\n  /**\n   * 重新扫描\n   */\n  const rescan = async () => {\n    const result = await manager.rescan()\n    scanResult.value = result\n    return result\n  }\n\n  return {\n    manager,\n    initialized: computed(() => initialized.value),\n    scanResult: computed(() => scanResult.value),\n    initialize,\n    rescan,\n    loadTemplate: manager.loadTemplate.bind(manager),\n    preloadTemplate: manager.preloadTemplate.bind(manager),\n    clearCache: manager.clearCache.bind(manager),\n    getAllTemplates: manager.getAllTemplates.bind(manager),\n    queryTemplates: manager.queryTemplates.bind(manager),\n    getTemplatesByCategory: manager.getTemplatesByCategory.bind(manager),\n    getTemplatesByDevice: manager.getTemplatesByDevice.bind(manager),\n    getDefaultTemplate: manager.getDefaultTemplate.bind(manager),\n  }\n}\n"],"names":["useTemplate","category","device","name","options","categoryRef","ref","deviceRef","nameRef","component","loading","error","metadata","manager","getManagerLazy","getManager","load","cat","value","dev","nm","mgr","loaded","loadTemplate","markRaw","templates","queryTemplates","e","reload","clearCache","loadTimer","watch","setTimeout","onMounted","onUnmounted","clearTimeout","useTemplateList","filter","filterRef","query","refresh","rescan","queryTimer","deep","useDefaultTemplate","template","getDefault","getDefaultTemplate","computed","useTemplateManager","initialized","scanResult","getScanResult","initialize","result","bind","preloadTemplate","getAllTemplates","getTemplatesByCategory","getTemplatesByDevice"],"mappings":"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"}
{"version":3,"file":"useTemplateInheritance.js","sources":["../../src/composables/useTemplateInheritance.ts"],"sourcesContent":["/**\r\n * 模板继承组合式函数\r\n */\r\n\r\nimport type { InjectionKey } from 'vue';\nimport type {\r\n  MergeStrategy,\r\n  TemplateBlock,\r\n  TemplateInheritanceConfig} from '../core/inheritance';\r\nimport type { Template } from '../types'\r\nimport { computed, inject, provide, reactive, ref, watch } from 'vue'\nimport {\r\n  blockManager,\r\n  createInheritableTemplate,\r\n  inheritanceManager\r\n} from '../core/inheritance'\r\n\r\n/**\r\n * 模板继承上下文\r\n */\r\nexport interface TemplateInheritanceContext {\r\n  /**\r\n   * 父模板\r\n   */\r\n  parent?: Template\r\n  \r\n  /**\r\n   * 混入列表\r\n   */\r\n  mixins: Template[]\r\n  \r\n  /**\r\n   * 合并策略\r\n   */\r\n  mergeStrategy: MergeStrategy\r\n  \r\n  /**\r\n   * 模板块\r\n   */\r\n  blocks: Map<string, TemplateBlock>\r\n  \r\n  /**\r\n   * 继承深度\r\n   */\r\n  depth: number\r\n}\r\n\r\n// 注入键\r\nconst InheritanceContextKey: InjectionKey<TemplateInheritanceContext> = Symbol('TemplateInheritance')\r\n\r\n/**\r\n * 模板继承选项\r\n */\r\nexport interface UseTemplateInheritanceOptions extends TemplateInheritanceConfig {\r\n  /**\r\n   * 是否自动注册\r\n   */\r\n  autoRegister?: boolean\r\n  \r\n  /**\r\n   * 是否启用块继承\r\n   */\r\n  enableBlocks?: boolean\r\n  \r\n  /**\r\n   * 块覆盖映射\r\n   */\r\n  blockOverrides?: Record<string, any>\r\n  \r\n  /**\r\n   * 继承链追踪\r\n   */\r\n  trackChain?: boolean\r\n}\r\n\r\n/**\r\n * 使用模板继承\r\n */\r\nexport function useTemplateInheritance(\r\n  template: Template,\r\n  options: UseTemplateInheritanceOptions = {}\r\n) {\r\n  // 状态\r\n  const isInherited = ref(false)\r\n  const inheritanceChain = ref<string[]>([])\r\n  const activeBlocks = reactive(new Map<string, TemplateBlock>())\r\n  \r\n  // 获取或创建上下文\r\n  const parentContext = inject(InheritanceContextKey, null)\r\n  \r\n  // 创建当前上下文\r\n  const context = reactive<TemplateInheritanceContext>({\r\n    parent: options.extends as Template | undefined,\r\n    mixins: (options.mixins || []) as Template[],\r\n    mergeStrategy: options.mergeStrategy || {},\r\n    blocks: activeBlocks,\r\n    depth: (parentContext?.depth || 0) + 1\r\n  })\r\n  \r\n  // 提供上下文给子组件\r\n  provide(InheritanceContextKey, context)\r\n  \r\n  // 处理的模板\r\n  const processedTemplate = computed(() => {\r\n    if (!options.extends && !options.mixins?.length) {\r\n      return template\r\n    }\r\n    \r\n    return createInheritableTemplate(template, options)\r\n  })\r\n  \r\n  // 注册模板\r\n  if (options.autoRegister && template.id) {\r\n    inheritanceManager.registerTemplate(template.id, template)\r\n  }\r\n  \r\n  // 处理模板块\r\n  if (options.enableBlocks && template.id) {\r\n    // 注册块覆盖\r\n    if (options.blockOverrides) {\r\n      Object.entries(options.blockOverrides).forEach(([name, content]) => {\r\n        blockManager.overrideBlock(template.id!, name, content)\r\n      })\r\n    }\r\n  }\r\n  \r\n  // 追踪继承链\r\n  if (options.trackChain) {\r\n    const chain: string[] = []\r\n    \r\n    // 添加当前模板\r\n    if (template.id) {\r\n      chain.push(template.id)\r\n    }\r\n    \r\n    // 添加父模板\r\n    if (options.extends) {\r\n      const parentId = typeof options.extends === 'string' \r\n        ? options.extends \r\n        : options.extends.id\r\n      if (parentId) {\r\n        chain.unshift(parentId)\r\n      }\r\n    }\r\n    \r\n    // 添加混入\r\n    if (options.mixins) {\r\n      options.mixins.forEach(mixin => {\r\n        const mixinId = typeof mixin === 'string' ? mixin : mixin.id\r\n        if (mixinId) {\r\n          chain.push(`mixin:${mixinId}`)\r\n        }\r\n      })\r\n    }\r\n    \r\n    inheritanceChain.value = chain\r\n  }\r\n  \r\n  // 检查是否被继承\r\n  watch(\r\n    () => processedTemplate.value,\r\n    (newTemplate) => {\r\n      isInherited.value = newTemplate !== template\r\n    },\r\n    { immediate: true }\r\n  )\r\n  \r\n  /**\r\n   * 扩展当前模板\r\n   */\r\n  const extend = (config: TemplateInheritanceConfig): Template => {\r\n    return inheritanceManager.extendTemplate(processedTemplate.value, config)\r\n  }\r\n  \r\n  /**\r\n   * 创建混入\r\n   */\r\n  const mixin = (id: string, mixinTemplate: Partial<Template>): void => {\r\n    inheritanceManager.createMixin(id, mixinTemplate)\r\n  }\r\n  \r\n  /**\r\n   * 定义块\r\n   */\r\n  const defineBlock = (block: TemplateBlock): void => {\r\n    if (!template.id) {\r\n      console.warn('Template must have an id to define blocks')\r\n      return\r\n    }\r\n    \r\n    blockManager.defineBlock(template.id, block)\r\n    activeBlocks.set(block.name, block)\r\n  }\r\n  \r\n  /**\r\n   * 覆盖块\r\n   */\r\n  const overrideBlock = (name: string, content: any): boolean => {\r\n    if (!template.id) {\r\n      console.warn('Template must have an id to override blocks')\r\n      return false\r\n    }\r\n    \r\n    const success = blockManager.overrideBlock(template.id, name, content)\r\n    if (success) {\r\n      const block = blockManager.getBlock(template.id, name)\r\n      if (block) {\r\n        activeBlocks.set(name, block)\r\n      }\r\n    }\r\n    \r\n    return success\r\n  }\r\n  \r\n  /**\r\n   * 获取块\r\n   */\r\n  const getBlock = (name: string): TemplateBlock | undefined => {\r\n    if (!template.id) return undefined\r\n    return blockManager.getBlock(template.id, name)\r\n  }\r\n  \r\n  /**\r\n   * 渲染块\r\n   */\r\n  const renderBlock = (name: string) => {\r\n    if (!template.id) return null\r\n    return blockManager.renderBlock(template.id, name)\r\n  }\r\n  \r\n  /**\r\n   * 获取父模板\r\n   */\r\n  const getParent = (): Template | undefined => {\r\n    return context.parent\r\n  }\r\n  \r\n  /**\r\n   * 获取混入\r\n   */\r\n  const getMixins = (): Template[] => {\r\n    return context.mixins\r\n  }\r\n  \r\n  /**\r\n   * 获取继承深度\r\n   */\r\n  const getDepth = (): number => {\r\n    return context.depth\r\n  }\r\n  \r\n  /**\r\n   * 清理\r\n   */\r\n  const cleanup = (): void => {\r\n    if (template.id) {\r\n      blockManager.clearBlocks(template.id)\r\n    }\r\n    activeBlocks.clear()\r\n  }\r\n  \r\n  return {\r\n    // 状态\r\n    template: processedTemplate,\r\n    isInherited,\r\n    inheritanceChain,\r\n    blocks: activeBlocks,\r\n    context,\r\n    \r\n    // 方法\r\n    extend,\r\n    mixin,\r\n    defineBlock,\r\n    overrideBlock,\r\n    getBlock,\r\n    renderBlock,\r\n    getParent,\r\n    getMixins,\r\n    getDepth,\r\n    cleanup\r\n  }\r\n}\r\n\r\n/**\r\n * 使用模板块\r\n */\r\nexport function useTemplateBlocks(templateId: string) {\r\n  const blocks = ref<TemplateBlock[]>([])\r\n  const blockMap = reactive(new Map<string, TemplateBlock>())\r\n  \r\n  // 加载块\r\n  const loadBlocks = () => {\r\n    const loadedBlocks = blockManager.getBlocks(templateId)\r\n    blocks.value = loadedBlocks\r\n    blockMap.clear()\r\n    loadedBlocks.forEach(block => {\r\n      blockMap.set(block.name, block)\r\n    })\r\n  }\r\n  \r\n  // 初始加载\r\n  loadBlocks()\r\n  \r\n  /**\r\n   * 定义新块\r\n   */\r\n  const define = (block: TemplateBlock) => {\r\n    blockManager.defineBlock(templateId, block)\r\n    loadBlocks()\r\n  }\r\n  \r\n  /**\r\n   * 覆盖块内容\r\n   */\r\n  const override = (name: string, content: any): boolean => {\r\n    const success = blockManager.overrideBlock(templateId, name, content)\r\n    if (success) {\r\n      loadBlocks()\r\n    }\r\n    return success\r\n  }\r\n  \r\n  /**\r\n   * 获取块\r\n   */\r\n  const get = (name: string): TemplateBlock | undefined => {\r\n    return blockMap.get(name)\r\n  }\r\n  \r\n  /**\r\n   * 渲染块\r\n   */\r\n  const render = (name: string) => {\r\n    return blockManager.renderBlock(templateId, name)\r\n  }\r\n  \r\n  /**\r\n   * 检查块是否存在\r\n   */\r\n  const has = (name: string): boolean => {\r\n    return blockMap.has(name)\r\n  }\r\n  \r\n  /**\r\n   * 清除所有块\r\n   */\r\n  const clear = () => {\r\n    blockManager.clearBlocks(templateId)\r\n    blocks.value = []\r\n    blockMap.clear()\r\n  }\r\n  \r\n  return {\r\n    blocks,\r\n    blockMap,\r\n    define,\r\n    override,\r\n    get,\r\n    render,\r\n    has,\r\n    clear,\r\n    refresh: loadBlocks\r\n  }\r\n}\r\n\r\n/**\r\n * 使用模板混入\r\n */\r\nexport function useTemplateMixins() {\r\n  const mixins = reactive(new Map<string, Partial<Template>>())\r\n  \r\n  /**\r\n   * 注册混入\r\n   */\r\n  const register = (id: string, mixin: Partial<Template>) => {\r\n    inheritanceManager.createMixin(id, mixin)\r\n    mixins.set(id, mixin)\r\n  }\r\n  \r\n  /**\r\n   * 获取混入\r\n   */\r\n  const get = (id: string): Partial<Template> | undefined => {\r\n    return inheritanceManager.getMixin(id)\r\n  }\r\n  \r\n  /**\r\n   * 应用混入到模板\r\n   */\r\n  const apply = (\r\n    template: Template,\r\n    mixinIds: string[],\r\n    strategy?: MergeStrategy\r\n  ): Template => {\r\n    return inheritanceManager.extendTemplate(template, {\r\n      mixins: mixinIds,\r\n      mergeStrategy: strategy\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 创建组合混入\r\n   */\r\n  const compose = (\r\n    id: string,\r\n    mixinIds: string[],\r\n    additional?: Partial<Template>\r\n  ): void => {\r\n    const composedMixin: Partial<Template> = {}\r\n    \r\n    // 合并所有混入\r\n    mixinIds.forEach(mixinId => {\r\n      const mixin = get(mixinId)\r\n      if (mixin) {\r\n        Object.assign(composedMixin, mixin)\r\n      }\r\n    })\r\n    \r\n    // 添加额外配置\r\n    if (additional) {\r\n      Object.assign(composedMixin, additional)\r\n    }\r\n    \r\n    register(id, composedMixin)\r\n  }\r\n  \r\n  /**\r\n   * 检查混入是否存在\r\n   */\r\n  const has = (id: string): boolean => {\r\n    return mixins.has(id)\r\n  }\r\n  \r\n  /**\r\n   * 获取所有混入\r\n   */\r\n  const getAll = (): Map<string, Partial<Template>> => {\r\n    return mixins\r\n  }\r\n  \r\n  return {\r\n    mixins,\r\n    register,\r\n    get,\r\n    apply,\r\n    compose,\r\n    has,\r\n    getAll\r\n  }\r\n}"],"names":["InheritanceContextKey","Symbol","useTemplateInheritance","template","options","isInherited","ref","inheritanceChain","activeBlocks","reactive","Map","parentContext","inject","context","parent","extends","mixins","mergeStrategy","blocks","depth","provide","processedTemplate","computed","length","createInheritableTemplate","autoRegister","id","inheritanceManager","registerTemplate","enableBlocks","blockOverrides","Object","entries","forEach","name","content","blockManager","overrideBlock","trackChain","chain","push","parentId","unshift","mixin","mixinId","value","watch","newTemplate","immediate","extend","config","extendTemplate","mixinTemplate","createMixin","defineBlock","block","console","warn","set","success","getBlock","undefined","renderBlock","getParent","getMixins","getDepth","cleanup","clearBlocks","clear","useTemplateBlocks","templateId","blockMap","loadBlocks","loadedBlocks","getBlocks","define","override","get","render","has","refresh","useTemplateMixins","register","getMixin","apply","mixinIds","strategy","compose","additional","composedMixin","assign","getAll"],"mappings":"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"}
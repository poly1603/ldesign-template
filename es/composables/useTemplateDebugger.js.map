{"version":3,"file":"useTemplateDebugger.js","sources":["../../src/composables/useTemplateDebugger.ts"],"sourcesContent":["import { computed, onMounted, onUnmounted, reactive, readonly, ref, watch } from 'vue'\nimport { globalAnalytics } from '../utils/templateAnalytics'\n\n/**\n * 调试日志级别\n */\nexport enum DebugLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\n/**\n * 调试日志条目\n */\nexport interface DebugLog {\n  id: string\n  timestamp: number\n  level: DebugLevel\n  message: string\n  data?: any\n  templateId?: string\n  stack?: string\n}\n\n/**\n * 调试器配置\n */\nexport interface DebuggerConfig {\n  enabled?: boolean\n  logLevel?: DebugLevel\n  maxLogs?: number\n  trackLifecycle?: boolean\n  trackProps?: boolean\n  trackState?: boolean\n  showInConsole?: boolean\n}\n\n/**\n * 模板状态快照\n */\nexport interface TemplateStateSnapshot {\n  timestamp: number\n  props?: Record<string, any>\n  state?: Record<string, any>\n  computed?: Record<string, any>\n}\n\n/**\n * 使用模板调试器\n */\nexport function useTemplateDebugger(\n  templateId: string,\n  config: DebuggerConfig = {}\n) {\n  const {\n    enabled = import.meta.env.DEV,\n    // logLevel = DebugLevel.DEBUG, // Not used currently\n    maxLogs = 100,\n    trackLifecycle = true,\n    trackProps = true,\n    trackState = true,\n    showInConsole = true,\n  } = config\n\n  // 日志存储\n  const logs = ref<DebugLog[]>([])\n  \n  // 状态快照\n  const stateSnapshots = ref<TemplateStateSnapshot[]>([])\n  \n  // 性能指标\n  const performanceMetrics = reactive({\n    mountTime: 0,\n    updateCount: 0,\n    lastUpdateTime: 0,\n    totalUpdateTime: 0,\n    averageUpdateTime: 0,\n  })\n\n  // 当前状态\n  const isEnabled = ref(enabled)\n\n  /**\n   * 添加日志\n   */\n  const addLog = (level: DebugLevel, message: string, data?: any, stack?: string) => {\n    if (!isEnabled.value) return\n\n    const log: DebugLog = {\n      id: `${Date.now()}-${Math.random()}`,\n      timestamp: Date.now(),\n      level,\n      message,\n      data,\n      templateId,\n      stack,\n    }\n\n    logs.value.push(log)\n\n    // 限制日志数量\n    if (logs.value.length > maxLogs) {\n      logs.value.shift()\n    }\n\n    // 输出到控制台\n    if (showInConsole) {\n      const consoleMethod = level === DebugLevel.ERROR ? 'error' : \n                           level === DebugLevel.WARN ? 'warn' :\n                           level === DebugLevel.INFO ? 'info' : 'debug'\n      console[consoleMethod](`[${templateId}] ${message}`, data)\n    }\n  }\n\n  /**\n   * 调试方法\n   */\n  const debug = (message: string, data?: any) => {\n    addLog(DebugLevel.DEBUG, message, data)\n  }\n\n  const info = (message: string, data?: any) => {\n    addLog(DebugLevel.INFO, message, data)\n  }\n\n  const warn = (message: string, data?: any) => {\n    addLog(DebugLevel.WARN, message, data)\n  }\n\n  const error = (message: string, data?: any) => {\n    const stack = new Error('Stack trace').stack\n    addLog(DebugLevel.ERROR, message, data, stack)\n  }\n\n  /**\n   * 记录状态快照\n   */\n  const takeSnapshot = (props?: Record<string, any>, state?: Record<string, any>, computed?: Record<string, any>) => {\n    if (!isEnabled.value) return\n\n    stateSnapshots.value.push({\n      timestamp: Date.now(),\n      props,\n      state,\n      computed,\n    })\n\n    // 限制快照数量\n    if (stateSnapshots.value.length > maxLogs) {\n      stateSnapshots.value.shift()\n    }\n\n    debug('State snapshot taken', { props, state, computed })\n  }\n\n  /**\n   * 监听 props 变化\n   */\n  const watchProps = (props: Record<string, import('vue').Ref<any>>) => {\n    if (!trackProps || !isEnabled.value) return\n\n    Object.entries(props).forEach(([key, value]) => {\n      watch(\n        value,\n        (newVal, oldVal) => {\n          debug(`Prop \"${key}\" changed`, { oldVal, newVal })\n        },\n        { deep: true }\n      )\n    })\n  }\n\n  /**\n   * 监听状态变化\n   */\n  const watchState = (state: Record<string, import('vue').Ref<any>>) => {\n    if (!trackState || !isEnabled.value) return\n\n    Object.entries(state).forEach(([key, value]) => {\n      watch(\n        value,\n        (newVal, oldVal) => {\n          debug(`State \"${key}\" changed`, { oldVal, newVal })\n        },\n        { deep: true }\n      )\n    })\n  }\n\n  /**\n   * 测量性能\n   */\n  const measurePerformance = (label: string, fn: () => void | Promise<void>) => {\n    if (!isEnabled.value) {\n      return fn()\n    }\n\n    const startTime = performance.now()\n    \n    const result = fn()\n    \n    if (result instanceof Promise) {\n      return result.then(() => {\n        const duration = performance.now() - startTime\n        debug(`${label} took ${duration.toFixed(2)}ms`)\n        globalAnalytics.trackRender(templateId, templateId, duration)\n      })\n    } else {\n      const duration = performance.now() - startTime\n      debug(`${label} took ${duration.toFixed(2)}ms`)\n      globalAnalytics.trackRender(templateId, templateId, duration)\n    }\n  }\n\n  /**\n   * 生命周期钩子\n   */\n  const lifecycleHooks = {\n    onBeforeMount() {\n      if (trackLifecycle) info('Component before mount')\n    },\n    onMounted() {\n      if (trackLifecycle) {\n        const mountTime = performance.now()\n        performanceMetrics.mountTime = mountTime\n        info('Component mounted', { mountTime })\n      }\n    },\n    onBeforeUpdate() {\n      if (trackLifecycle) {\n        performanceMetrics.lastUpdateTime = performance.now()\n        debug('Component before update')\n      }\n    },\n    onUpdated() {\n      if (trackLifecycle) {\n        const updateTime = performance.now() - performanceMetrics.lastUpdateTime\n        performanceMetrics.updateCount++\n        performanceMetrics.totalUpdateTime += updateTime\n        performanceMetrics.averageUpdateTime = \n          performanceMetrics.totalUpdateTime / performanceMetrics.updateCount\n        debug('Component updated', {\n          updateTime: `${updateTime.toFixed(2)}ms`,\n          updateCount: performanceMetrics.updateCount,\n        })\n      }\n    },\n    onBeforeUnmount() {\n      if (trackLifecycle) info('Component before unmount')\n    },\n    onUnmounted() {\n      if (trackLifecycle) info('Component unmounted')\n    },\n  }\n\n  /**\n   * 获取日志\n   */\n  const getLogs = (level?: DebugLevel) => {\n    if (level) {\n      return logs.value.filter((log) => log.level === level)\n    }\n    return logs.value\n  }\n\n  /**\n   * 清除日志\n   */\n  const clearLogs = () => {\n    logs.value = []\n  }\n\n  /**\n   * 导出日志\n   */\n  const exportLogs = (format: 'json' | 'csv' = 'json') => {\n    if (format === 'json') {\n      return JSON.stringify({\n        templateId,\n        logs: logs.value,\n        snapshots: stateSnapshots.value,\n        performance: performanceMetrics,\n        exportedAt: new Date().toISOString(),\n      }, null, 2)\n    }\n\n    // CSV 格式\n    const headers = ['Timestamp', 'Level', 'Message', 'Data']\n    const rows = logs.value.map((log) => [\n      new Date(log.timestamp).toISOString(),\n      log.level,\n      log.message,\n      JSON.stringify(log.data || {}),\n    ])\n\n    return [headers, ...rows].map((row) => row.join(',')).join('\\n')\n  }\n\n  /**\n   * 启用/禁用调试器\n   */\n  const enable = () => {\n    isEnabled.value = true\n    info('Debugger enabled')\n  }\n\n  const disable = () => {\n    isEnabled.value = false\n  }\n\n  // 组件挂载时的初始化\n  onMounted(() => {\n    if (isEnabled.value) {\n      lifecycleHooks.onMounted()\n    }\n  })\n\n  onUnmounted(() => {\n    if (isEnabled.value) {\n      lifecycleHooks.onUnmounted()\n    }\n  })\n\n  return {\n    // 状态\n    isEnabled,\n    logs: computed(() => logs.value),\n    stateSnapshots: computed(() => stateSnapshots.value),\n    performanceMetrics: readonly(performanceMetrics),\n\n    // 日志方法\n    debug,\n    info,\n    warn,\n    error,\n\n    // 功能方法\n    takeSnapshot,\n    watchProps,\n    watchState,\n    measurePerformance,\n\n    // 生命周期\n    lifecycleHooks,\n\n    // 工具方法\n    getLogs,\n    clearLogs,\n    exportLogs,\n    enable,\n    disable,\n  }\n}\n\n/**\n * 全局调试器管理\n */\nclass GlobalDebuggerManager {\n  private debuggers = new Map<string, ReturnType<typeof useTemplateDebugger>>()\n\n  register(templateId: string, templateDebugger: ReturnType<typeof useTemplateDebugger>) {\n    this.debuggers.set(templateId, templateDebugger)\n  }\n\n  unregister(templateId: string) {\n    this.debuggers.delete(templateId)\n  }\n\n  get(templateId: string) {\n    return this.debuggers.get(templateId)\n  }\n\n  getAll() {\n    return Array.from(this.debuggers.entries())\n  }\n\n  clearAll() {\n    this.debuggers.forEach((templateDebugger) => templateDebugger.clearLogs())\n  }\n\n  disableAll() {\n    this.debuggers.forEach((templateDebugger) => templateDebugger.disable())\n  }\n\n  enableAll() {\n    this.debuggers.forEach((templateDebugger) => templateDebugger.enable())\n  }\n\n  exportAll() {\n    const data: Record<string, any> = {}\n    this.debuggers.forEach((templateDebugger, id) => {\n      data[id] = JSON.parse(templateDebugger.exportLogs())\n    })\n    return JSON.stringify(data, null, 2)\n  }\n}\n\nexport const globalDebuggerManager = new GlobalDebuggerManager()\n\n/**\n * 创建调试面板数据\n */\nexport function createDebugPanelData() {\n  const templates = computed(() => globalDebuggerManager.getAll())\n  const totalLogs = computed(() => {\n    return templates.value.reduce((sum, [_, templateDebugger]) => sum + templateDebugger.logs.value.length, 0)\n  })\n\n  return {\n    templates,\n    totalLogs,\n    clearAll: () => globalDebuggerManager.clearAll(),\n    exportAll: () => globalDebuggerManager.exportAll(),\n  }\n}\n"],"names":["DebugLevel","useTemplateDebugger","templateId","config","enabled","import","env","DEV","maxLogs","trackLifecycle","trackProps","trackState","showInConsole","logs","ref","stateSnapshots","performanceMetrics","reactive","mountTime","updateCount","lastUpdateTime","totalUpdateTime","averageUpdateTime","isEnabled","addLog","level","message","data","stack","value","log","id","Date","now","Math","random","timestamp","push","length","shift","consoleMethod","ERROR","WARN","INFO","console","debug","DEBUG","info","warn","error","Error","takeSnapshot","props","state","computed","watchProps","Object","entries","forEach","key","watch","newVal","oldVal","deep","watchState","measurePerformance","label","fn","startTime","performance","result","Promise","then","duration","toFixed","globalAnalytics","trackRender","lifecycleHooks","onBeforeMount","onMounted","onBeforeUpdate","onUpdated","updateTime","onBeforeUnmount","onUnmounted","getLogs","filter","clearLogs","exportLogs","format","JSON","stringify","snapshots","exportedAt","toISOString","headers","rows","map","row","join","enable","disable","readonly","GlobalDebuggerManager","constructor","debuggers","Map","register","templateDebugger","set","unregister","delete","get","getAll","Array","from","clearAll","disableAll","enableAll","exportAll","parse","globalDebuggerManager","createDebugPanelData","templates","totalLogs","reduce","sum","_"],"mappings":"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"}
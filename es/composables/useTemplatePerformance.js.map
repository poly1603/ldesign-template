{"version":3,"file":"useTemplatePerformance.js","sources":["../../src/composables/useTemplatePerformance.ts"],"sourcesContent":["/**\n * 模板性能监控\n */\n\nimport { onMounted, onUnmounted, reactive, readonly, ref } from 'vue'\n\n/**\n * 性能监控 composable\n */\nimport { ObjectPool } from '../utils/objectPool'\n\nexport interface PerformanceMetrics {\n  renderTime: number\n  loadTime: number\n  updateTime: number\n  componentCount: number\n  domNodes: number\n  memory?: number\n  fps?: number\n}\n\nexport interface PerformanceEntry {\n  name: string\n  startTime: number\n  duration: number\n  type: 'measure' | 'mark' | 'navigation' | 'resource'\n  details?: any\n}\n\nexport interface MemoryInfo {\n  value: number\n  limit: number\n  used: number\n  available: number\n  usagePercent: number\n}\n\n// 对象池用于复用PerformanceEntry\nconst entryPool = new ObjectPool<PerformanceEntry>({\n  maxSize: 50,\n  factory: () => ({\n    name: '',\n    startTime: 0,\n    duration: 0,\n    type: 'measure' as const\n  }),\n  reset: (entry) => {\n    entry.name = ''\n    entry.startTime = 0\n    entry.duration = 0\n    entry.type = 'measure'\n    entry.details = undefined\n  }\n})\n\nexport function useTemplatePerformance(templateId: string) {\n  // 性能指标\n  const metrics = reactive<PerformanceMetrics>({\n    renderTime: 0,\n    loadTime: 0,\n    updateTime: 0,\n    componentCount: 0,\n    domNodes: 0,\n    memory: 0,\n    fps: 0\n  })\n\n  // 性能条目 - 限制数组大小\n  const entries = ref<PerformanceEntry[]>([])\n  const MAX_ENTRIES = 100\n\n  // 内存信息\n  const memory = reactive<MemoryInfo>({\n    value: 0,\n    limit: 0,\n    used: 0,\n    available: 0,\n    usagePercent: 0\n  })\n\n  // FPS 监控 - 使用环形缓冲区\n  const FPS_HISTORY_SIZE = 60\n  const fpsHistory = ref<number[]>(Array.from({length: FPS_HISTORY_SIZE}, () => 0))\n  let fpsIndex = 0\n  let rafId: number | null = null\n  let lastTime = 0\n  let intervalId: number | null = null\n\n  /**\n   * 开始测量\n   */\n  const startMeasure = (name: string) => {\n    if (window.performance && window.performance.mark) {\n      window.performance.mark(`${name}-start`)\n    }\n  }\n\n  /**\n   * 结束测量\n   */\n  const endMeasure = (name: string) => {\n    if (window.performance && window.performance.mark && window.performance.measure) {\n      const endMark = `${name}-end`\n      const startMark = `${name}-start`\n      \n      window.performance.mark(endMark)\n      \n      try {\n        window.performance.measure(name, startMark, endMark)\n        \n        const measures = window.performance.getEntriesByName(name, 'measure')\n        if (measures.length > 0) {\n          const measure = measures[measures.length - 1]\n          \n          const entry = entryPool.acquire()\n          entry.name = name\n          entry.startTime = measure.startTime\n          entry.duration = measure.duration\n          entry.type = 'measure'\n          \n          // 使用环形缓冲区避免频繁的数组操作\n          if (entries.value.length >= MAX_ENTRIES) {\n            const removed = entries.value.shift()\n            if (removed) entryPool.release(removed)\n          }\n          entries.value.push(entry)\n          \n          // 更新指标\n          if (name.includes('render')) {\n            metrics.renderTime = Math.round(measure.duration)\n          } else if (name.includes('load')) {\n            metrics.loadTime = Math.round(measure.duration)\n          } else if (name.includes('update')) {\n            metrics.updateTime = Math.round(measure.duration)\n          }\n        }\n        \n        // 清理标记\n        window.performance.clearMarks(startMark)\n        window.performance.clearMarks(endMark)\n        window.performance.clearMeasures(name)\n      } catch (err) {\n        console.warn('Performance measure failed:', err)\n      }\n    }\n  }\n\n  /**\n   * 测量函数执行时间\n   */\n  const measure = async <T>(name: string, fn: () => T | Promise<T>): Promise<T> => {\n    startMeasure(name)\n    \n    try {\n      const result = await fn()\n      return result\n    } finally {\n      endMeasure(name)\n    }\n  }\n\n  /**\n   * 更新内存信息\n   */\n  const updateMemory = () => {\n    if ('memory' in performance) {\n      const memoryInfo = (performance as any).memory\n      \n      memory.used = memoryInfo.usedJSHeapSize\n      memory.limit = memoryInfo.jsHeapSizeLimit\n      memory.available = memory.limit - memory.used\n      memory.usagePercent = (memory.used / memory.limit) * 100\n      memory.value = memory.used\n      \n      metrics.memory = Math.round(memory.used / 1024 / 1024) // MB\n    }\n  }\n\n  /**\n   * 计算 FPS\n   */\n  const calculateFPS = (timestamp: number) => {\n    if (!lastTime) {\n      lastTime = timestamp\n      rafId = requestAnimationFrame(calculateFPS)\n      return\n    }\n\n    const delta = timestamp - lastTime\n    const fps = Math.round(1000 / delta)\n    \n    // 使用环形缓冲区\n    fpsHistory.value[fpsIndex] = fps\n    fpsIndex = (fpsIndex + 1) % FPS_HISTORY_SIZE\n    \n    // 计算平均FPS - 更高效的算法\n    let sum = 0\n    let count = 0\n    for (let i = 0; i < FPS_HISTORY_SIZE; i++) {\n      if (fpsHistory.value[i] > 0) {\n        sum += fpsHistory.value[i]\n        count++\n      }\n    }\n    metrics.fps = count > 0 ? Math.round(sum / count) : 0\n    \n    lastTime = timestamp\n    rafId = requestAnimationFrame(calculateFPS)\n  }\n\n  /**\n   * 开始 FPS 监控\n   */\n  const startFPSMonitoring = () => {\n    if (!rafId) {\n      rafId = requestAnimationFrame(calculateFPS)\n    }\n  }\n\n  /**\n   * 停止 FPS 监控\n   */\n  const stopFPSMonitoring = () => {\n    if (rafId) {\n      cancelAnimationFrame(rafId)\n      rafId = null\n      lastTime = 0\n    }\n  }\n\n  /**\n   * 统计 DOM 节点数\n   */\n  const countDOMNodes = () => {\n    metrics.domNodes = document.getElementsByTagName('*').length\n  }\n\n  /**\n   * 获取导航性能数据\n   */\n  const getNavigationTiming = () => {\n    if (window.performance && window.performance.timing) {\n      const timing = window.performance.timing\n      \n      return {\n        dnsLookup: timing.domainLookupEnd - timing.domainLookupStart,\n        tcpConnection: timing.connectEnd - timing.connectStart,\n        request: timing.responseStart - timing.requestStart,\n        response: timing.responseEnd - timing.responseStart,\n        domProcessing: timing.domComplete - timing.domLoading,\n        domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,\n        pageLoad: timing.loadEventEnd - timing.navigationStart\n      }\n    }\n    \n    return null\n  }\n\n  /**\n   * 获取资源加载性能\n   */\n  const getResourceTiming = () => {\n    if (window.performance && window.performance.getEntriesByType) {\n      const resources = window.performance.getEntriesByType('resource')\n      \n      return resources.map(resource => ({\n        name: resource.name,\n        type: (resource as any).initiatorType,\n        duration: Math.round(resource.duration),\n        size: (resource as any).transferSize || 0,\n        startTime: Math.round(resource.startTime)\n      }))\n    }\n    \n    return []\n  }\n\n  /**\n   * 清除性能数据\n   */\n  const clear = () => {\n    // 释放对象池中的对象\n    entries.value.forEach(entry => entryPool.release(entry))\n    entries.value = []\n    fpsHistory.value.fill(0)\n    fpsIndex = 0\n    \n    // 重置指标\n    metrics.renderTime = 0\n    metrics.loadTime = 0\n    metrics.updateTime = 0\n    metrics.componentCount = 0\n    metrics.domNodes = 0\n    metrics.memory = 0\n    metrics.fps = 0\n  }\n\n  /**\n   * 获取性能指标\n   */\n  const getMetrics = () => {\n    countDOMNodes()\n    updateMemory()\n    \n    return {\n      ...metrics,\n      navigationTiming: getNavigationTiming(),\n      resourceTiming: getResourceTiming(),\n      entries: entries.value\n    }\n  }\n\n  /**\n   * 生成性能报告\n   */\n  const generateReport = () => {\n    const report = {\n      templateId,\n      timestamp: Date.now(),\n      metrics: getMetrics(),\n      memory: { ...memory },\n      fps: {\n        current: metrics.fps,\n        history: [...fpsHistory.value],\n        average: Math.round(\n          fpsHistory.value.reduce((a, b) => a + b, 0) / fpsHistory.value.length\n        )\n      }\n    }\n    \n    return report\n  }\n\n  /**\n   * 导出性能数据\n   */\n  const exportData = (format: 'json' | 'csv' = 'json') => {\n    const report = generateReport()\n    \n    if (format === 'json') {\n      return JSON.stringify(report, null, 2)\n    }\n    \n    // CSV 格式\n    const rows = [\n      ['Metric', 'Value'],\n      ['Render Time', `${metrics.renderTime}ms`],\n      ['Load Time', `${metrics.loadTime}ms`],\n      ['Update Time', `${metrics.updateTime}ms`],\n      ['Component Count', String(metrics.componentCount)],\n      ['DOM Nodes', String(metrics.domNodes)],\n      ['Memory Usage', `${metrics.memory}MB`],\n      ['FPS', String(metrics.fps)]\n    ]\n    \n    return rows.map(row => row.join(',')).join('\\n')\n  }\n\n  // 生命周期\n  onMounted(() => {\n    startFPSMonitoring()\n    updateMemory()\n    countDOMNodes()\n    \n    // 定期更新\n    intervalId = window.setInterval(() => {\n      updateMemory()\n      countDOMNodes()\n    }, 1000)\n  })\n\n  onUnmounted(() => {\n    if (intervalId) {\n      clearInterval(intervalId)\n      intervalId = null\n    }\n    stopFPSMonitoring()\n    // 清理对象池\n    entries.value.forEach(entry => entryPool.release(entry))\n    entries.value = []\n  })\n\n  return {\n    // 状态\n    metrics: readonly(metrics),\n    entries: readonly(entries),\n    memory: readonly(memory),\n    fpsHistory: readonly(fpsHistory),\n    \n    // 方法\n    startMeasure,\n    endMeasure,\n    measure,\n    clear,\n    getMetrics,\n    generateReport,\n    exportData,\n    \n    // FPS 监控\n    startFPSMonitoring,\n    stopFPSMonitoring,\n    \n    // 工具\n    updateMemory,\n    countDOMNodes,\n    getNavigationTiming,\n    getResourceTiming\n  }\n}"],"names":["entryPool","ObjectPool","maxSize","factory","name","startTime","duration","type","reset","entry","details","undefined","useTemplatePerformance","templateId","metrics","reactive","renderTime","loadTime","updateTime","componentCount","domNodes","memory","fps","entries","ref","MAX_ENTRIES","value","limit","used","available","usagePercent","FPS_HISTORY_SIZE","fpsHistory","Array","from","length","fpsIndex","rafId","lastTime","intervalId","startMeasure","window","performance","mark","endMeasure","measure","endMark","startMark","measures","getEntriesByName","acquire","removed","shift","release","push","includes","Math","round","clearMarks","clearMeasures","err","console","warn","fn","result","updateMemory","memoryInfo","usedJSHeapSize","jsHeapSizeLimit","calculateFPS","timestamp","requestAnimationFrame","delta","sum","count","i","startFPSMonitoring","stopFPSMonitoring","cancelAnimationFrame","countDOMNodes","document","getElementsByTagName","getNavigationTiming","timing","dnsLookup","domainLookupEnd","domainLookupStart","tcpConnection","connectEnd","connectStart","request","responseStart","requestStart","response","responseEnd","domProcessing","domComplete","domLoading","domContentLoaded","domContentLoadedEventEnd","navigationStart","pageLoad","loadEventEnd","getResourceTiming","getEntriesByType","resources","map","resource","initiatorType","size","transferSize","clear","forEach","fill","getMetrics","navigationTiming","resourceTiming","generateReport","report","Date","now","current","history","average","reduce","a","b","exportData","format","JSON","stringify","rows","String","row","join","onMounted","setInterval","onUnmounted","clearInterval","readonly"],"mappings":"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"}
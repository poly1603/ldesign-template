{"version":3,"file":"useTemplateSnapshot.js","sources":["../../src/composables/useTemplateSnapshot.ts"],"sourcesContent":["import { computed, onUnmounted, ref, type Ref, watch } from 'vue'\n\n/**\n * 快照数据结构\n */\nexport interface TemplateSnapshot<T = any> {\n  id: string\n  timestamp: number\n  data: T\n  metadata?: Record<string, any>\n  description?: string\n  tags?: string[]\n}\n\n/**\n * 快照配置\n */\nexport interface SnapshotOptions {\n  maxSnapshots?: number // 最大快照数量\n  autoSave?: boolean // 自动保存\n  autoSaveInterval?: number // 自动保存间隔（毫秒）\n  compressOldSnapshots?: boolean // 压缩旧快照\n  storageKey?: string // 本地存储键名\n  enablePersistence?: boolean // 启用持久化\n}\n\n/**\n * 时间旅行操作\n */\nexport interface TimeTravel {\n  canUndo: boolean\n  canRedo: boolean\n  undo: () => void\n  redo: () => void\n  goto: (snapshotId: string) => void\n  reset: () => void\n}\n\n/**\n * 使用模板快照\n */\nexport function useTemplateSnapshot<T = any>(\n  initialData: T | Ref<T>,\n  options: SnapshotOptions = {}\n) {\n  const {\n    maxSnapshots = 50,\n    autoSave = false,\n    autoSaveInterval = 5000,\n    compressOldSnapshots = false,\n    storageKey = 'template-snapshots',\n    enablePersistence = false,\n  } = options\n\n  // 当前数据\n  const currentData = ref(initialData) as Ref<T>\n  \n  // 快照历史\n  const snapshots = ref<TemplateSnapshot<T>[]>([])\n  \n  // 当前快照索引\n  const currentSnapshotIndex = ref(-1)\n  \n  // 是否正在应用快照（避免触发 watch）\n  const isApplyingSnapshot = ref(false)\n\n  // 计算属性\n  const canUndo = computed(() => currentSnapshotIndex.value > 0)\n  const canRedo = computed(() => currentSnapshotIndex.value < snapshots.value.length - 1)\n  const currentSnapshot = computed(() => snapshots.value[currentSnapshotIndex.value] || null)\n  const snapshotCount = computed(() => snapshots.value.length)\n\n  /**\n   * 生成快照ID\n   */\n  const generateSnapshotId = () => {\n    return `snapshot-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * 深拷贝数据\n   */\n  const deepClone = <U>(data: U): U => {\n    return JSON.parse(JSON.stringify(data))\n  }\n\n  /**\n   * 压缩快照（简单实现：只保留数据的差异）\n   */\n  const compressSnapshot = (snapshot: TemplateSnapshot<T>): TemplateSnapshot<T> => {\n    if (!compressOldSnapshots) return snapshot\n    \n    // 简单压缩：如果是旧快照，可以删除一些不必要的元数据\n    if (snapshots.value.length > maxSnapshots / 2) {\n      // eslint-disable-next-line ts/no-unused-vars\n      const { metadata, ...compressed } = snapshot\n      return compressed as TemplateSnapshot<T>\n    }\n    \n    return snapshot\n  }\n\n  /**\n   * 保存快照到本地存储\n   */\n  const persistSnapshots = () => {\n    if (!enablePersistence) return\n    \n    try {\n      const data = {\n        snapshots: snapshots.value,\n        currentIndex: currentSnapshotIndex.value,\n      }\n      localStorage.setItem(storageKey, JSON.stringify(data))\n    } catch (error) {\n      console.error('Failed to persist snapshots:', error)\n    }\n  }\n\n  /**\n   * 从本地存储恢复快照\n   */\n  const restoreSnapshots = () => {\n    if (!enablePersistence) return\n    \n    try {\n      const stored = localStorage.getItem(storageKey)\n      if (stored) {\n        const data = JSON.parse(stored)\n        snapshots.value = data.snapshots || []\n        currentSnapshotIndex.value = data.currentIndex ?? -1\n        \n        // 恢复当前数据\n        if (currentSnapshotIndex.value >= 0 && snapshots.value[currentSnapshotIndex.value]) {\n          currentData.value = deepClone(snapshots.value[currentSnapshotIndex.value].data) as T\n        }\n      }\n    } catch (error) {\n      console.error('Failed to restore snapshots:', error)\n    }\n  }\n\n  /**\n   * 创建快照\n   */\n  const takeSnapshot = (description?: string, metadata?: Record<string, any>, tags?: string[]) => {\n    if (isApplyingSnapshot.value) return\n\n    const snapshot: TemplateSnapshot<T> = {\n      id: generateSnapshotId(),\n      timestamp: Date.now(),\n      data: deepClone(currentData.value),\n      description,\n      metadata,\n      tags,\n    }\n\n    // 如果当前不在最新快照位置，删除后面的快照\n    if (currentSnapshotIndex.value < snapshots.value.length - 1) {\n      snapshots.value = snapshots.value.slice(0, currentSnapshotIndex.value + 1)\n    }\n\n    // 添加新快照\n    snapshots.value.push(compressSnapshot(snapshot) as any)\n    currentSnapshotIndex.value = snapshots.value.length - 1\n\n    // 限制快照数量\n    if (snapshots.value.length > maxSnapshots) {\n      const removeCount = snapshots.value.length - maxSnapshots\n      snapshots.value = snapshots.value.slice(removeCount)\n      currentSnapshotIndex.value -= removeCount\n    }\n\n    persistSnapshots()\n\n    return snapshot\n  }\n\n  /**\n   * 应用快照\n   */\n  const applySnapshot = (snapshot: TemplateSnapshot<T>) => {\n    isApplyingSnapshot.value = true\n    currentData.value = deepClone(snapshot.data) as T\n    \n    // 使用 nextTick 确保数据已更新\n    setTimeout(() => {\n      isApplyingSnapshot.value = false\n    }, 0)\n  }\n\n  /**\n   * 撤销\n   */\n  const undo = () => {\n    if (!canUndo.value) return\n\n    currentSnapshotIndex.value--\n    const snapshot = snapshots.value[currentSnapshotIndex.value]\n    if (snapshot) {\n      applySnapshot(snapshot as any)\n    }\n  }\n\n  /**\n   * 重做\n   */\n  const redo = () => {\n    if (!canRedo.value) return\n\n    currentSnapshotIndex.value++\n    const snapshot = snapshots.value[currentSnapshotIndex.value]\n    if (snapshot) {\n      applySnapshot(snapshot as any)\n    }\n  }\n\n  /**\n   * 跳转到指定快照\n   */\n  const goto = (snapshotId: string) => {\n    const index = snapshots.value.findIndex((s) => s.id === snapshotId)\n    if (index === -1) {\n      console.warn(`Snapshot not found: ${snapshotId}`)\n      return\n    }\n\n    currentSnapshotIndex.value = index\n    applySnapshot(snapshots.value[index] as any)\n  }\n\n  /**\n   * 跳转到指定索引\n   */\n  const gotoIndex = (index: number) => {\n    if (index < 0 || index >= snapshots.value.length) {\n      console.warn(`Invalid snapshot index: ${index}`)\n      return\n    }\n\n    currentSnapshotIndex.value = index\n    applySnapshot(snapshots.value[index] as any)\n  }\n\n  /**\n   * 重置到初始状态\n   */\n  const reset = () => {\n    snapshots.value = []\n    currentSnapshotIndex.value = -1\n    currentData.value = (deepClone(initialData) as T) || (initialData as any)\n    persistSnapshots()\n  }\n\n  /**\n   * 清除所有快照\n   */\n  const clearSnapshots = () => {\n    snapshots.value = []\n    currentSnapshotIndex.value = -1\n    persistSnapshots()\n  }\n\n  /**\n   * 删除指定快照\n   */\n  const deleteSnapshot = (snapshotId: string) => {\n    const index = snapshots.value.findIndex((s) => s.id === snapshotId)\n    if (index === -1) return\n\n    snapshots.value.splice(index, 1)\n    \n    // 调整当前索引\n    if (currentSnapshotIndex.value > index) {\n      currentSnapshotIndex.value--\n    } else if (currentSnapshotIndex.value === index) {\n      // 如果删除的是当前快照，跳转到前一个\n      if (currentSnapshotIndex.value > 0) {\n        currentSnapshotIndex.value--\n        applySnapshot(snapshots.value[currentSnapshotIndex.value] as any)\n      } else if (snapshots.value.length > 0) {\n        applySnapshot(snapshots.value[0] as any)\n      }\n    }\n\n    persistSnapshots()\n  }\n\n  /**\n   * 获取快照列表\n   */\n  const getSnapshots = () => {\n    return snapshots.value.map((snapshot) => ({\n      id: snapshot.id,\n      timestamp: snapshot.timestamp,\n      description: snapshot.description,\n      tags: snapshot.tags,\n      isCurrent: snapshot.id === currentSnapshot.value?.id,\n    }))\n  }\n\n  /**\n   * 搜索快照\n   */\n  const searchSnapshots = (query: {\n    tags?: string[]\n    startTime?: number\n    endTime?: number\n    description?: string\n  }) => {\n    return snapshots.value.filter((snapshot) => {\n      if (query.tags && query.tags.length > 0) {\n        if (!snapshot.tags?.some((tag) => query.tags!.includes(tag))) {\n          return false\n        }\n      }\n      \n      if (query.startTime && snapshot.timestamp < query.startTime) {\n        return false\n      }\n      \n      if (query.endTime && snapshot.timestamp > query.endTime) {\n        return false\n      }\n      \n      if (query.description && snapshot.description) {\n        if (!snapshot.description.toLowerCase().includes(query.description.toLowerCase())) {\n          return false\n        }\n      }\n      \n      return true\n    })\n  }\n\n  /**\n   * 比较两个快照\n   */\n  const compareSnapshots = (snapshotId1: string, snapshotId2: string) => {\n    const snapshot1 = snapshots.value.find((s) => s.id === snapshotId1)\n    const snapshot2 = snapshots.value.find((s) => s.id === snapshotId2)\n    \n    if (!snapshot1 || !snapshot2) {\n      console.warn('Snapshot not found for comparison')\n      return null\n    }\n\n    // 简单的对象差异比较\n    const getDiff = (obj1: any, obj2: any, path = ''): any[] => {\n      const diffs: any[] = []\n      \n      const keys = new Set([...Object.keys(obj1 || {}), ...Object.keys(obj2 || {})])\n      \n      keys.forEach((key) => {\n        const newPath = path ? `${path}.${key}` : key\n        const val1 = obj1?.[key]\n        const val2 = obj2?.[key]\n        \n        if (typeof val1 === 'object' && typeof val2 === 'object') {\n          diffs.push(...getDiff(val1, val2, newPath))\n        } else if (val1 !== val2) {\n          diffs.push({\n            path: newPath,\n            oldValue: val1,\n            newValue: val2,\n          })\n        }\n      })\n      \n      return diffs\n    }\n\n    return {\n      snapshot1: { id: snapshot1.id, timestamp: snapshot1.timestamp },\n      snapshot2: { id: snapshot2.id, timestamp: snapshot2.timestamp },\n      differences: getDiff(snapshot1.data, snapshot2.data),\n    }\n  }\n\n  /**\n   * 导出快照\n   */\n  const exportSnapshots = (format: 'json' | 'csv' = 'json') => {\n    if (format === 'json') {\n      return JSON.stringify({\n        snapshots: snapshots.value,\n        currentIndex: currentSnapshotIndex.value,\n        exportedAt: new Date().toISOString(),\n      }, null, 2)\n    }\n    \n    // CSV 导出（简化版本）\n    const headers = ['ID', 'Timestamp', 'Description', 'Tags']\n    const rows = snapshots.value.map((s) => [\n      s.id,\n      new Date(s.timestamp).toISOString(),\n      s.description || '',\n      (s.tags || []).join(';'),\n    ])\n    \n    return [headers, ...rows].map((row) => row.join(',')).join('\\n')\n  }\n\n  /**\n   * 导入快照\n   */\n  const importSnapshots = (data: string) => {\n    try {\n      const imported = JSON.parse(data)\n      snapshots.value = imported.snapshots || []\n      currentSnapshotIndex.value = imported.currentIndex ?? -1\n      \n      if (currentSnapshotIndex.value >= 0 && snapshots.value[currentSnapshotIndex.value]) {\n        applySnapshot(snapshots.value[currentSnapshotIndex.value] as any)\n      }\n      \n      persistSnapshots()\n      return true\n    } catch (error) {\n      console.error('Failed to import snapshots:', error)\n      return false\n    }\n  }\n\n  // 初始化\n  if (enablePersistence) {\n    restoreSnapshots()\n  } else {\n    // 创建初始快照\n    takeSnapshot('Initial state', { isInitial: true })\n  }\n\n  // 自动保存\n  let autoSaveTimer: ReturnType<typeof setInterval> | null = null\n  if (autoSave) {\n    autoSaveTimer = setInterval(() => {\n      takeSnapshot('Auto save', { isAutoSave: true })\n    }, autoSaveInterval)\n  }\n\n  // 监听数据变化（可选）\n  const unwatch = watch(\n    currentData,\n    () => {\n      // 可以在这里添加自动创建快照的逻辑\n    },\n    { deep: true }\n  )\n\n  // 清理\n  const cleanup = () => {\n    if (autoSaveTimer) {\n      clearInterval(autoSaveTimer)\n      autoSaveTimer = null\n    }\n    unwatch()\n  }\n\n  // 组件卸载时自动清理\n  onUnmounted(cleanup)\n\n  return {\n    // 状态\n    currentData,\n    snapshots: computed(() => snapshots.value),\n    currentSnapshot,\n    currentSnapshotIndex: computed(() => currentSnapshotIndex.value),\n    snapshotCount,\n    \n    // 时间旅行\n    canUndo,\n    canRedo,\n    undo,\n    redo,\n    goto,\n    gotoIndex,\n    reset,\n    \n    // 快照管理\n    takeSnapshot,\n    clearSnapshots,\n    deleteSnapshot,\n    getSnapshots,\n    searchSnapshots,\n    compareSnapshots,\n    \n    // 导入导出\n    exportSnapshots,\n    importSnapshots,\n    \n    // 工具\n    cleanup,\n  }\n}\n\n/**\n * 使用时间旅行（简化版）\n */\nexport function useTimeTravel<T = any>(initialData: T | Ref<T>, options: SnapshotOptions = {}) {\n  const snapshot = useTemplateSnapshot(initialData, options)\n  \n  return {\n    data: snapshot.currentData,\n    canUndo: snapshot.canUndo,\n    canRedo: snapshot.canRedo,\n    undo: snapshot.undo,\n    redo: snapshot.redo,\n    goto: snapshot.goto,\n    reset: snapshot.reset,\n    takeSnapshot: snapshot.takeSnapshot,\n  }\n}\n"],"names":["useTemplateSnapshot","initialData","options","maxSnapshots","autoSave","autoSaveInterval","compressOldSnapshots","storageKey","enablePersistence","currentData","ref","snapshots","currentSnapshotIndex","isApplyingSnapshot","canUndo","computed","value","canRedo","length","currentSnapshot","snapshotCount","generateSnapshotId","Date","now","Math","random","toString","substr","deepClone","data","JSON","parse","stringify","compressSnapshot","snapshot","metadata","compressed","persistSnapshots","currentIndex","localStorage","setItem","error","console","restoreSnapshots","stored","getItem","takeSnapshot","description","tags","id","timestamp","slice","push","removeCount","applySnapshot","setTimeout","undo","redo","goto","snapshotId","index","findIndex","s","warn","gotoIndex","reset","clearSnapshots","deleteSnapshot","splice","getSnapshots","map","isCurrent","searchSnapshots","query","filter","some","tag","includes","startTime","endTime","toLowerCase","compareSnapshots","snapshotId1","snapshotId2","snapshot1","find","snapshot2","getDiff","obj1","obj2","path","diffs","keys","Set","Object","forEach","key","newPath","val1","val2","oldValue","newValue","differences","exportSnapshots","format","exportedAt","toISOString","headers","rows","join","row","importSnapshots","imported","isInitial","autoSaveTimer","setInterval","isAutoSave","unwatch","watch","deep","cleanup","clearInterval","onUnmounted","useTimeTravel"],"mappings":"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"}
{"version":3,"file":"createPlugin.cjs","sources":["../../src/plugin/createPlugin.ts"],"sourcesContent":["/**\r\n * @ldesign/template - Plugin System\r\n * \r\n * Template management plugin for Vue 3 applications\r\n */\r\n\r\nimport type { App, Component, ComputedRef, Ref } from 'vue'\r\nimport type { TemplateManagerOptions, TemplateMetadata, TemplateRegistryItem } from '../types'\r\nimport { inject, ref } from 'vue'\r\nimport { TemplateManager } from '../core/manager'\r\nimport { loadStyles } from '../core/style-loader'\r\nimport { getLocale, type TemplateLocale } from '../locales'\r\n\r\n/**\r\n * Template plugin configuration options\r\n */\r\nexport interface TemplatePluginOptions {\r\n  /**\r\n   * Template scan pattern\r\n   * @default '**\\/*.vue'\r\n   */\r\n  pattern?: string\r\n\r\n  /**\r\n   * Base path for template scanning\r\n   * @default '/src/templates'\r\n   */\r\n  basePath?: string\r\n\r\n  /**\r\n   * Enable auto initialization\r\n   * @default true\r\n   */\r\n  autoInit?: boolean\r\n\r\n  /**\r\n   * Enable template preloading\r\n   * @default false\r\n   */\r\n  preload?: boolean\r\n\r\n  /**\r\n   * Preload strategy\r\n   * @default 'lazy'\r\n   */\r\n  preloadStrategy?: 'lazy' | 'eager' | 'smart'\r\n\r\n  /**\r\n   * Cache options\r\n   */\r\n  cache?: {\r\n    enabled?: boolean\r\n    ttl?: number\r\n    maxSize?: number\r\n  }\r\n\r\n  /**\r\n   * Performance monitoring\r\n   * @default false\r\n   */\r\n  performance?: boolean\r\n\r\n  /**\r\n   * Default device type\r\n   * @default 'desktop'\r\n   */\r\n  defaultDevice?: 'desktop' | 'tablet' | 'mobile'\r\n\r\n  /**\r\n   * Auto detect device\r\n   * @default true\r\n   */\r\n  autoDetect?: boolean\r\n\r\n  /**\r\n   * Custom device detection\r\n   */\r\n  detectDevice?: () => 'desktop' | 'tablet' | 'mobile'\r\n\r\n  /**\r\n   * Remember user preferences\r\n   * @default false\r\n   */\r\n  rememberPreferences?: boolean\r\n\r\n  /**\r\n   * Storage key for preferences\r\n   * @default 'ldesign-template-prefs'\r\n   */\r\n  preferencesKey?: string\r\n\r\n  /**\r\n   * 语言设置 - 支持 string 或 Ref<string>\r\n   * 如果传入 Ref，将直接使用（共享模式）\r\n   * 如果传入 string 或不传，将创建新 Ref（独立模式）\r\n   */\r\n  locale?: string | Ref<string>\r\n  \r\n  /**\r\n   * Default locale\r\n   * @default 'zh-CN'\r\n   */\r\n  defaultLocale?: string\r\n  \r\n  /**\r\n   * Hooks\r\n   */\r\n  hooks?: {\r\n    beforeLoad?: (templatePath: string) => void | Promise<void>\r\n    afterLoad?: (templatePath: string, component: Component) => void | Promise<void>\r\n    onError?: (error: Error) => void\r\n  }\r\n}\r\n\r\n/**\r\n * User preferences structure\r\n */\r\nexport interface TemplatePreferences {\r\n  [category: string]: {\r\n    [device: string]: string // template name\r\n  }\r\n}\r\n\r\n/**\r\n * Template plugin instance\r\n */\r\nexport interface TemplatePlugin {\r\n  /**\r\n   * Template manager instance\r\n   */\r\n  manager: TemplateManager\r\n\r\n  /**\r\n   * Plugin options\r\n   */\r\n  options: Required<TemplatePluginOptions>\r\n\r\n  /**\r\n   * Initialize the plugin\r\n   */\r\n  initialize: () => Promise<void>\r\n\r\n  /**\r\n   * Load a template\r\n   */\r\n  loadTemplate: (category: string, device: string, name: string) => Promise<Component>\r\n\r\n  /**\r\n   * Get default template\r\n   */\r\n  getDefaultTemplate: (category: string, device: string) => Promise<TemplateMetadata | null>\r\n\r\n  /**\r\n   * Get preferred template (from user preferences or default)\r\n   */\r\n  getPreferredTemplate: (category: string, device: string) => Promise<{ name: string } | null>\r\n\r\n  /**\r\n   * Save user preference\r\n   */\r\n  savePreference: (category: string, device: string, templateName: string) => void\r\n\r\n  /**\r\n   * Get user preferences\r\n   */\r\n  getPreferences: () => TemplatePreferences\r\n\r\n  /**\r\n   * Clear user preferences\r\n   */\r\n  clearPreferences: () => void\r\n\r\n  /**\r\n   * Scan templates\r\n   */\r\n  scanTemplates: () => Promise<Map<string, TemplateRegistryItem>>\r\n\r\n  /**\r\n   * Clear cache\r\n   */\r\n  clearCache: () => void\r\n\r\n  /**\r\n   * Detect current device\r\n   */\r\n  detectDevice: () => 'desktop' | 'tablet' | 'mobile'\r\n  \r\n  /**\r\n   * Current locale (reactive)\r\n   */\r\n  currentLocale: Ref<string>\r\n  \r\n  /**\r\n   * Current locale messages (computed)\r\n   */\r\n  localeMessages: ComputedRef<TemplateLocale>\r\n\r\n  /**\r\n   * Install the plugin\r\n   */\r\n  install: (app: App) => void\r\n  \r\n  /**\r\n   * Dispose the plugin and clean up resources\r\n   */\r\n  dispose: () => void\r\n}\r\n\r\n/**\r\n * Symbol for plugin injection\r\n */\r\nexport const TemplatePluginSymbol = Symbol('TemplatePlugin')\r\n\r\n/**\r\n * 判断是否为 Ref\r\n */\r\nconst isRef = <T>(v: any): v is Ref<T> => {\r\n  return v && typeof v === 'object' && 'value' in v && '_rawValue' in v\r\n}\r\n\r\n/**\r\n * 智能获取locale\r\n * 支持多种方式：传入值、inject、全局事件\r\n */\r\nfunction useSmartLocale(options: TemplatePluginOptions): { locale: Ref<string>; cleanup: () => void } {\r\n  let eventListener: ((e: Event) => void) | null = null\r\n  \r\n  // 优先级1：使用传入的locale\r\n  if (options.locale) {\r\n    return { \r\n      locale: isRef(options.locale) ? options.locale : ref(options.locale),\r\n      cleanup: () => {} // No cleanup needed for provided locale\r\n    }\r\n  }\r\n  \r\n  // 优先级2：从Vue上下文inject（如果在组件内）\r\n  try {\r\n    const injected = inject<Ref<string>>('app-locale', null)\r\n    if (injected && injected.value) {\r\n      return { locale: injected, cleanup: () => {} }\r\n    }\r\n  } catch {}\r\n  \r\n  // 优先级3：创建独立的locale并监听全局事件\r\n  const locale = ref(options.defaultLocale || 'zh-CN')\r\n  \r\n  // 从localStorage恢复\r\n  if (typeof window !== 'undefined') {\r\n    const stored = localStorage.getItem('app-locale')\r\n    if (stored) {\r\n      locale.value = stored\r\n    }\r\n    \r\n    // 监听全局语言变化事件\r\n    eventListener = (e: Event) => {\r\n      const customEvent = e as CustomEvent<{ locale: string }>\r\n      if (customEvent.detail?.locale) {\r\n        locale.value = customEvent.detail.locale\r\n      }\r\n    }\r\n    window.addEventListener('app:locale-changed', eventListener)\r\n  }\r\n  \r\n  return {\r\n    locale,\r\n    cleanup: () => {\r\n      if (eventListener && typeof window !== 'undefined') {\r\n        window.removeEventListener('app:locale-changed', eventListener)\r\n        eventListener = null\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Default device detection\r\n */\r\nconst defaultDetectDevice = (): 'desktop' | 'tablet' | 'mobile' => {\r\n  if (typeof window === 'undefined') return 'desktop'\r\n  const width = window.innerWidth\r\n  if (width < 768) return 'mobile'\r\n  if (width < 1024) return 'tablet'\r\n  return 'desktop'\r\n}\r\n\r\n/**\r\n * Create template plugin\r\n */\r\nexport function createTemplatePlugin(options: TemplatePluginOptions = {}): TemplatePlugin {\r\n  // 使用智能locale获取\r\n  const { locale: currentLocale, cleanup: localeCleanup } = useSmartLocale(options)\r\n  \r\n  // Plugin disposal state\r\n  let disposed = false\r\n  const cleanupHandlers: (() => void)[] = [localeCleanup]\r\n  let initializeTimeout: NodeJS.Timeout | null = null\r\n  \r\n  // 懒加载 locale 数据（性能优化）\r\n  let localeCache: { key: string; data: any } | null = null\r\n  const getLocaleData = () => {\r\n    if (disposed) return null\r\n    if (!localeCache || localeCache.key !== currentLocale.value) {\r\n      localeCache = { key: currentLocale.value, data: getLocale(currentLocale.value) }\r\n    }\r\n    return localeCache.data\r\n  }\r\n  \r\n  // 兼容旧的 computed 接口\r\n  const localeMessages = {\r\n    get value() { return getLocaleData() }\r\n  } as ComputedRef<TemplateLocale>\r\n  // Merge options with defaults\r\n  const mergedOptions: Required<TemplatePluginOptions> = {\r\n    pattern: options.pattern || '**/*.vue',\r\n    basePath: options.basePath || '/src/templates',\r\n    autoInit: options.autoInit !== false,\r\n    preload: options.preload || false,\r\n    preloadStrategy: options.preloadStrategy || 'lazy',\r\n    cache: {\r\n      enabled: options.cache?.enabled !== false,\r\n      ttl: options.cache?.ttl || 300000, // 5 minutes\r\n      maxSize: options.cache?.maxSize || 50,\r\n    },\r\n    performance: options.performance || false,\r\n    defaultDevice: options.defaultDevice || 'desktop',\r\n    autoDetect: options.autoDetect !== false,\r\n    detectDevice: options.detectDevice || defaultDetectDevice,\r\n    rememberPreferences: options.rememberPreferences || false,\r\n    preferencesKey: options.preferencesKey || 'ldesign-template-prefs',\r\n    locale: options.locale,\r\n    defaultLocale: options.defaultLocale || 'zh-CN',\r\n    hooks: options.hooks || {},\r\n  }\r\n\r\n  // Create template manager\r\n  const managerOptions: TemplateManagerOptions = {\r\n    scanOptions: {\r\n      pattern: mergedOptions.pattern,\r\n      basePath: mergedOptions.basePath,\r\n    },\r\n    loaderOptions: {\r\n      cache: mergedOptions.cache?.enabled,\r\n      cacheTtl: mergedOptions.cache?.ttl,\r\n      cacheMaxSize: mergedOptions.cache?.maxSize,\r\n      performance: mergedOptions.performance,\r\n    },\r\n    defaultStrategy: 'smart',\r\n    preload: mergedOptions.preload,\r\n    preloadStrategy: mergedOptions.preloadStrategy,\r\n  }\r\n\r\n  const manager = new TemplateManager(managerOptions)\r\n\r\n  // Initialize function\r\n  const initialize = async (): Promise<void> => {\r\n    if (disposed) {\r\n      throw new Error('Plugin has been disposed')\r\n    }\r\n    \r\n    try {\r\n      await manager.initialize()\r\n      \r\n      // Preload templates if enabled\r\n      // Note: preloadAll and preloadCommon are not implemented in TemplateManager\r\n      // Use preloadByFilter instead if needed\r\n      if (mergedOptions.preload) {\r\n        // You can implement specific preloading logic here\r\n        // For example, preload login templates:\r\n        // await manager.preloadByFilter({ category: 'login' })\r\n      }\r\n    } catch (error) {\r\n      mergedOptions.hooks?.onError?.(error as Error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // Load template with hooks\r\n  const loadTemplate = async (category: string, device: string, name: string): Promise<Component> => {\r\n    if (disposed) {\r\n      throw new Error('Plugin has been disposed')\r\n    }\r\n    \r\n    const templatePath = `${category}/${device}/${name}`\r\n    \r\n    try {\r\n      await mergedOptions.hooks?.beforeLoad?.(templatePath)\r\n      const component = await manager.loadTemplate(category, device, name)\r\n      await mergedOptions.hooks?.afterLoad?.(templatePath, component)\r\n      return component\r\n    } catch (error) {\r\n      mergedOptions.hooks?.onError?.(error as Error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // Get default template\r\n  const getDefaultTemplate = async (category: string, device: string): Promise<TemplateMetadata | null> => {\r\n    try {\r\n      const template = await manager.getDefaultTemplate(category, device)\r\n      return template\r\n    } catch (error) {\r\n      mergedOptions.hooks?.onError?.(error as Error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  // User preferences management - limit size to prevent memory growth\r\n  let preferences: TemplatePreferences = {}\r\n  const MAX_PREFERENCES = 100 // Limit number of stored preferences\r\n\r\n  // Load preferences from storage\r\n  const loadPreferences = (): TemplatePreferences => {\r\n    if (!mergedOptions.rememberPreferences) return {}\r\n    \r\n    try {\r\n      const stored = localStorage.getItem(mergedOptions.preferencesKey)\r\n      if (stored) {\r\n        preferences = JSON.parse(stored)\r\n        return preferences\r\n      }\r\n    } catch (error) {\r\n      console.error('[Template Plugin] Failed to load preferences:', error)\r\n    }\r\n    return {}\r\n  }\r\n\r\n  // Save preferences to storage\r\n  const savePreferencesToStorage = () => {\r\n    if (!mergedOptions.rememberPreferences) return\r\n    \r\n    try {\r\n      localStorage.setItem(mergedOptions.preferencesKey, JSON.stringify(preferences))\r\n    } catch (error) {\r\n      console.error('[Template Plugin] Failed to save preferences:', error)\r\n    }\r\n  }\r\n\r\n  // Save user preference\r\n  const savePreference = (category: string, device: string, templateName: string) => {\r\n    if (!mergedOptions.rememberPreferences) return\r\n    \r\n    // Limit preferences size\r\n    const keys = Object.keys(preferences)\r\n    if (keys.length >= MAX_PREFERENCES && !preferences[category]) {\r\n      // Remove oldest preference\r\n      delete preferences[keys[0]]\r\n    }\r\n    \r\n    if (!preferences[category]) {\r\n      preferences[category] = {}\r\n    }\r\n    preferences[category][device] = templateName\r\n    savePreferencesToStorage()\r\n  }\r\n\r\n  // Get user preferences\r\n  const getPreferences = (): TemplatePreferences => {\r\n    return { ...preferences }\r\n  }\r\n\r\n  // Clear user preferences\r\n  const clearPreferences = () => {\r\n    preferences = {}\r\n    if (mergedOptions.rememberPreferences) {\r\n      try {\r\n        localStorage.removeItem(mergedOptions.preferencesKey)\r\n      } catch (error) {\r\n        console.error('Failed to clear template preferences:', error)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get preferred template (from preferences or default)\r\n  const getPreferredTemplate = async (category: string, device: string): Promise<{ name: string } | null> => {\r\n    // Ensure preferences are loaded\r\n    if (mergedOptions.rememberPreferences && Object.keys(preferences).length === 0) {\r\n      loadPreferences()\r\n    }\r\n    \r\n    // First, check user preferences\r\n    if (mergedOptions.rememberPreferences) {\r\n      const userPref = preferences[category]?.[device]\r\n      \r\n      if (userPref) {\r\n        try {\r\n          // Verify that the preferred template exists\r\n          const templates = await manager.scanTemplates()\r\n          const templateKey = `${category}/${device}/${userPref}`\r\n          \r\n          if (templates.has(templateKey)) {\r\n            return { name: userPref }\r\n          } else {\r\n            if (import.meta.env.DEV) {\r\n              console.warn(`[Template Plugin] Preferred template ${userPref} not found, falling back to default`)\r\n            }\r\n          }\r\n        } catch (error) {\r\n          if (import.meta.env.DEV) {\r\n            console.warn(`[Template Plugin] Failed to verify preferred template ${userPref}, falling back to default`, error)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Fall back to default template\r\n    const defaultTemplate = await getDefaultTemplate(category, device)\r\n    if (defaultTemplate?.name) {\r\n      return { name: defaultTemplate.name }\r\n    }\r\n    \r\n    return null\r\n  }\r\n\r\n  // Load preferences on initialization (立即加载，不等待)\r\n  if (mergedOptions.rememberPreferences && typeof window !== 'undefined') {\r\n    // 立即同步加载偏好设置\r\n    loadPreferences()\r\n  }\r\n\r\n  // Dispose function to clean up resources\r\n  const dispose = () => {\r\n    if (disposed) return\r\n    \r\n    disposed = true\r\n    \r\n    // Clear initialization timeout\r\n    if (initializeTimeout) {\r\n      clearTimeout(initializeTimeout)\r\n      initializeTimeout = null\r\n    }\r\n    \r\n    // Run all cleanup handlers\r\n    cleanupHandlers.forEach(handler => {\r\n      try {\r\n        handler()\r\n      } catch (error) {\r\n        console.error('[Template Plugin] Cleanup error:', error)\r\n      }\r\n    })\r\n    cleanupHandlers.length = 0\r\n    \r\n    // Clear cache\r\n    localeCache = null\r\n    preferences = {}\r\n    \r\n    // Clean up manager resources if it has dispose\r\n    if ('dispose' in manager && typeof manager.dispose === 'function') {\r\n      (manager as any).dispose()\r\n    }\r\n    \r\n    // Clear window reference\r\n    if (typeof window !== 'undefined') {\r\n      delete (window as any).__TEMPLATE_PLUGIN__\r\n    }\r\n  }\r\n  \r\n  // Create plugin instance\r\n  const plugin: TemplatePlugin = {\r\n    manager,\r\n    options: mergedOptions,\r\n    currentLocale,\r\n    localeMessages,\r\n    initialize,\r\n    loadTemplate,\r\n    getDefaultTemplate,\r\n    getPreferredTemplate,\r\n    savePreference,\r\n    getPreferences,\r\n    clearPreferences,\r\n    scanTemplates: () => disposed ? Promise.reject(new Error('Plugin disposed')) : manager.scanTemplates(),\r\n    clearCache: () => disposed ? undefined : manager.clearCache(),\r\n    detectDevice: mergedOptions.detectDevice,\r\n    dispose,\r\n\r\n    install(app: App) {\r\n      // 智能共享：如果没有传入 Ref，尝试自动共享\r\n      if (!isRef(options.locale)) {\r\n        // 尝试从 app context 获取共享的 locale\r\n        const sharedLocale = app._context?.provides?.['app-locale'] as Ref<string> | undefined\r\n        \r\n        if (sharedLocale && sharedLocale.value !== undefined) {\r\n          // 发现共享的 locale，使用它\r\n          currentLocale.value = sharedLocale.value\r\n          plugin.currentLocale = sharedLocale\r\n          \r\n          // 清除缓存以触发重新计算\r\n          localeCache = null\r\n        } else {\r\n          // 没有共享的 locale，提供自己的\r\n          app.provide('app-locale', currentLocale)\r\n        }\r\n      }\r\n      \r\n      // Provide plugin instance\r\n      app.provide(TemplatePluginSymbol, plugin)\r\n\r\n      // Add global property\r\n      app.config.globalProperties.$template = plugin\r\n      \r\n      // Also expose to window for easy access by components\r\n      if (typeof window !== 'undefined') {\r\n        (window as unknown as { __TEMPLATE_PLUGIN__?: TemplatePlugin }).__TEMPLATE_PLUGIN__ = plugin\r\n        \r\n        // 自动加载主样式文件\r\n        try {\r\n          // 在构建环境中，尝试加载样式\r\n          const baseUrl = new URL(import.meta.url)\r\n          const indexCssPath = new URL('../index.css', baseUrl)\r\n          loadStyles([indexCssPath.href])\r\n          \r\n        } catch (error) {\r\n          console.warn('[Template Plugin] 无法自动加载样式，请手动导入 @ldesign/template/index.css', error)\r\n        }\r\n      }\r\n\r\n      // Register global components\r\n      app.component('TemplateRenderer', async () => {\r\n        const module = await import('../components/TemplateRenderer.vue')\r\n        return module.default\r\n      })\r\n\r\n      app.component('TemplateSelector', async () => {\r\n        const module = await import('../components/TemplateSelector.vue')\r\n        return module.default\r\n      })\r\n      \r\n      // Register template directive\r\n      import('../directives').then(({ installTemplateDirective }) => {\r\n        if (!disposed) {\r\n          installTemplateDirective(app)\r\n        }\r\n      }).catch(err => {\r\n        console.warn('[Template Plugin] Failed to load directives:', err)\r\n      })\r\n\r\n      // Auto-initialize on install\r\n      if (mergedOptions.autoInit) {\r\n        if (typeof window !== 'undefined') {\r\n          // Initialize after next tick to ensure DOM is ready\r\n          initializeTimeout = setTimeout(() => {\r\n            if (!disposed) {\r\n              initialize().catch(error => {\r\n                console.error('[Template Plugin] Initialization failed:', error)\r\n                mergedOptions.hooks?.onError?.(error)\r\n              })\r\n            }\r\n          }, 0)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return plugin\r\n}\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default createTemplatePlugin"],"names":["TemplatePluginSymbol","Symbol","isRef","v","useSmartLocale","options","eventListener","locale","ref","cleanup","injected","inject","value","defaultLocale","window","stored","localStorage","getItem","e","customEvent","detail","addEventListener","removeEventListener","defaultDetectDevice","width","innerWidth","createTemplatePlugin","currentLocale","localeCleanup","disposed","cleanupHandlers","initializeTimeout","localeCache","getLocaleData","key","data","getLocale","localeMessages","mergedOptions","pattern","basePath","autoInit","preload","preloadStrategy","cache","enabled","ttl","maxSize","performance","defaultDevice","autoDetect","detectDevice","rememberPreferences","preferencesKey","hooks","managerOptions","scanOptions","loaderOptions","cacheTtl","cacheMaxSize","defaultStrategy","manager","TemplateManager","initialize","Error","error","onError","loadTemplate","category","device","name","templatePath","beforeLoad","component","afterLoad","getDefaultTemplate","template","preferences","MAX_PREFERENCES","loadPreferences","JSON","parse","console","savePreferencesToStorage","setItem","stringify","savePreference","templateName","keys","Object","length","getPreferences","clearPreferences","removeItem","getPreferredTemplate","userPref","templates","scanTemplates","templateKey","has","import","DEV","warn","defaultTemplate","dispose","clearTimeout","forEach","handler","__TEMPLATE_PLUGIN__","plugin","Promise","reject","clearCache","undefined","install","app","sharedLocale","_context","provides","provide","config","globalProperties","$template","baseUrl","URL","indexCssPath","loadStyles","href","module","default","then","installTemplateDirective","catch","err","setTimeout"],"mappings":"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"}
{"version":3,"file":"TemplateRenderer.vue2.cjs","sources":["../../src/components/TemplateRenderer.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport type { TemplatePlugin } from '../plugin/createPlugin'\r\nimport type { DeviceType, TemplateLoadOptions, TemplateSlots } from '../types'\r\nimport { type Component, computed, inject, nextTick, onMounted, onUnmounted, provide, ref, type Ref, type Slot, toRefs, useSlots, watch } from 'vue'\r\nimport { useTemplate } from '../composables/useTemplate'\r\nimport { useTemplateTheme } from '../composables/useTemplateTheme'\r\nimport { getManager } from '../core'\r\nimport { getLocale } from '../locales'\r\nimport { useTemplatePlugin } from '../plugin/useTemplatePlugin'\r\nimport TemplateSelector from './TemplateSelector.vue'\r\nimport TemplateSkeleton from './TemplateSkeleton.vue'\r\n\r\n/**\r\n * 组件属性\r\n */\r\nconst props = withDefaults(\r\n  defineProps<{\r\n    /** 模板分类 */\r\n    category: string\r\n    /** 设备类型（可选，不传则自动检测） */\r\n    device?: DeviceType\r\n    /** 模板名称（可选，不传则自动选择默认） */\r\n    name?: string\r\n    /** 是否自动检测设备（当不传device时默认开启） */\r\n    autoDetect?: boolean\r\n    /** 是否自动加载默认模板（当不传name时默认开启） */\r\n    autoLoadDefault?: boolean\r\n    /** 传递给模板组件的属性 */\r\n    componentProps?: Record<string, unknown>\r\n    /** 加载选项 */\r\n    loadOptions?: TemplateLoadOptions\r\n    /** 是否显示模板选择器 */\r\n    showSelector?: boolean\r\n    /** 插槽内容配置 */\r\n    slots?: TemplateSlots\r\n    /** v-model 双向绑定数据 */\r\n    modelValue?: any\r\n    /** 是否显示骨架屏 */\r\n    skeleton?: boolean | 'auto'\r\n    /** 骨架屏类型 */\r\n    skeletonType?: 'default' | 'card' | 'list' | 'article' | 'form'\r\n    /** 自动保存 */\r\n    autoSave?: boolean\r\n    /** 自动保存延迟（毫秒） */\r\n    autoSaveDelay?: number\r\n    /** 重试次数 */\r\n    retryTimes?: number\r\n    /** 重试延迟（毫秒） */\r\n    retryDelay?: number\r\n    /** 降级组件 */\r\n    fallback?: Component\r\n    /** 主题 */\r\n    theme?: string\r\n  }>(),\r\n  {\r\n    device: undefined,\r\n    name: undefined,\r\n    autoDetect: undefined, // 会在下面根据条件设置\r\n    autoLoadDefault: undefined, // 会在下面根据条件设置\r\n    componentProps: () => ({}),\r\n    loadOptions: undefined,\r\n    showSelector: true,\r\n    slots: undefined,\r\n    modelValue: undefined,\r\n    skeleton: 'auto',\r\n    skeletonType: 'default',\r\n    autoSave: false,\r\n    autoSaveDelay: 1000,\r\n    retryTimes: 3,\r\n    retryDelay: 1000,\r\n    fallback: undefined,\r\n    theme: undefined,\r\n  }\r\n)\r\n\r\n/**\r\n * 事件\r\n */\r\nconst emit = defineEmits<{\r\n  load: [component: Component]\r\n  error: [error: Error]\r\n  reload: []\r\n  templateChange: [templateName: string]\r\n  deviceChange: [device: string]\r\n  'update:modelValue': [value: any]\r\n  save: [value: any]\r\n  mounted: [component: Component]\r\n  // 转发模板组件的所有事件\r\n  [key: string]: unknown[]\r\n}>()\r\n\r\nconst manager = getManager()\r\n\r\n// 获取语言配置\r\nconst plugin = useTemplatePlugin()\r\nconst locale = plugin?.currentLocale || inject<Ref<string>>('locale', ref('zh-CN'))\r\nconst messages = computed(() => {\r\n  const localeValue = typeof locale.value === 'string' ? locale.value : 'zh-CN'\r\n  return getLocale(localeValue)\r\n})\r\n\r\n// AbortController 用于取消异步操作\r\nconst abortController = ref<AbortController | null>(null)\r\n\r\n// 自动保存\r\nlet autoSaveTimer: ReturnType<typeof setTimeout> | null = null\r\n\r\n// v-model 支持\r\nconst modelData = ref(props.modelValue)\r\nconst modelWatcher = watch(() => props.modelValue, (newVal) => {\r\n  modelData.value = newVal\r\n})\r\n// Move scheduleAutoSave before usage\r\nconst scheduleAutoSave = () => {\r\n  if (autoSaveTimer) clearTimeout(autoSaveTimer)\r\n  autoSaveTimer = setTimeout(() => {\r\n    if (!abortController.value?.signal.aborted) {\r\n      emit('save', modelData.value)\r\n    }\r\n  }, props.autoSaveDelay)\r\n}\r\n\r\nconst dataWatcher = watch(modelData, (newVal) => {\r\n  emit('update:modelValue', newVal)\r\n  if (props.autoSave) {\r\n    scheduleAutoSave()\r\n  }\r\n}, { deep: true })\r\n\r\n// 自动保存\r\n// moved above to avoid use-before-define\r\n\r\n// 主题支持\r\nconst { setTheme, currentTheme } = props.theme ? useTemplateTheme() : { setTheme: () => {}, currentTheme: ref(null) }\r\nif (props.theme) {\r\n  watch(() => props.theme, (newTheme) => {\r\n    if (newTheme) setTheme(newTheme)\r\n  }, { immediate: true })\r\n}\r\n\r\n// 重试机制\r\nconst retryCount = ref(0)\r\n\r\n// 决定是否自动检测和自动加载\r\nconst shouldAutoDetect = computed(() => props.autoDetect ?? !props.device)\r\nconst shouldAutoLoadDefault = computed(() => props.autoLoadDefault ?? !props.name)\r\n\r\n// 设备类型（自动检测或手动指定）\r\nconst currentDevice = ref<DeviceType>(props.device as DeviceType || 'desktop')\r\n// 模板名称（自动选择或手动指定）\r\nconst currentName = ref<string>(props.name || 'default')\r\n\r\n// 检测设备类型\r\nconst detectDevice = (): DeviceType => {\r\n  if (typeof window === 'undefined') return 'desktop'\r\n  const width = window.innerWidth\r\n  if (width < 768) return 'mobile'\r\n  if (width < 1024) return 'tablet'\r\n  return 'desktop'\r\n}\r\n\r\n// 加载默认模板（或用户偏好模板）\r\nconst loadDefaultTemplate = async (dev: DeviceType | string) => {\r\n  if (!shouldAutoLoadDefault.value) return\r\n  \r\n  try {\r\n    // 优先使用注入的插件，如果没有则从 window 获取\r\n    let templatePlugin = plugin\r\n    if (!templatePlugin && typeof window !== 'undefined') {\r\n      templatePlugin = (window as unknown as { __TEMPLATE_PLUGIN__?: TemplatePlugin }).__TEMPLATE_PLUGIN__ || null\r\n    }\r\n    \r\n    if (templatePlugin?.getPreferredTemplate) {\r\n      // 使用插件的偏好管理\r\n      const preferred = await templatePlugin.getPreferredTemplate(props.category, dev as string)\r\n      if (preferred?.name) {\r\n        currentName.value = preferred.name\r\n        emit('templateChange', preferred.name)\r\n        return\r\n      }\r\n    }\r\n    \r\n    // 没有插件或偏好，使用默认\r\n    const defaultTemplate = await manager.getDefaultTemplate(props.category, dev as DeviceType)\r\n    if (defaultTemplate?.name) {\r\n      currentName.value = defaultTemplate.name\r\n      emit('templateChange', defaultTemplate.name)\r\n    }\r\n  } catch (e) {\r\n    console.error(messages.value.messages.loadError, e)\r\n  }\r\n}\r\n\r\n// 窗口大小变化处理（防抖）\r\nlet resizeTimer: ReturnType<typeof setTimeout> | null = null\r\nconst handleResize = () => {\r\n  if (resizeTimer) clearTimeout(resizeTimer)\r\n  resizeTimer = setTimeout(() => {\r\n    if (shouldAutoDetect.value) {\r\n      const newDevice = detectDevice()\r\n      if (currentDevice.value !== newDevice) {\r\n        currentDevice.value = newDevice\r\n        emit('deviceChange', newDevice)\r\n        loadDefaultTemplate(newDevice)\r\n      }\r\n    }\r\n  }, 150)\r\n}\r\n\r\n// 监听外部传入的 device 和 name 变化\r\nwatch(() => props.device, (newDevice) => {\r\n  if (newDevice && newDevice !== currentDevice.value) {\r\n    currentDevice.value = newDevice as DeviceType\r\n    if (shouldAutoLoadDefault.value) {\r\n      loadDefaultTemplate(newDevice)\r\n    }\r\n  }\r\n})\r\n\r\nwatch(() => props.name, (newName) => {\r\n  if (newName && newName !== currentName.value) {\r\n    currentName.value = newName\r\n  }\r\n})\r\n\r\n// 生命周期\r\nconst isInitialized = ref(false)\r\n\r\nonMounted(async () => {\r\n  if (!isInitialized.value) {\r\n    // 创建AbortController\r\n    abortController.value = new AbortController()\r\n    \r\n    try {\r\n      // 初始化管理器\r\n      await manager.initialize()\r\n      \r\n      // 检查是否已被取消\r\n      if (abortController.value.signal.aborted) return\r\n      \r\n      // 自动检测设备\r\n      if (shouldAutoDetect.value) {\r\n        currentDevice.value = detectDevice()\r\n        emit('deviceChange', currentDevice.value)\r\n      }\r\n      \r\n      // 自动加载默认模板\r\n      if (shouldAutoLoadDefault.value) {\r\n        await loadDefaultTemplate(currentDevice.value)\r\n      }\r\n      \r\n      isInitialized.value = true\r\n      \r\n      // 监听窗口变化 - 使用passive优化性能\r\n      if (shouldAutoDetect.value) {\r\n        window.addEventListener('resize', handleResize, { passive: true })\r\n      }\r\n    } catch (error) {\r\n      if (!abortController.value.signal.aborted) {\r\n        console.error('Initialization failed:', error)\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\nonUnmounted(() => {\r\n  // 取消所有异步操作\r\n  abortController.value?.abort()\r\n  \r\n  // 清理事件监听器\r\n  if (shouldAutoDetect.value) {\r\n    window.removeEventListener('resize', handleResize)\r\n  }\r\n  \r\n  // 清理所有定时器\r\n  if (resizeTimer) {\r\n    clearTimeout(resizeTimer)\r\n    resizeTimer = null\r\n  }\r\n  if (autoSaveTimer) {\r\n    clearTimeout(autoSaveTimer)\r\n    autoSaveTimer = null\r\n  }\r\n  \r\n  // 停止监听器\r\n  modelWatcher()\r\n  dataWatcher()\r\n})\r\n\r\n/**\r\n * 使用模板\r\n */\r\nconst { category } = toRefs(props)\r\nconst { component, loading, error, reload: originalReload } = useTemplate(\r\n  category,\r\n  currentDevice,\r\n  currentName,\r\n  props.loadOptions\r\n)\r\n\r\n// Define shouldShowSkeleton after loading is available\r\nconst shouldShowSkeleton = computed(() => {\r\n  if (props.skeleton === true) return true\r\n  if (props.skeleton === 'auto') return loading.value\r\n  return false\r\n})\r\n\r\n// 增强的重载函数（带重试机制）\r\nconst reload = async () => {\r\n  if (retryCount.value >= props.retryTimes) {\r\n    retryCount.value = 0\r\n  }\r\n  \r\n  try {\r\n    await originalReload()\r\n    retryCount.value = 0\r\n  } catch (err) {\r\n    if (retryCount.value < props.retryTimes) {\r\n      retryCount.value++\r\n      setTimeout(() => reload(), props.retryDelay * 2**(retryCount.value - 1))\r\n    } else {\r\n      throw err\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 处理重新加载\r\n */\r\nconst handleReload = async () => {\r\n  emit('reload')\r\n  await reload()\r\n}\r\n\r\n// 组件挂载事件\r\nwatch(component, (newComponent) => {\r\n  if (newComponent) {\r\n    nextTick(() => {\r\n      emit('mounted', newComponent)\r\n    })\r\n  }\r\n})\r\n\r\n// 为子组件提供数据模型\r\nif (props.modelValue !== undefined) {\r\n  provide('templateModel', modelData)\r\n}\r\n\r\n// 组合 componentProps 和 v-model\r\nconst combinedProps = computed(() => {\r\n  const baseProps = { ...props.componentProps }\r\n  if (props.modelValue !== undefined) {\r\n    baseProps.modelValue = modelData.value\r\n    baseProps['onUpdate:modelValue'] = (val: any) => {\r\n      modelData.value = val\r\n    }\r\n  }\r\n  return baseProps\r\n})\r\n\r\n/**\r\n * 处理模板选择\r\n */\r\nconst handleTemplateSelect = (templateName: string) => {\r\n  // 更新当前模板\r\n  currentName.value = templateName\r\n  emit('templateChange', templateName)\r\n  \r\n  // 保存用户偏好\r\n  let templatePlugin = plugin\r\n  if (!templatePlugin && typeof window !== 'undefined') {\r\n    templatePlugin = (window as unknown as { __TEMPLATE_PLUGIN__?: TemplatePlugin }).__TEMPLATE_PLUGIN__ || null\r\n  }\r\n  \r\n  if (templatePlugin?.savePreference) {\r\n    templatePlugin.savePreference(props.category, currentDevice.value, templateName)\r\n  }\r\n}\r\n\r\n/**\r\n * 获取当前组件的插槽\r\n */\r\nconst slots = useSlots()\r\n\r\n/**\r\n * 计算可用的插槽（排除保留插槽）\r\n */\r\nconst availableSlots = computed(() => {\r\n  const reserved = ['loading', 'error', 'empty']\r\n  const result: Record<string, Slot> = {}\r\n  \r\n  // 传递所有非保留插槽\r\n  for (const slotName in slots) {\r\n    if (!reserved.includes(slotName)) {\r\n      const s = slots[slotName]\r\n      if (s) result[slotName] = s\r\n    }\r\n  }\r\n  \r\n  return result\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"ldesign-template-renderer\" :data-theme=\"currentTheme\">\r\n    <!-- 骨架屏 -->\r\n    <div v-if=\"shouldShowSkeleton && !component\" class=\"template-skeleton-wrapper\">\r\n      <slot name=\"skeleton\">\r\n        <TemplateSkeleton \r\n          :type=\"skeletonType\"\r\n          animation=\"wave\"\r\n        />\r\n      </slot>\r\n    </div>\r\n    \r\n    <!-- 加载中（不使用骨架屏时） -->\r\n    <div v-else-if=\"loading && !shouldShowSkeleton\" class=\"template-loading\">\r\n      <slot name=\"loading\">\r\n        <div class=\"loading-spinner\">\r\n          {{ messages.messages.loading }}\r\n        </div>\r\n      </slot>\r\n    </div>\r\n\r\n    <!-- 错误 -->\r\n    <div v-else-if=\"error && !fallback\" class=\"template-error\">\r\n      <slot name=\"error\" :error=\"error\" :retry=\"handleReload\" :retry-count=\"retryCount\">\r\n        <div class=\"error-message\">\r\n          <p>{{ messages.messages.loadError }}</p>\r\n          <p class=\"error-detail\">\r\n            {{ error.message }}\r\n          </p>\r\n          <p v-if=\"retryCount > 0\" class=\"retry-info\">\r\n            重试次数: {{ retryCount }}/{{ retryTimes }}\r\n          </p>\r\n          <button :disabled=\"retryCount >= retryTimes\" @click=\"handleReload\">\r\n            {{ retryCount >= retryTimes ? '不能重试' : messages.actions.loadMore }}\r\n          </button>\r\n        </div>\r\n      </slot>\r\n    </div>\r\n    \r\n    <!-- 降级组件 -->\r\n    <component\r\n      :is=\"fallback\"\r\n      v-else-if=\"error && fallback\"\r\n      :error=\"error\"\r\n      @retry=\"handleReload\"\r\n    />\r\n\r\n    <!-- 模板组件 -->\r\n    <component\r\n      :is=\"component\"\r\n      v-else-if=\"component\"\r\n      v-bind=\"combinedProps\"\r\n      v-on=\"$attrs\"\r\n    >\r\n      <!-- 传递所有插槽（除了保留插槽） -->\r\n      <template v-for=\"(slot, slotName) in availableSlots\" :key=\"slotName\" #[slotName]=\"slotProps\">\r\n        <slot :name=\"slotName\" v-bind=\"slotProps\" />\r\n      </template>\r\n    </component>\r\n\r\n    <!-- 空状态 -->\r\n    <div v-else class=\"template-empty\">\r\n      <slot name=\"empty\">\r\n        <p>{{ messages.messages.noTemplates }}</p>\r\n      </slot>\r\n    </div>\r\n\r\n    <!-- 模板选择器 -->\r\n    <TemplateSelector\r\n      v-if=\"showSelector && component\"\r\n      :category=\"category\"\r\n      :device=\"currentDevice\"\r\n      :current-template=\"currentName\"\r\n      @select=\"handleTemplateSelect\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.ldesign-template-renderer {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.template-loading,\r\n.template-error,\r\n.template-empty {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 200px;\r\n  padding: 20px;\r\n}\r\n\r\n.loading-spinner {\r\n  font-size: 14px;\r\n  color: #666;\r\n}\r\n\r\n.error-message {\r\n  text-align: center;\r\n  color: #f56c6c;\r\n}\r\n\r\n.error-detail {\r\n  margin-top: 8px;\r\n  font-size: 12px;\r\n  color: #999;\r\n}\r\n\r\n.error-message button {\r\n  margin-top: 12px;\r\n  padding: 8px 16px;\r\n  background: #409eff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.error-message button:hover {\r\n  background: #66b1ff;\r\n}\r\n\r\n.template-empty {\r\n  color: #999;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"names":["props","__props","emit","__emit","manager","getManager","plugin","useTemplatePlugin","locale","currentLocale","inject","ref","messages","computed","localeValue","value","getLocale","abortController","autoSaveTimer","modelData","modelValue","modelWatcher","watch","newVal","scheduleAutoSave","setTimeout","signal","aborted","autoSaveDelay","dataWatcher","autoSave","deep","setTheme","currentTheme","theme","useTemplateTheme","newTheme","immediate","retryCount","shouldAutoDetect","autoDetect","device","shouldAutoLoadDefault","autoLoadDefault","name","currentDevice","currentName","detectDevice","window","width","innerWidth","loadDefaultTemplate","dev","templatePlugin","__TEMPLATE_PLUGIN__","getPreferredTemplate","preferred","category","defaultTemplate","getDefaultTemplate","e","console","error","loadError","resizeTimer","handleResize","newDevice","newName","isInitialized","onMounted","AbortController","initialize","addEventListener","passive","onUnmounted","abort","removeEventListener","clearTimeout","toRefs","component","loading","reload","originalReload","useTemplate","loadOptions","shouldShowSkeleton","skeleton","retryTimes","err","retryDelay","handleReload","newComponent","nextTick","undefined","provide","combinedProps","baseProps","componentProps","val","handleTemplateSelect","templateName","savePreference","slots","useSlots","availableSlots","reserved","result","slotName","includes","s","_createElementBlock","class","_unref","_createCommentVNode","_openBlock","_hoisted_2","_renderSlot","_ctx","_createVNode","TemplateSkeleton","type","skeletonType","animation","_Fragment","key","_createElementVNode","_hoisted_3","_hoisted_4","_toDisplayString","fallback","_hoisted_5","$slots","retry","_hoisted_6","_hoisted_7","message","_hoisted_8","disabled","onClick","actions","loadMore","_hoisted_9","_createBlock","_resolveDynamicComponent","onRetry","_mergeProps","_toHandlers","$attrs","_createSlots","_","slot","fn","_withCtx","slotProps","_normalizeProps","_guardReactiveProps","_hoisted_10","noTemplates","showSelector","TemplateSelector","onSelect"],"mappings":"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"}
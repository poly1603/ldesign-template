{"version":3,"file":"version.cjs","sources":["../../src/core/version.ts"],"sourcesContent":["/**\r\n * 模板版本控制系统\r\n */\r\n\r\nimport type { Template } from '../types'\r\nimport { deepClone } from '../utils/helpers'\r\n\r\n/**\r\n * 版本信息\r\n */\r\nexport interface TemplateVersion {\r\n  /**\r\n   * 版本号\r\n   */\r\n  version: string\r\n  \r\n  /**\r\n   * 创建时间\r\n   */\r\n  createdAt: Date\r\n  \r\n  /**\r\n   * 更新时间\r\n   */\r\n  updatedAt: Date\r\n  \r\n  /**\r\n   * 作者\r\n   */\r\n  author?: string\r\n  \r\n  /**\r\n   * 描述\r\n   */\r\n  description?: string\r\n  \r\n  /**\r\n   * 标签\r\n   */\r\n  tags?: string[]\r\n  \r\n  /**\r\n   * 是否已发布\r\n   */\r\n  published?: boolean\r\n  \r\n  /**\r\n   * 是否已废弃\r\n   */\r\n  deprecated?: boolean\r\n  \r\n  /**\r\n   * 废弃信息\r\n   */\r\n  deprecationInfo?: {\r\n    reason: string\r\n    alternative?: string\r\n    removeIn?: string\r\n  }\r\n}\r\n\r\n/**\r\n * 版本化模板\r\n */\r\nexport interface VersionedTemplate extends Template {\r\n  /**\r\n   * 版本信息\r\n   */\r\n  version: TemplateVersion\r\n  \r\n  /**\r\n   * 变更历史\r\n   */\r\n  changelog?: ChangeLog[]\r\n  \r\n  /**\r\n   * 迁移配置\r\n   */\r\n  migrations?: Migration[]\r\n}\r\n\r\n/**\r\n * 变更日志\r\n */\r\nexport interface ChangeLog {\r\n  /**\r\n   * 版本号\r\n   */\r\n  version: string\r\n  \r\n  /**\r\n   * 日期\r\n   */\r\n  date: Date\r\n  \r\n  /**\r\n   * 类型\r\n   */\r\n  type: 'major' | 'minor' | 'patch' | 'hotfix'\r\n  \r\n  /**\r\n   * 变更内容\r\n   */\r\n  changes: ChangeEntry[]\r\n  \r\n  /**\r\n   * 破坏性变更\r\n   */\r\n  breaking?: string[]\r\n}\r\n\r\n/**\r\n * 变更条目\r\n */\r\nexport interface ChangeEntry {\r\n  /**\r\n   * 类型\r\n   */\r\n  type: 'added' | 'changed' | 'fixed' | 'removed' | 'security' | 'deprecated'\r\n  \r\n  /**\r\n   * 描述\r\n   */\r\n  description: string\r\n  \r\n  /**\r\n   * 相关issue\r\n   */\r\n  issues?: string[]\r\n}\r\n\r\n/**\r\n * 迁移配置\r\n */\r\nexport interface Migration {\r\n  /**\r\n   * 源版本\r\n   */\r\n  from: string\r\n  \r\n  /**\r\n   * 目标版本\r\n   */\r\n  to: string\r\n  \r\n  /**\r\n   * 迁移函数\r\n   */\r\n  migrate: MigrationFunction\r\n  \r\n  /**\r\n   * 回滚函数\r\n   */\r\n  rollback?: MigrationFunction\r\n  \r\n  /**\r\n   * 描述\r\n   */\r\n  description?: string\r\n  \r\n  /**\r\n   * 是否自动执行\r\n   */\r\n  auto?: boolean\r\n}\r\n\r\n/**\r\n * 迁移函数\r\n */\r\nexport type MigrationFunction = (\r\n  template: Template,\r\n  options?: MigrationOptions\r\n) => Promise<Template> | Template\r\n\r\n/**\r\n * 迁移选项\r\n */\r\nexport interface MigrationOptions {\r\n  /**\r\n   * 是否备份\r\n   */\r\n  backup?: boolean\r\n  \r\n  /**\r\n   * 是否验证\r\n   */\r\n  validate?: boolean\r\n  \r\n  /**\r\n   * 自定义数据\r\n   */\r\n  data?: Record<string, any>\r\n}\r\n\r\n/**\r\n * 版本比较结果\r\n */\r\nexport interface VersionComparison {\r\n  /**\r\n   * 是否相同\r\n   */\r\n  equal: boolean\r\n  \r\n  /**\r\n   * 是否更新\r\n   */\r\n  newer: boolean\r\n  \r\n  /**\r\n   * 是否更旧\r\n   */\r\n  older: boolean\r\n  \r\n  /**\r\n   * 主版本差异\r\n   */\r\n  majorDiff: number\r\n  \r\n  /**\r\n   * 次版本差异\r\n   */\r\n  minorDiff: number\r\n  \r\n  /**\r\n   * 补丁版本差异\r\n   */\r\n  patchDiff: number\r\n}\r\n\r\n/**\r\n * 版本管理器\r\n */\r\nexport class TemplateVersionManager {\r\n  private versions: Map<string, Map<string, VersionedTemplate>> = new Map()\r\n  private migrations: Map<string, Migration[]> = new Map()\r\n  private currentVersions: Map<string, string> = new Map()\r\n  private backups: Map<string, VersionedTemplate[]> = new Map()\r\n  \r\n  /**\r\n   * 注册版本\r\n   */\r\n  registerVersion(\r\n    templateId: string,\r\n    version: string,\r\n    template: Template,\r\n    versionInfo?: Partial<TemplateVersion>\r\n  ): void {\r\n    if (!this.versions.has(templateId)) {\r\n      this.versions.set(templateId, new Map())\r\n    }\r\n    \r\n    const versionedTemplate: VersionedTemplate = {\r\n      ...template,\r\n      version: {\r\n        version,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        ...versionInfo\r\n      }\r\n    }\r\n    \r\n    this.versions.get(templateId)!.set(version, versionedTemplate)\r\n    \r\n    // 设置为当前版本\r\n    if (!this.currentVersions.has(templateId) || versionInfo?.published) {\r\n      this.currentVersions.set(templateId, version)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取版本\r\n   */\r\n  getVersion(templateId: string, version?: string): VersionedTemplate | undefined {\r\n    const versions = this.versions.get(templateId)\r\n    if (!versions) return undefined\r\n    \r\n    if (version) {\r\n      return versions.get(version)\r\n    }\r\n    \r\n    // 获取当前版本\r\n    const currentVersion = this.currentVersions.get(templateId)\r\n    return currentVersion ? versions.get(currentVersion) : undefined\r\n  }\r\n  \r\n  /**\r\n   * 获取所有版本\r\n   */\r\n  getAllVersions(templateId: string): VersionedTemplate[] {\r\n    const versions = this.versions.get(templateId)\r\n    if (!versions) return []\r\n    \r\n    return Array.from(versions.values()).sort((a, b) => \r\n      this.compareVersions(b.version.version, a.version.version).newer ? 1 : -1\r\n    )\r\n  }\r\n  \r\n  /**\r\n   * 比较版本\r\n   */\r\n  compareVersions(v1: string, v2: string): VersionComparison {\r\n    const parse = (v: string) => {\r\n      const [major = 0, minor = 0, patch = 0] = v.split('.').map(Number)\r\n      return { major, minor, patch }\r\n    }\r\n    \r\n    const ver1 = parse(v1)\r\n    const ver2 = parse(v2)\r\n    \r\n    const majorDiff = ver1.major - ver2.major\r\n    const minorDiff = ver1.minor - ver2.minor\r\n    const patchDiff = ver1.patch - ver2.patch\r\n    \r\n    return {\r\n      equal: majorDiff === 0 && minorDiff === 0 && patchDiff === 0,\r\n      newer: majorDiff > 0 || (majorDiff === 0 && minorDiff > 0) || \r\n             (majorDiff === 0 && minorDiff === 0 && patchDiff > 0),\r\n      older: majorDiff < 0 || (majorDiff === 0 && minorDiff < 0) || \r\n             (majorDiff === 0 && minorDiff === 0 && patchDiff < 0),\r\n      majorDiff,\r\n      minorDiff,\r\n      patchDiff\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 注册迁移\r\n   */\r\n  registerMigration(templateId: string, migration: Migration): void {\r\n    if (!this.migrations.has(templateId)) {\r\n      this.migrations.set(templateId, [])\r\n    }\r\n    \r\n    this.migrations.get(templateId)!.push(migration)\r\n  }\r\n  \r\n  /**\r\n   * 执行迁移\r\n   */\r\n  async migrate(\r\n    templateId: string,\r\n    fromVersion: string,\r\n    toVersion: string,\r\n    options?: MigrationOptions\r\n  ): Promise<VersionedTemplate> {\r\n    const migrations = this.findMigrationPath(templateId, fromVersion, toVersion)\r\n    \r\n    if (!migrations.length) {\r\n      throw new Error(`No migration path found from ${fromVersion} to ${toVersion}`)\r\n    }\r\n    \r\n    let currentTemplate = this.getVersion(templateId, fromVersion)\r\n    if (!currentTemplate) {\r\n      throw new Error(`Version ${fromVersion} not found for template ${templateId}`)\r\n    }\r\n    \r\n    // 备份\r\n    if (options?.backup) {\r\n      this.backup(templateId, currentTemplate)\r\n    }\r\n    \r\n    // 执行迁移\r\n    for (const migration of migrations) {\r\n      try {\r\n        const result = await migration.migrate(currentTemplate, options)\r\n        currentTemplate = {\r\n          ...result,\r\n          version: {\r\n            ...currentTemplate.version,\r\n            version: migration.to,\r\n            updatedAt: new Date()\r\n          }\r\n        }\r\n        \r\n        // 验证\r\n        if (options?.validate) {\r\n          this.validateTemplate(currentTemplate)\r\n        }\r\n      } catch (error) {\r\n        console.error(`Migration failed from ${migration.from} to ${migration.to}:`, error)\r\n        \r\n        // 尝试回滚\r\n        if (migration.rollback) {\r\n          await migration.rollback(currentTemplate, options)\r\n        }\r\n        \r\n        throw error\r\n      }\r\n    }\r\n    \r\n    // 更新版本\r\n    this.registerVersion(\r\n      templateId,\r\n      toVersion,\r\n      currentTemplate,\r\n      currentTemplate.version\r\n    )\r\n    \r\n    return currentTemplate\r\n  }\r\n  \r\n  /**\r\n   * 查找迁移路径\r\n   */\r\n  private findMigrationPath(\r\n    templateId: string,\r\n    fromVersion: string,\r\n    toVersion: string\r\n  ): Migration[] {\r\n    const migrations = this.migrations.get(templateId) || []\r\n    const path: Migration[] = []\r\n    \r\n    // 简单的线性迁移路径\r\n    let currentVersion = fromVersion\r\n    \r\n    while (currentVersion !== toVersion) {\r\n      const migration = migrations.find(m => m.from === currentVersion)\r\n      if (!migration) break\r\n      \r\n      path.push(migration)\r\n      currentVersion = migration.to\r\n    }\r\n    \r\n    return currentVersion === toVersion ? path : []\r\n  }\r\n  \r\n  /**\r\n   * 备份模板\r\n   */\r\n  private backup(templateId: string, template: VersionedTemplate): void {\r\n    if (!this.backups.has(templateId)) {\r\n      this.backups.set(templateId, [])\r\n    }\r\n    \r\n    this.backups.get(templateId)!.push(deepClone(template))\r\n    \r\n    // 限制备份数量\r\n    const backups = this.backups.get(templateId)!\r\n    if (backups.length > 10) {\r\n      backups.shift()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 恢复备份\r\n   */\r\n  restoreBackup(templateId: string, index: number = -1): VersionedTemplate | undefined {\r\n    const backups = this.backups.get(templateId)\r\n    if (!backups || !backups.length) return undefined\r\n    \r\n    const backup = index === -1 ? backups[backups.length - 1] : backups[index]\r\n    if (!backup) return undefined\r\n    \r\n    this.registerVersion(\r\n      templateId,\r\n      backup.version.version,\r\n      backup,\r\n      backup.version\r\n    )\r\n    \r\n    return backup\r\n  }\r\n  \r\n  /**\r\n   * 验证模板\r\n   */\r\n  private validateTemplate(template: VersionedTemplate): void {\r\n    if (!template.id) {\r\n      throw new Error('Template must have an id')\r\n    }\r\n    \r\n    if (!template.version?.version) {\r\n      throw new Error('Template must have a version')\r\n    }\r\n    \r\n    // 验证版本格式\r\n    if (!/^\\d+\\.\\d+\\.\\d+/.test(template.version.version)) {\r\n      throw new Error('Version must be in semver format (x.y.z)')\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 创建新版本\r\n   */\r\n  createVersion(\r\n    templateId: string,\r\n    newVersion: string,\r\n    changes: Partial<Template>,\r\n    versionInfo?: Partial<TemplateVersion>\r\n  ): VersionedTemplate {\r\n    const currentTemplate = this.getVersion(templateId)\r\n    if (!currentTemplate) {\r\n      throw new Error(`Template ${templateId} not found`)\r\n    }\r\n    \r\n    const newTemplate: VersionedTemplate = {\r\n      ...currentTemplate,\r\n      ...changes,\r\n      version: {\r\n        version: newVersion,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        ...versionInfo\r\n      }\r\n    }\r\n    \r\n    this.registerVersion(templateId, newVersion, newTemplate, versionInfo)\r\n    \r\n    return newTemplate\r\n  }\r\n  \r\n  /**\r\n   * 发布版本\r\n   */\r\n  publishVersion(templateId: string, version: string): void {\r\n    const template = this.getVersion(templateId, version)\r\n    if (!template) {\r\n      throw new Error(`Version ${version} not found for template ${templateId}`)\r\n    }\r\n    \r\n    template.version.published = true\r\n    template.version.updatedAt = new Date()\r\n    \r\n    // 设置为当前版本\r\n    this.currentVersions.set(templateId, version)\r\n  }\r\n  \r\n  /**\r\n   * 废弃版本\r\n   */\r\n  deprecateVersion(\r\n    templateId: string,\r\n    version: string,\r\n    reason: string,\r\n    alternative?: string\r\n  ): void {\r\n    const template = this.getVersion(templateId, version)\r\n    if (!template) {\r\n      throw new Error(`Version ${version} not found for template ${templateId}`)\r\n    }\r\n    \r\n    template.version.deprecated = true\r\n    template.version.deprecationInfo = {\r\n      reason,\r\n      alternative\r\n    }\r\n    template.version.updatedAt = new Date()\r\n  }\r\n  \r\n  /**\r\n   * 获取变更日志\r\n   */\r\n  getChangelog(templateId: string): ChangeLog[] {\r\n    const versions = this.getAllVersions(templateId)\r\n    const changelog: ChangeLog[] = []\r\n    \r\n    versions.forEach(version => {\r\n      if (version.changelog) {\r\n        changelog.push(...version.changelog)\r\n      }\r\n    })\r\n    \r\n    return changelog.sort((a, b) => b.date.getTime() - a.date.getTime())\r\n  }\r\n  \r\n  /**\r\n   * 清理旧版本\r\n   */\r\n  cleanupOldVersions(\r\n    templateId: string,\r\n    keepCount: number = 5\r\n  ): void {\r\n    const versions = this.getAllVersions(templateId)\r\n    \r\n    if (versions.length <= keepCount) return\r\n    \r\n    const toRemove = versions.slice(keepCount)\r\n    const versionMap = this.versions.get(templateId)\r\n    \r\n    toRemove.forEach(version => {\r\n      if (!version.version.published) {\r\n        versionMap?.delete(version.version.version)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const versionManager = new TemplateVersionManager()\r\n\r\n/**\r\n * 创建版本化模板\r\n */\r\nexport function createVersionedTemplate(\r\n  template: Template,\r\n  version: string,\r\n  versionInfo?: Partial<TemplateVersion>\r\n): VersionedTemplate {\r\n  return {\r\n    ...template,\r\n    version: {\r\n      version,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      ...versionInfo\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 创建迁移\r\n */\r\nexport function createMigration(\r\n  from: string,\r\n  to: string,\r\n  migrate: MigrationFunction,\r\n  options?: {\r\n    rollback?: MigrationFunction\r\n    description?: string\r\n    auto?: boolean\r\n  }\r\n): Migration {\r\n  return {\r\n    from,\r\n    to,\r\n    migrate,\r\n    ...options\r\n  }\r\n}"],"names":["TemplateVersionManager","constructor","versions","Map","migrations","currentVersions","backups","registerVersion","templateId","version","template","versionInfo","has","set","versionedTemplate","createdAt","Date","updatedAt","get","published","getVersion","undefined","currentVersion","getAllVersions","Array","from","values","sort","a","b","compareVersions","newer","v1","v2","parse","v","major","minor","patch","split","map","Number","ver1","ver2","majorDiff","minorDiff","patchDiff","equal","older","registerMigration","migration","push","migrate","fromVersion","toVersion","options","findMigrationPath","length","Error","currentTemplate","backup","result","to","validate","validateTemplate","error","console","rollback","path","find","m","deepClone","shift","restoreBackup","index","id","test","createVersion","newVersion","changes","newTemplate","publishVersion","deprecateVersion","reason","alternative","deprecated","deprecationInfo","getChangelog","changelog","forEach","date","getTime","cleanupOldVersions","keepCount","toRemove","slice","versionMap","delete","versionManager","createVersionedTemplate","createMigration"],"mappings":"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"}
{"version":3,"file":"inheritance.cjs","sources":["../../src/core/inheritance.ts"],"sourcesContent":["/**\n * 模板继承与组合系统\n */\n\nimport type { Component, VNode } from 'vue';\nimport type { Template, TemplateConfig } from '../types'\nimport { defineComponent, h } from 'vue'\nimport { deepMerge } from '../utils'\n\n/**\n * 模板继承配置\n */\nexport interface TemplateInheritanceConfig {\n  /**\n   * 父模板\n   */\n  extends?: Template | string\n  \n  /**\n   * 混入模板列表\n   */\n  mixins?: (Template | string)[]\n  \n  /**\n   * 合并策略\n   */\n  mergeStrategy?: MergeStrategy\n  \n  /**\n   * 是否允许覆盖\n   */\n  allowOverride?: boolean\n  \n  /**\n   * 继承深度限制\n   */\n  maxDepth?: number\n}\n\n/**\n * 合并策略\n */\nexport interface MergeStrategy {\n  /**\n   * 数据合并策略\n   */\n  data?: 'merge' | 'replace' | 'concat' | ((parent: any, child: any) => any)\n  \n  /**\n   * 样式合并策略\n   */\n  styles?: 'merge' | 'replace' | 'append' | ((parent: any, child: any) => any)\n  \n  /**\n   * 组件合并策略\n   */\n  components?: 'merge' | 'replace' | ((parent: any, child: any) => any)\n  \n  /**\n   * 插槽合并策略\n   */\n  slots?: 'merge' | 'replace' | 'prepend' | 'append' | ((parent: any, child: any) => any)\n  \n  /**\n   * 事件合并策略\n   */\n  events?: 'merge' | 'replace' | 'chain' | ((parent: any, child: any) => any)\n  \n  /**\n   * 属性合并策略\n   */\n  props?: 'merge' | 'replace' | ((parent: any, child: any) => any)\n}\n\n/**\n * 模板块定义\n */\nexport interface TemplateBlock {\n  /**\n   * 块名称\n   */\n  name: string\n  \n  /**\n   * 块内容\n   */\n  content: VNode | Component | string\n  \n  /**\n   * 是否可覆盖\n   */\n  overridable?: boolean\n  \n  /**\n   * 优先级\n   */\n  priority?: number\n}\n\n/**\n * 模板继承管理器\n */\nexport class TemplateInheritanceManager {\n  private templates: Map<string, Template> = new Map()\n  // 使用WeakMap缓存继承结果，允许垃圾回收\n  private inheritanceCache: WeakMap<object, Template> = new WeakMap()\n  private mixinCache: Map<string, any> = new Map()\n  private cacheKeyMap: Map<string, object> = new Map()\n  private readonly MAX_TEMPLATES = 500\n  private readonly MAX_MIXINS = 100\n  private readonly MAX_CACHE_KEYS = 1000\n  private cleanupTimer: ReturnType<typeof setTimeout> | null = null\n  \n  /**\n   * 注册模板\n   */\n  registerTemplate(id: string, template: Template): void {\n    this.templates.set(id, template)\n    // 清除相关缓存\n    this.clearCache(id)\n    \n    // 限制模板数量\n    if (this.templates.size > this.MAX_TEMPLATES) {\n      const oldestKeys = Array.from(this.templates.keys()).slice(0, this.templates.size - this.MAX_TEMPLATES)\n      oldestKeys.forEach(key => {\n        this.templates.delete(key)\n        this.clearCache(key)\n      })\n    }\n  }\n  \n  /**\n   * 获取模板\n   */\n  getTemplate(id: string): Template | undefined {\n    return this.templates.get(id)\n  }\n  \n  /**\n   * 扩展模板\n   */\n  extendTemplate(\n    child: Template,\n    config: TemplateInheritanceConfig\n  ): Template {\n    const cacheKeyStr = this.getCacheKey(child, config)\n    let cacheKeyObj = this.cacheKeyMap.get(cacheKeyStr)\n    \n    // 检查缓存\n    if (cacheKeyObj && this.inheritanceCache.has(cacheKeyObj)) {\n      const cached = this.inheritanceCache.get(cacheKeyObj)\n      if (cached) return cached\n    }\n    \n    // 创建新的缓存键对象\n    if (!cacheKeyObj) {\n      cacheKeyObj = { key: cacheKeyStr }\n      this.cacheKeyMap.set(cacheKeyStr, cacheKeyObj)\n      \n      // 限制缓存键数量\n      if (this.cacheKeyMap.size > this.MAX_CACHE_KEYS) {\n        const oldestKeys = Array.from(this.cacheKeyMap.keys()).slice(0, this.cacheKeyMap.size - this.MAX_CACHE_KEYS)\n        oldestKeys.forEach(key => {\n          const obj = this.cacheKeyMap.get(key)\n          if (obj) this.inheritanceCache.delete(obj)\n          this.cacheKeyMap.delete(key)\n        })\n      }\n    }\n    \n    // 应用继承\n    let result = { ...child }\n    \n    // 处理继承\n    if (config.extends) {\n      const parent = this.resolveTemplate(config.extends)\n      if (parent) {\n        result = this.mergeTemplates(parent, result, config.mergeStrategy, 1, config.maxDepth)\n      }\n    }\n    \n    // 处理混入\n    if (config.mixins?.length) {\n      for (const mixin of config.mixins) {\n        const mixinTemplate = this.resolveTemplate(mixin)\n        if (mixinTemplate) {\n          result = this.mergeTemplates(mixinTemplate, result, config.mergeStrategy)\n        }\n      }\n    }\n    \n    // 缓存结果\n    this.inheritanceCache.set(cacheKeyObj, result)\n    \n    return result\n  }\n  \n  /**\n   * 创建混入\n   */\n  createMixin(id: string, mixin: Partial<Template>): void {\n    this.mixinCache.set(id, mixin)\n    \n    // 限制混入数量\n    if (this.mixinCache.size > this.MAX_MIXINS) {\n      const oldestKeys = Array.from(this.mixinCache.keys()).slice(0, this.mixinCache.size - this.MAX_MIXINS)\n      oldestKeys.forEach(key => this.mixinCache.delete(key))\n    }\n  }\n  \n  /**\n   * 获取混入\n   */\n  getMixin(id: string): Partial<Template> | undefined {\n    return this.mixinCache.get(id)\n  }\n  \n  /**\n   * 合并模板\n   */\n  private mergeTemplates(\n    parent: Template,\n    child: Template,\n    strategy?: MergeStrategy,\n    depth: number = 1,\n    maxDepth: number = 10\n  ): Template {\n    // 检查深度限制\n    if (depth > maxDepth) {\n      console.warn(`Template inheritance depth exceeded (${maxDepth})`)\n      return child\n    }\n    \n    const mergedTemplate: Template = { ...child }\n    \n    // 合并配置\n    if (parent.config || child.config) {\n      mergedTemplate.config = this.mergeConfig(\n        parent.config as any || {},\n        child.config as any || {},\n        strategy\n      )\n    }\n    \n    // 合并组件\n    if (parent.component || child.component) {\n      mergedTemplate.component = this.mergeComponents(\n        parent.component,\n        child.component,\n        strategy?.components\n      )\n    }\n    \n    // 合并样式\n    if ((parent as any).styles || (child as any).styles) {\n      (mergedTemplate as any).styles = this.mergeStyles(\n        (parent as any).styles,\n        (child as any).styles,\n        strategy?.styles\n      )\n    }\n    \n    // 合并数据\n    if ((parent as any).data || (child as any).data) {\n      (mergedTemplate as any).data = this.mergeData(\n        (parent as any).data,\n        (child as any).data,\n        strategy?.data\n      )\n    }\n    \n    return mergedTemplate\n  }\n  \n  /**\n   * 合并配置\n   */\n  private mergeConfig(\n    parentConfig: TemplateConfig,\n    childConfig: TemplateConfig,\n    strategy?: MergeStrategy\n  ): TemplateConfig {\n    if (strategy?.props === 'replace') {\n      return childConfig\n    }\n    \n    if (typeof strategy?.props === 'function') {\n      return strategy.props(parentConfig, childConfig)\n    }\n    \n    return deepMerge(parentConfig, childConfig)\n  }\n  \n  /**\n   * 合并组件\n   */\n  private mergeComponents(\n    parentComponent?: Component,\n    childComponent?: Component,\n    strategy?: MergeStrategy['components']\n  ): Component {\n    if (!parentComponent) return childComponent!\n    if (!childComponent) return parentComponent\n    \n    if (strategy === 'replace') {\n      return childComponent\n    }\n    \n    if (typeof strategy === 'function') {\n      return strategy(parentComponent, childComponent)\n    }\n    \n    // 创建合并组件\n    return defineComponent({\n      name: 'MergedComponent',\n      setup(props, ctx) {\n        // 渲染子组件，同时保留父组件的某些特性\n        return () => h(childComponent, props, ctx.slots)\n      }\n    })\n  }\n  \n  /**\n   * 合并样式\n   */\n  private mergeStyles(\n    parentStyles?: any,\n    childStyles?: any,\n    strategy?: MergeStrategy['styles']\n  ): any {\n    if (!parentStyles) return childStyles\n    if (!childStyles) return parentStyles\n    \n    if (strategy === 'replace') {\n      return childStyles\n    }\n    \n    if (strategy === 'append') {\n      return `${parentStyles}\\n${childStyles}`\n    }\n    \n    if (typeof strategy === 'function') {\n      return strategy(parentStyles, childStyles)\n    }\n    \n    // 默认合并策略\n    if (typeof parentStyles === 'object' && typeof childStyles === 'object') {\n      return { ...parentStyles, ...childStyles }\n    }\n    \n    return childStyles\n  }\n  \n  /**\n   * 合并数据\n   */\n  private mergeData(\n    parentData: any,\n    childData: any,\n    strategy?: MergeStrategy['data']\n  ): any {\n    if (!parentData) return childData\n    if (!childData) return parentData\n    \n    if (strategy === 'replace') {\n      return childData\n    }\n    \n    if (strategy === 'concat' && Array.isArray(parentData) && Array.isArray(childData)) {\n      return [...parentData, ...childData]\n    }\n    \n    if (typeof strategy === 'function') {\n      return strategy(parentData, childData)\n    }\n    \n    // 默认深度合并\n    return deepMerge(parentData, childData)\n  }\n  \n  /**\n   * 解析模板\n   */\n  private resolveTemplate(templateOrId: Template | string): Template | undefined {\n    if (typeof templateOrId === 'string') {\n      // 先检查是否是混入\n      const mixin = this.getMixin(templateOrId)\n      if (mixin) {\n        return mixin as Template\n      }\n      // 再检查模板\n      return this.templates.get(templateOrId)\n    }\n    return templateOrId\n  }\n  \n  /**\n   * 获取缓存键\n   */\n  private getCacheKey(template: Template, config: TemplateInheritanceConfig): string {\n    const parts = [\n      template.id || 'anonymous',\n      config.extends ? (typeof config.extends === 'string' ? config.extends : config.extends.id) : '',\n      ...(config.mixins || []).map(m => typeof m === 'string' ? m : m.id)\n    ]\n    return parts.filter(Boolean).join(':')\n  }\n  \n  /**\n   * 清除缓存\n   */\n  private clearCache(templateId?: string): void {\n    if (templateId) {\n      // 清除特定模板的缓存\n      const keysToDelete: string[] = []\n      for (const [key, obj] of this.cacheKeyMap) {\n        if (key.includes(templateId)) {\n          this.inheritanceCache.delete(obj)\n          keysToDelete.push(key)\n        }\n      }\n      keysToDelete.forEach(key => this.cacheKeyMap.delete(key))\n    } else {\n      // 清除所有缓存 - WeakMap会自动处理\n      this.cacheKeyMap.clear()\n    }\n    \n    if (this.cleanupTimer) {\n      clearTimeout(this.cleanupTimer)\n      this.cleanupTimer = null\n    }\n  }\n  \n  /**\n   * 清理所有数据\n   */\n  dispose(): void {\n    this.templates.clear()\n    this.mixinCache.clear()\n    this.cacheKeyMap.clear()\n    // WeakMap会自动垃圾回收\n    \n    if (this.cleanupTimer) {\n      clearTimeout(this.cleanupTimer)\n      this.cleanupTimer = null\n    }\n  }\n}\n\n/**\n * 模板块管理器\n */\nexport class TemplateBlockManager {\n  private blocks: Map<string, TemplateBlock[]> = new Map()\n  \n  /**\n   * 定义块\n   */\n  defineBlock(templateId: string, block: TemplateBlock): void {\n    const blocks = this.blocks.get(templateId) || []\n    \n    // 按优先级插入\n    const index = blocks.findIndex(b => (b.priority || 0) < (block.priority || 0))\n    if (index === -1) {\n      blocks.push(block)\n    } else {\n      blocks.splice(index, 0, block)\n    }\n    \n    this.blocks.set(templateId, blocks)\n  }\n  \n  /**\n   * 获取块\n   */\n  getBlock(templateId: string, blockName: string): TemplateBlock | undefined {\n    const blocks = this.blocks.get(templateId)\n    return blocks?.find(b => b.name === blockName)\n  }\n  \n  /**\n   * 覆盖块\n   */\n  overrideBlock(\n    templateId: string,\n    blockName: string,\n    content: VNode | Component | string\n  ): boolean {\n    const block = this.getBlock(templateId, blockName)\n    if (block && block.overridable !== false) {\n      block.content = content\n      return true\n    }\n    return false\n  }\n  \n  /**\n   * 渲染块\n   */\n  renderBlock(templateId: string, blockName: string): VNode | null {\n    const block = this.getBlock(templateId, blockName)\n    if (!block) return null\n    \n    if (typeof block.content === 'string') {\n      return h('div', { innerHTML: block.content })\n    }\n    \n    if (block.content && typeof block.content === 'object' && 'render' in block.content) {\n      return h(block.content as Component)\n    }\n    \n    return block.content as VNode\n  }\n  \n  /**\n   * 获取所有块\n   */\n  getBlocks(templateId: string): TemplateBlock[] {\n    return this.blocks.get(templateId) || []\n  }\n  \n  /**\n   * 清除块\n   */\n  clearBlocks(templateId?: string): void {\n    if (templateId) {\n      this.blocks.delete(templateId)\n    } else {\n      this.blocks.clear()\n    }\n  }\n}\n\n// 创建全局实例\nexport const inheritanceManager = new TemplateInheritanceManager()\nexport const blockManager = new TemplateBlockManager()\n\n/**\n * 创建可继承模板\n */\nexport function createInheritableTemplate(\n  template: Template,\n  config?: TemplateInheritanceConfig\n): Template {\n  if (!config?.extends && !config?.mixins?.length) {\n    return template\n  }\n  \n  return inheritanceManager.extendTemplate(template, config)\n}\n\n/**\n * 创建模板混入\n */\nexport function createTemplateMixin(\n  id: string,\n  mixin: Partial<Template>\n): void {\n  inheritanceManager.createMixin(id, mixin)\n}\n\n/**\n * 注册基础模板\n */\nexport function registerBaseTemplate(\n  id: string,\n  template: Template\n): void {\n  inheritanceManager.registerTemplate(id, template)\n}"],"names":["TemplateInheritanceManager","constructor","templates","Map","inheritanceCache","WeakMap","mixinCache","cacheKeyMap","MAX_TEMPLATES","MAX_MIXINS","MAX_CACHE_KEYS","cleanupTimer","registerTemplate","id","template","set","clearCache","size","oldestKeys","Array","from","keys","slice","forEach","key","delete","getTemplate","get","extendTemplate","child","config","cacheKeyStr","getCacheKey","cacheKeyObj","has","cached","obj","result","extends","parent","resolveTemplate","mergeTemplates","mergeStrategy","maxDepth","mixins","length","mixin","mixinTemplate","createMixin","getMixin","strategy","depth","console","warn","mergedTemplate","mergeConfig","component","mergeComponents","components","styles","mergeStyles","data","mergeData","parentConfig","childConfig","props","deepMerge","parentComponent","childComponent","defineComponent","name","setup","ctx","h","slots","parentStyles","childStyles","parentData","childData","isArray","templateOrId","parts","map","m","filter","Boolean","join","templateId","keysToDelete","includes","push","clear","clearTimeout","dispose","TemplateBlockManager","blocks","defineBlock","block","index","findIndex","b","priority","splice","getBlock","blockName","find","overrideBlock","content","overridable","renderBlock","innerHTML","getBlocks","clearBlocks","inheritanceManager","blockManager","createInheritableTemplate","createTemplateMixin","registerBaseTemplate"],"mappings":"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"}
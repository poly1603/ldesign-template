{"version":3,"file":"useTemplateHooks.cjs","sources":["../../src/composables/useTemplateHooks.ts"],"sourcesContent":["/**\r\n * Template Hooks System\r\n * \r\n * Advanced composable hooks for template lifecycle management\r\n */\r\n\r\nimport type { Component, ComputedRef, Ref, WatchStopHandle } from 'vue'\r\nimport type { DeviceType, TemplateLoadOptions, TemplateMetadata } from '../types'\r\nimport { computed, onMounted, onUnmounted, ref, shallowRef, watch } from 'vue'\r\nimport { getManager } from '../core/manager'\r\n\r\n/**\r\n * Template lifecycle events\r\n */\r\nexport interface TemplateLifecycle {\r\n  onBeforeLoad?: (metadata: TemplateMetadata) => void | Promise<void>\r\n  onLoaded?: (component: Component, metadata: TemplateMetadata) => void\r\n  onBeforeUnload?: (component: Component) => void\r\n  onError?: (error: Error, retry: () => void) => void\r\n  onRetry?: (attemptNumber: number) => void\r\n  onTransition?: (from: string | null, to: string) => void\r\n}\r\n\r\n/**\r\n * Template prefetch options\r\n */\r\nexport interface TemplatePrefetchOptions {\r\n  strategy?: 'eager' | 'lazy' | 'smart' | 'idle'\r\n  delay?: number\r\n  priority?: 'high' | 'normal' | 'low'\r\n  maxConcurrent?: number\r\n}\r\n\r\n/**\r\n * Template hook result\r\n */\r\nexport interface TemplateHookResult {\r\n  component: ComputedRef<Component | null>\r\n  metadata: ComputedRef<TemplateMetadata | null>\r\n  loading: ComputedRef<boolean>\r\n  error: ComputedRef<Error | null>\r\n  retry: () => Promise<void>\r\n  prefetch: (templates: string[]) => Promise<void>\r\n  transition: (category: string, device?: string, name?: string) => Promise<void>\r\n  dispose: () => void\r\n}\r\n\r\n/**\r\n * Advanced template lifecycle hook\r\n */\r\nexport function useTemplateLifecycle(\r\n  category: Ref<string> | string,\r\n  device?: Ref<DeviceType | string> | DeviceType | string,\r\n  name?: Ref<string> | string,\r\n  lifecycle?: TemplateLifecycle,\r\n  options?: TemplateLoadOptions\r\n): TemplateHookResult {\r\n  const manager = getManager()\r\n  \r\n  // Normalize refs\r\n  const categoryRef = ref(category)\r\n  const deviceRef = ref(device || detectDevice())\r\n  const nameRef = ref(name || 'default')\r\n  \r\n  // State\r\n  const component = shallowRef<Component | null>(null)\r\n  const metadata = shallowRef<TemplateMetadata | null>(null)\r\n  const loading = ref(false)\r\n  const error = ref<Error | null>(null)\r\n  const retryCount = ref(0)\r\n  \r\n  // Watchers collection for cleanup\r\n  const watchers: WatchStopHandle[] = []\r\n  \r\n  /**\r\n   * Load template with lifecycle hooks\r\n   */\r\n  async function loadTemplate() {\r\n    try {\r\n      loading.value = true\r\n      error.value = null\r\n      \r\n      // Get metadata first\r\n      const templates = await manager.queryTemplates({\r\n        category: categoryRef.value,\r\n        device: deviceRef.value as DeviceType,\r\n        name: nameRef.value\r\n      })\r\n      \r\n      const meta = templates[0]\r\n      if (!meta) {\r\n        throw new Error(`Template not found: ${categoryRef.value}/${deviceRef.value}/${nameRef.value}`)\r\n      }\r\n      \r\n      metadata.value = meta\r\n      \r\n      // Call before load hook\r\n      await lifecycle?.onBeforeLoad?.(meta)\r\n      \r\n      // Load component\r\n      const loadedComponent = await manager.loadTemplate(\r\n        categoryRef.value,\r\n        deviceRef.value,\r\n        nameRef.value,\r\n        options\r\n      )\r\n      \r\n      // Update state\r\n      component.value = loadedComponent\r\n      \r\n      // Call loaded hook\r\n      lifecycle?.onLoaded?.(loadedComponent, meta)\r\n      \r\n      // Reset retry count on success\r\n      retryCount.value = 0\r\n    } catch (e) {\r\n      error.value = e as Error\r\n      lifecycle?.onError?.(e as Error, retry)\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Retry loading with exponential backoff\r\n   */\r\n  async function retry() {\r\n    retryCount.value++\r\n    lifecycle?.onRetry?.(retryCount.value)\r\n    \r\n    // Exponential backoff: 1s, 2s, 4s, 8s, max 8s\r\n    const delay = Math.min(1000 * 2**(retryCount.value - 1), 8000)\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, delay))\r\n    await loadTemplate()\r\n  }\r\n  \r\n  /**\r\n   * Prefetch templates\r\n   */\r\n  const prefetch = async (templates: string[]) => {\r\n    const tasks = templates.map(template => {\r\n      const [cat, dev, nm] = template.split('/')\r\n      return manager.preloadTemplate(cat, dev, nm)\r\n    })\r\n    \r\n    await Promise.allSettled(tasks)\r\n  }\r\n  \r\n  /**\r\n   * Transition to another template\r\n   */\r\n  const transition = async (category: string, device?: string, name?: string) => {\r\n    const oldTemplate = `${categoryRef.value}/${deviceRef.value}/${nameRef.value}`\r\n    const newTemplate = `${category}/${device || deviceRef.value}/${name || nameRef.value}`\r\n    \r\n    // Call transition hook\r\n    lifecycle?.onTransition?.(oldTemplate, newTemplate)\r\n    \r\n    // Call before unload for current component\r\n    if (component.value) {\r\n      lifecycle?.onBeforeUnload?.(component.value)\r\n    }\r\n    \r\n    // Update refs\r\n    categoryRef.value = category\r\n    if (device) deviceRef.value = device\r\n    if (name) nameRef.value = name\r\n    \r\n    // Load new template\r\n    await loadTemplate()\r\n  }\r\n  \r\n  /**\r\n   * Dispose and cleanup\r\n   */\r\n  const dispose = () => {\r\n    // Stop all watchers\r\n    watchers.forEach(stop => stop())\r\n    watchers.length = 0\r\n    \r\n    // Call before unload\r\n    if (component.value) {\r\n      lifecycle?.onBeforeUnload?.(component.value)\r\n    }\r\n    \r\n    // Clear state\r\n    component.value = null\r\n    metadata.value = null\r\n    error.value = null\r\n    retryCount.value = 0\r\n  }\r\n  \r\n  // Watch for changes\r\n  const stopWatcher = watch(\r\n    [categoryRef, deviceRef, nameRef],\r\n    () => loadTemplate(),\r\n    { immediate: false }\r\n  )\r\n  watchers.push(stopWatcher)\r\n  \r\n  // Initial load\r\n  onMounted(() => {\r\n    loadTemplate()\r\n  })\r\n  \r\n  // Cleanup\r\n  onUnmounted(() => {\r\n    dispose()\r\n  })\r\n  \r\n  return {\r\n    component: computed(() => component.value),\r\n    metadata: computed(() => metadata.value),\r\n    loading: computed(() => loading.value),\r\n    error: computed(() => error.value),\r\n    retry,\r\n    prefetch,\r\n    transition,\r\n    dispose\r\n  }\r\n}\r\n\r\n/**\r\n * Smart template prefetching hook\r\n */\r\nexport function useTemplatePrefetch(\r\n  options: TemplatePrefetchOptions = {}\r\n): {\r\n  prefetch: (templates: string[]) => Promise<void>\r\n  prefetchRelated: (category: string, device: string) => Promise<void>\r\n  cancelPrefetch: () => void\r\n} {\r\n  const manager = getManager()\r\n  const prefetchQueue = ref<string[]>([])\r\n  const isPrefetching = ref(false)\r\n  const abortController = ref<AbortController | null>(null)\r\n  \r\n  const {\r\n    strategy = 'smart',\r\n    delay = 0,\r\n    // priority = 'normal', // Not used currently\r\n    maxConcurrent = 3\r\n  } = options\r\n  \r\n  /**\r\n   * Prefetch templates based on strategy\r\n   */\r\n  const prefetch = async (templates: string[]) => {\r\n    // Cancel ongoing prefetch\r\n    if (abortController.value) {\r\n      abortController.value.abort()\r\n    }\r\n    \r\n    abortController.value = new AbortController()\r\n    prefetchQueue.value = templates\r\n    isPrefetching.value = true\r\n    \r\n    try {\r\n      switch (strategy) {\r\n        case 'eager':\r\n          // Load all immediately\r\n          await Promise.all(\r\n            templates.map(t => {\r\n              const [cat, dev, nm] = t.split('/')\r\n              return manager.preloadTemplate(cat, dev, nm)\r\n            })\r\n          )\r\n          break\r\n          \r\n        case 'lazy':\r\n          // Load one by one with delay\r\n          for (const template of templates) {\r\n            if (abortController.value.signal.aborted) break\r\n            \r\n            const [cat, dev, nm] = template.split('/')\r\n            await manager.preloadTemplate(cat, dev, nm)\r\n            \r\n            if (delay > 0) {\r\n              await new Promise(resolve => setTimeout(resolve, delay))\r\n            }\r\n          }\r\n          break\r\n          \r\n        case 'smart': {\r\n          // Load in batches\r\n          const batches = []\r\n          for (let i = 0; i < templates.length; i += maxConcurrent) {\r\n            batches.push(templates.slice(i, i + maxConcurrent))\r\n          }\r\n          \r\n          for (const batch of batches) {\r\n            if (abortController.value.signal.aborted) break\r\n            \r\n            await Promise.all(\r\n              batch.map(t => {\r\n                const [cat, dev, nm] = t.split('/')\r\n                return manager.preloadTemplate(cat, dev, nm)\r\n              })\r\n            )\r\n            \r\n            if (delay > 0) {\r\n              await new Promise(resolve => setTimeout(resolve, delay))\r\n            }\r\n          }\r\n          break\r\n        }\r\n          \r\n        case 'idle':\r\n          // Use requestIdleCallback if available\r\n          if ('requestIdleCallback' in window) {\r\n            for (const template of templates) {\r\n              if (abortController.value.signal.aborted) break\r\n              \r\n              await new Promise<void>(resolve => {\r\n                (window as any).requestIdleCallback(() => {\r\n                  const [cat, dev, nm] = template.split('/')\r\n                  manager.preloadTemplate(cat, dev, nm).then(() => resolve())\r\n                })\r\n              })\r\n            }\r\n          } else {\r\n            // Fallback to lazy strategy\r\n            await prefetch(templates)\r\n          }\r\n          break\r\n      }\r\n    } finally {\r\n      isPrefetching.value = false\r\n      prefetchQueue.value = []\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Prefetch related templates\r\n   */\r\n  const prefetchRelated = async (category: string, device: string) => {\r\n    // Get all templates in the same category\r\n    const templates = await manager.getTemplatesByCategory(category)\r\n    \r\n    // Filter by device and create prefetch list\r\n    const prefetchList = templates\r\n      .filter(t => t.device === device)\r\n      .map(t => `${t.category}/${t.device}/${t.name}`)\r\n    \r\n    await prefetch(prefetchList)\r\n  }\r\n  \r\n  /**\r\n   * Cancel ongoing prefetch\r\n   */\r\n  const cancelPrefetch = () => {\r\n    if (abortController.value) {\r\n      abortController.value.abort()\r\n      abortController.value = null\r\n    }\r\n    isPrefetching.value = false\r\n    prefetchQueue.value = []\r\n  }\r\n  \r\n  // Cleanup on unmount\r\n  onUnmounted(() => {\r\n    cancelPrefetch()\r\n  })\r\n  \r\n  return {\r\n    prefetch,\r\n    prefetchRelated,\r\n    cancelPrefetch\r\n  }\r\n}\r\n\r\n/**\r\n * Template navigation hook\r\n */\r\nexport function useTemplateNavigation() {\r\n  const history = ref<string[]>([])\r\n  const currentIndex = ref(-1)\r\n  \r\n  /**\r\n   * Navigate to template\r\n   */\r\n  const navigate = (template: string) => {\r\n    // Remove forward history when navigating to new template\r\n    if (currentIndex.value < history.value.length - 1) {\r\n      history.value = history.value.slice(0, currentIndex.value + 1)\r\n    }\r\n    \r\n    history.value.push(template)\r\n    currentIndex.value = history.value.length - 1\r\n  }\r\n  \r\n  /**\r\n   * Go back in history\r\n   */\r\n  const back = (): string | null => {\r\n    if (currentIndex.value > 0) {\r\n      currentIndex.value--\r\n      return history.value[currentIndex.value]\r\n    }\r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * Go forward in history\r\n   */\r\n  const forward = (): string | null => {\r\n    if (currentIndex.value < history.value.length - 1) {\r\n      currentIndex.value++\r\n      return history.value[currentIndex.value]\r\n    }\r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * Check if can go back\r\n   */\r\n  const canGoBack = computed(() => currentIndex.value > 0)\r\n  \r\n  /**\r\n   * Check if can go forward\r\n   */\r\n  const canGoForward = computed(() => currentIndex.value < history.value.length - 1)\r\n  \r\n  /**\r\n   * Get current template\r\n   */\r\n  const current = computed(() => \r\n    currentIndex.value >= 0 ? history.value[currentIndex.value] : null\r\n  )\r\n  \r\n  /**\r\n   * Clear history\r\n   */\r\n  const clearHistory = () => {\r\n    history.value = []\r\n    currentIndex.value = -1\r\n  }\r\n  \r\n  return {\r\n    navigate,\r\n    back,\r\n    forward,\r\n    canGoBack,\r\n    canGoForward,\r\n    current,\r\n    history: computed(() => [...history.value]),\r\n    clearHistory\r\n  }\r\n}\r\n\r\n/**\r\n * Template performance monitoring hook\r\n */\r\nexport function useTemplatePerformance() {\r\n  const metrics = ref<Map<string, PerformanceEntry>>(new Map())\r\n  const observer = ref<PerformanceObserver | null>(null)\r\n  \r\n  /**\r\n   * Start monitoring\r\n   */\r\n  const startMonitoring = () => {\r\n    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {\r\n      return\r\n    }\r\n    \r\n    observer.value = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (entry.name.includes('template-load')) {\r\n          metrics.value.set(entry.name, entry)\r\n        }\r\n      }\r\n    })\r\n    \r\n    observer.value.observe({ entryTypes: ['measure', 'navigation'] })\r\n  }\r\n  \r\n  /**\r\n   * Stop monitoring\r\n   */\r\n  const stopMonitoring = () => {\r\n    observer.value?.disconnect()\r\n    observer.value = null\r\n  }\r\n  \r\n  /**\r\n   * Mark template load start\r\n   */\r\n  const markLoadStart = (templateId: string) => {\r\n    if (typeof window !== 'undefined' && 'performance' in window) {\r\n      performance.mark(`template-load-start-${templateId}`)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Mark template load end and measure\r\n   */\r\n  const markLoadEnd = (templateId: string) => {\r\n    if (typeof window !== 'undefined' && 'performance' in window) {\r\n      const endMark = `template-load-end-${templateId}`\r\n      const startMark = `template-load-start-${templateId}`\r\n      \r\n      performance.mark(endMark)\r\n      performance.measure(\r\n        `template-load-${templateId}`,\r\n        startMark,\r\n        endMark\r\n      )\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get load time for template\r\n   */\r\n  const getLoadTime = (templateId: string): number | null => {\r\n    const entry = metrics.value.get(`template-load-${templateId}`)\r\n    return entry ? entry.duration : null\r\n  }\r\n  \r\n  /**\r\n   * Get average load time\r\n   */\r\n  const getAverageLoadTime = (): number => {\r\n    const times = Array.from(metrics.value.values())\r\n      .map(e => e.duration)\r\n      .filter(d => d > 0)\r\n    \r\n    if (times.length === 0) return 0\r\n    return times.reduce((a, b) => a + b, 0) / times.length\r\n  }\r\n  \r\n  /**\r\n   * Clear metrics\r\n   */\r\n  const clearMetrics = () => {\r\n    metrics.value.clear()\r\n    if (typeof window !== 'undefined' && 'performance' in window) {\r\n      performance.clearMarks()\r\n      performance.clearMeasures()\r\n    }\r\n  }\r\n  \r\n  // Auto start monitoring\r\n  onMounted(() => {\r\n    startMonitoring()\r\n  })\r\n  \r\n  // Cleanup\r\n  onUnmounted(() => {\r\n    stopMonitoring()\r\n    clearMetrics()\r\n  })\r\n  \r\n  return {\r\n    markLoadStart,\r\n    markLoadEnd,\r\n    getLoadTime,\r\n    getAverageLoadTime,\r\n    clearMetrics,\r\n    metrics: computed(() => new Map(metrics.value))\r\n  }\r\n}\r\n\r\n/**\r\n * Detect device type\r\n */\r\nfunction detectDevice(): DeviceType {\r\n  if (typeof window === 'undefined') return 'desktop'\r\n  const width = window.innerWidth\r\n  if (width < 768) return 'mobile'\r\n  if (width < 1024) return 'tablet'\r\n  return 'desktop'\r\n}"],"names":["useTemplateLifecycle","category","device","name","lifecycle","options","manager","getManager","categoryRef","ref","deviceRef","detectDevice","nameRef","component","shallowRef","metadata","loading","error","retryCount","watchers","loadTemplate","value","templates","queryTemplates","meta","Error","onBeforeLoad","loadedComponent","onLoaded","e","onError","retry","onRetry","delay","Math","min","Promise","resolve","setTimeout","prefetch","tasks","map","template","cat","dev","nm","split","preloadTemplate","allSettled","transition","oldTemplate","newTemplate","onTransition","onBeforeUnload","dispose","forEach","stop","length","stopWatcher","watch","immediate","push","onMounted","onUnmounted","computed","useTemplatePrefetch","prefetchQueue","isPrefetching","abortController","strategy","maxConcurrent","abort","AbortController","all","t","signal","aborted","batches","i","slice","batch","window","requestIdleCallback","then","prefetchRelated","getTemplatesByCategory","prefetchList","filter","cancelPrefetch","useTemplateNavigation","history","currentIndex","navigate","back","forward","canGoBack","canGoForward","current","clearHistory","useTemplatePerformance","metrics","Map","observer","startMonitoring","PerformanceObserver","list","entry","getEntries","includes","set","observe","entryTypes","stopMonitoring","disconnect","markLoadStart","templateId","performance","mark","markLoadEnd","endMark","startMark","measure","getLoadTime","get","duration","getAverageLoadTime","times","Array","from","values","d","reduce","a","b","clearMetrics","clear","clearMarks","clearMeasures","width","innerWidth"],"mappings":"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"}
{"version":3,"file":"useTemplateEventBus.cjs","sources":["../../src/composables/useTemplateEventBus.ts"],"sourcesContent":["/**\r\n * 模板事件总线系统\r\n * \r\n * 提供模板间的通信机制\r\n */\r\n\r\nimport type { InjectionKey } from 'vue'\r\nimport { inject, onUnmounted, provide, ref } from 'vue'\r\n\r\n/**\r\n * 事件处理器类型\r\n */\r\nexport type EventHandler<T = any> = (payload: T) => void | Promise<void>\r\n\r\n/**\r\n * 事件订阅选项\r\n */\r\nexport interface EventSubscribeOptions {\r\n  once?: boolean      // 只监听一次\r\n  priority?: number    // 优先级（数字越大优先级越高）\r\n  filter?: (payload: any) => boolean  // 过滤器\r\n}\r\n\r\n/**\r\n * 事件订阅者\r\n */\r\ninterface EventSubscriber {\r\n  handler: EventHandler\r\n  options: EventSubscribeOptions\r\n  id: string\r\n}\r\n\r\n/**\r\n * 事件总线接口\r\n */\r\nexport interface TemplateEventBus {\r\n  emit: <T = any>(event: string, payload?: T) => Promise<void>\r\n  on: <T = any>(event: string, handler: EventHandler<T>, options?: EventSubscribeOptions) => () => void\r\n  off: (event: string, handler?: EventHandler) => void\r\n  once: <T = any>(event: string, handler: EventHandler<T>) => () => void\r\n  clear: (event?: string) => void\r\n  hasListeners: (event: string) => boolean\r\n  getEvents: () => string[]\r\n}\r\n\r\n/**\r\n * 全局事件总线\r\n */\r\nclass GlobalEventBus implements TemplateEventBus {\r\n  private events = new Map<string, EventSubscriber[]>()\r\n  private eventHistory = new Map<string, any[]>()\r\n  private maxHistorySize = 100\r\n  private idCounter = 0\r\n  // 使用 WeakMap 存储组件相关的订阅，组件销毁时自动清理\r\n  private componentSubscriptions = new WeakMap<object, Set<string>>()\r\n  \r\n  /**\r\n   * 发送事件\r\n   */\r\n  async emit<T = any>(event: string, payload?: T): Promise<void> {\r\n    // 记录历史\r\n    this.recordHistory(event, payload)\r\n    \r\n    // 获取订阅者\r\n    const subscribers = this.events.get(event)\r\n    if (!subscribers || subscribers.length === 0) return\r\n    \r\n    // 按优先级排序\r\n    const sortedSubscribers = [...subscribers].sort(\r\n      (a, b) => (b.options.priority || 0) - (a.options.priority || 0)\r\n    )\r\n    \r\n    // 需要移除的一次性订阅者\r\n    const toRemove: string[] = []\r\n    \r\n    // 执行处理器\r\n    for (const subscriber of sortedSubscribers) {\r\n      // 应用过滤器\r\n      if (subscriber.options.filter && !subscriber.options.filter(payload)) {\r\n        continue\r\n      }\r\n      \r\n      try {\r\n        await subscriber.handler(payload)\r\n      } catch (error) {\r\n        console.error(`Event handler error for \"${event}\":`, error)\r\n      }\r\n      \r\n      // 标记一次性订阅者\r\n      if (subscriber.options.once) {\r\n        toRemove.push(subscriber.id)\r\n      }\r\n    }\r\n    \r\n    // 移除一次性订阅者\r\n    if (toRemove.length > 0) {\r\n      const remaining = subscribers.filter(s => !toRemove.includes(s.id))\r\n      if (remaining.length > 0) {\r\n        this.events.set(event, remaining)\r\n      } else {\r\n        this.events.delete(event)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 监听事件\r\n   */\r\n  on<T = any>(\r\n    event: string,\r\n    handler: EventHandler<T>,\r\n    options: EventSubscribeOptions = {}\r\n  ): () => void {\r\n    const subscribers = this.events.get(event) || []\r\n    const id = `sub_${++this.idCounter}`\r\n    \r\n    const subscriber: EventSubscriber = {\r\n      handler,\r\n      options,\r\n      id\r\n    }\r\n    \r\n    subscribers.push(subscriber)\r\n    this.events.set(event, subscribers)\r\n    \r\n    // 返回取消订阅函数\r\n    return () => {\r\n      this.off(event, handler)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 取消监听\r\n   */\r\n  off(event: string, handler?: EventHandler): void {\r\n    const subscribers = this.events.get(event)\r\n    if (!subscribers) return\r\n    \r\n    if (!handler) {\r\n      // 移除所有监听器\r\n      this.events.delete(event)\r\n    } else {\r\n      // 移除特定监听器\r\n      const remaining = subscribers.filter(s => s.handler !== handler)\r\n      if (remaining.length > 0) {\r\n        this.events.set(event, remaining)\r\n      } else {\r\n        this.events.delete(event)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 监听一次\r\n   */\r\n  once<T = any>(event: string, handler: EventHandler<T>): () => void {\r\n    return this.on(event, handler, { once: true })\r\n  }\r\n  \r\n  /**\r\n   * 清空事件\r\n   */\r\n  clear(event?: string): void {\r\n    if (event) {\r\n      this.events.delete(event)\r\n      this.eventHistory.delete(event)\r\n    } else {\r\n      this.events.clear()\r\n      this.eventHistory.clear()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 检查是否有监听器\r\n   */\r\n  hasListeners(event: string): boolean {\r\n    const subscribers = this.events.get(event)\r\n    return !!subscribers && subscribers.length > 0\r\n  }\r\n  \r\n  /**\r\n   * 获取所有事件名\r\n   */\r\n  getEvents(): string[] {\r\n    return Array.from(this.events.keys())\r\n  }\r\n  \r\n  /**\r\n   * 记录事件历史\r\n   */\r\n  private recordHistory(event: string, payload: any): void {\r\n    let history = this.eventHistory.get(event)\r\n    if (!history) {\r\n      history = []\r\n      this.eventHistory.set(event, history)\r\n    }\r\n    \r\n    // 使用环形缓冲区优化内存\r\n    if (history.length >= this.maxHistorySize) {\r\n      // 直接覆盖最老的记录，避免频繁的数组操作\r\n      const index = history.length % this.maxHistorySize\r\n      history[index] = {\r\n        payload,\r\n        timestamp: Date.now()\r\n      }\r\n    } else {\r\n      history.push({\r\n        payload,\r\n        timestamp: Date.now()\r\n      })\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 获取事件历史\r\n   */\r\n  getHistory(event: string): any[] {\r\n    return this.eventHistory.get(event) || []\r\n  }\r\n}\r\n\r\n// 全局事件总线实例\r\nconst globalBus = new GlobalEventBus()\r\n\r\n/**\r\n * 事件总线注入键\r\n */\r\nconst EventBusKey: InjectionKey<TemplateEventBus> = Symbol('TemplateEventBus')\r\n\r\n/**\r\n * 使用模板事件总线\r\n */\r\nexport function useTemplateEventBus(isolated: boolean = false): TemplateEventBus {\r\n  // 尝试从上下文注入\r\n  const injectedBus = inject<TemplateEventBus | null>(EventBusKey, null)\r\n  \r\n  if (!isolated && injectedBus) {\r\n    return injectedBus\r\n  }\r\n  \r\n  if (!isolated) {\r\n    // 使用全局总线\r\n    return globalBus\r\n  }\r\n  \r\n  // 创建隔离的总线\r\n  const localBus = new GlobalEventBus()\r\n  \r\n  // 组件卸载时清理\r\n  onUnmounted(() => {\r\n    localBus.clear()\r\n    // 清理 WeakMap 引用\r\n    if ('componentSubscriptions' in localBus) {\r\n      (localBus as any).componentSubscriptions = new WeakMap()\r\n    }\r\n  })\r\n  \r\n  return localBus\r\n}\r\n\r\n/**\r\n * 提供事件总线\r\n */\r\nexport function provideTemplateEventBus(): TemplateEventBus {\r\n  const bus = new GlobalEventBus()\r\n  provide(EventBusKey, bus)\r\n  return bus\r\n}\r\n\r\n/**\r\n * 预定义的事件类型\r\n */\r\nexport const TEMPLATE_EVENTS = {\r\n  // 模板生命周期\r\n  TEMPLATE_LOAD: 'template:load',\r\n  TEMPLATE_LOADED: 'template:loaded',\r\n  TEMPLATE_ERROR: 'template:error',\r\n  TEMPLATE_UNLOAD: 'template:unload',\r\n  \r\n  // 模板切换\r\n  TEMPLATE_CHANGE: 'template:change',\r\n  TEMPLATE_SWITCH: 'template:switch',\r\n  \r\n  // 设备变化\r\n  DEVICE_CHANGE: 'device:change',\r\n  \r\n  // 主题变化\r\n  THEME_CHANGE: 'theme:change',\r\n  \r\n  // 表单事件\r\n  FORM_SUBMIT: 'form:submit',\r\n  FORM_RESET: 'form:reset',\r\n  FORM_VALIDATE: 'form:validate',\r\n  FORM_SAVE: 'form:save',\r\n  \r\n  // 导航事件\r\n  NAVIGATE_TO: 'navigate:to',\r\n  NAVIGATE_BACK: 'navigate:back',\r\n  NAVIGATE_FORWARD: 'navigate:forward',\r\n  \r\n  // 用户操作\r\n  USER_LOGIN: 'user:login',\r\n  USER_LOGOUT: 'user:logout',\r\n  USER_ACTION: 'user:action',\r\n  \r\n  // 数据变化\r\n  DATA_UPDATE: 'data:update',\r\n  DATA_DELETE: 'data:delete',\r\n  DATA_CREATE: 'data:create'\r\n} as const\r\n\r\n/**\r\n * 事件类型\r\n */\r\nexport type TemplateEventType = typeof TEMPLATE_EVENTS[keyof typeof TEMPLATE_EVENTS]\r\n\r\n/**\r\n * 使用特定事件\r\n */\r\nexport function useTemplateEvent<T = any>(\r\n  event: string | TemplateEventType,\r\n  handler?: EventHandler<T>,\r\n  options?: EventSubscribeOptions\r\n) {\r\n  const bus = useTemplateEventBus()\r\n  const unsubscribe = ref<(() => void) | null>(null)\r\n  \r\n  // 自动订阅\r\n  if (handler) {\r\n    unsubscribe.value = bus.on(event, handler, options)\r\n  }\r\n  \r\n  // 组件卸载时取消订阅\r\n  onUnmounted(() => {\r\n    unsubscribe.value?.()\r\n  })\r\n  \r\n  return {\r\n    emit: (payload?: T) => bus.emit(event, payload),\r\n    on: (h: EventHandler<T>, opts?: EventSubscribeOptions) => {\r\n      return bus.on(event, h, opts)\r\n    },\r\n    once: (h: EventHandler<T>) => bus.once(event, h),\r\n    off: (h?: EventHandler) => bus.off(event, h),\r\n    hasListeners: () => bus.hasListeners(event)\r\n  }\r\n}\r\n\r\n/**\r\n * 批量事件处理\r\n */\r\nexport function useTemplateEvents(\r\n  events: Record<string, EventHandler>\r\n) {\r\n  const bus = useTemplateEventBus()\r\n  const unsubscribers: (() => void)[] = []\r\n  \r\n  // 批量订阅\r\n  Object.entries(events).forEach(([event, handler]) => {\r\n    const unsub = bus.on(event, handler)\r\n    unsubscribers.push(unsub)\r\n  })\r\n  \r\n  // 组件卸载时批量取消订阅\r\n  onUnmounted(() => {\r\n    unsubscribers.forEach(unsub => unsub())\r\n  })\r\n  \r\n  return bus\r\n}\r\n\r\n/**\r\n * 事件中间件\r\n */\r\nexport type EventMiddleware = (\r\n  event: string,\r\n  payload: any,\r\n  next: () => Promise<void>\r\n) => void | Promise<void>\r\n\r\n/**\r\n * 带中间件的事件总线\r\n */\r\nexport class MiddlewareEventBus extends GlobalEventBus {\r\n  private middlewares: EventMiddleware[] = []\r\n  \r\n  /**\r\n   * 添加中间件\r\n   */\r\n  use(middleware: EventMiddleware): void {\r\n    this.middlewares.push(middleware)\r\n  }\r\n  \r\n  /**\r\n   * 发送事件（通过中间件）\r\n   */\r\n  async emit<T = any>(event: string, payload?: T): Promise<void> {\r\n    let index = 0\r\n    \r\n    const next = async () => {\r\n      if (index < this.middlewares.length) {\r\n        const middleware = this.middlewares[index++]\r\n        await middleware(event, payload, next)\r\n      } else {\r\n        await super.emit(event, payload)\r\n      }\r\n    }\r\n    \r\n    await next()\r\n  }\r\n}\r\n\r\n/**\r\n * 创建带中间件的事件总线\r\n */\r\nexport function createMiddlewareEventBus(): MiddlewareEventBus {\r\n  return new MiddlewareEventBus()\r\n}\r\n\r\n// 导出全局事件总线实例\r\nexport const templateEventBus = globalBus"],"names":["GlobalEventBus","constructor","events","Map","eventHistory","maxHistorySize","idCounter","componentSubscriptions","WeakMap","emit","event","payload","recordHistory","subscribers","get","length","sortedSubscribers","sort","a","b","options","priority","toRemove","subscriber","filter","handler","error","console","once","push","id","remaining","s","includes","set","delete","on","off","clear","hasListeners","getEvents","Array","from","keys","history","index","timestamp","Date","now","getHistory","globalBus","EventBusKey","Symbol","useTemplateEventBus","isolated","injectedBus","inject","localBus","onUnmounted","provideTemplateEventBus","bus","provide","TEMPLATE_EVENTS","TEMPLATE_LOAD","TEMPLATE_LOADED","TEMPLATE_ERROR","TEMPLATE_UNLOAD","TEMPLATE_CHANGE","TEMPLATE_SWITCH","DEVICE_CHANGE","THEME_CHANGE","FORM_SUBMIT","FORM_RESET","FORM_VALIDATE","FORM_SAVE","NAVIGATE_TO","NAVIGATE_BACK","NAVIGATE_FORWARD","USER_LOGIN","USER_LOGOUT","USER_ACTION","DATA_UPDATE","DATA_DELETE","DATA_CREATE","useTemplateEvent","unsubscribe","ref","value","h","opts","useTemplateEvents","unsubscribers","Object","entries","forEach","unsub","MiddlewareEventBus","middlewares","use","middleware","next","createMiddlewareEventBus","templateEventBus"],"mappings":"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"}
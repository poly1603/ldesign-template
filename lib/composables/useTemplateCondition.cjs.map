{"version":3,"file":"useTemplateCondition.cjs","sources":["../../src/composables/useTemplateCondition.ts"],"sourcesContent":["/**\r\n * 条件渲染与A/B测试系统\r\n * \r\n * 根据条件自动选择模板，支持A/B测试\r\n */\r\n\r\nimport type { Ref } from 'vue'\r\nimport type { DeviceType } from '../types'\r\nimport { computed, onMounted, ref, watch } from 'vue'\r\n\r\n/**\r\n * 条件类型\r\n */\r\nexport interface TemplateCondition {\r\n  /** 条件ID */\r\n  id?: string\r\n  /** 测试函数 */\r\n  test: (context: TemplateContext) => boolean | Promise<boolean>\r\n  /** 满足条件时使用的模板 */\r\n  template: string\r\n  /** 权重（用于A/B测试） */\r\n  weight?: number\r\n  /** 优先级（数字越大优先级越高） */\r\n  priority?: number\r\n  /** 条件描述 */\r\n  description?: string\r\n  /** 是否启用 */\r\n  enabled?: boolean\r\n}\r\n\r\n/**\r\n * 模板上下文\r\n */\r\nexport interface TemplateContext {\r\n  /** 用户信息 */\r\n  user?: {\r\n    id?: string\r\n    role?: string\r\n    isVip?: boolean\r\n    isNewUser?: boolean\r\n    [key: string]: any\r\n  }\r\n  /** 设备信息 */\r\n  device?: {\r\n    type?: DeviceType\r\n    screen?: { width: number; height: number }\r\n    userAgent?: string\r\n  }\r\n  /** 时间信息 */\r\n  time?: {\r\n    hour?: number\r\n    dayOfWeek?: number\r\n    date?: Date\r\n  }\r\n  /** 地理信息 */\r\n  geo?: {\r\n    country?: string\r\n    region?: string\r\n    city?: string\r\n    language?: string\r\n  }\r\n  /** 功能标记 */\r\n  features?: Record<string, boolean>\r\n  /** 自定义数据 */\r\n  custom?: Record<string, any>\r\n}\r\n\r\n/**\r\n * A/B测试配置\r\n */\r\nexport interface ABTestConfig {\r\n  /** 测试ID */\r\n  id: string\r\n  /** 测试名称 */\r\n  name?: string\r\n  /** 变体列表 */\r\n  variants: ABTestVariant[]\r\n  /** 是否启用 */\r\n  enabled?: boolean\r\n  /** 流量分配策略 */\r\n  strategy?: 'random' | 'weighted' | 'hash'\r\n  /** 用于哈希的种子 */\r\n  seed?: string\r\n  /** 开始时间 */\r\n  startDate?: Date\r\n  /** 结束时间 */\r\n  endDate?: Date\r\n  /** 目标指标 */\r\n  metrics?: string[]\r\n}\r\n\r\n/**\r\n * A/B测试变体\r\n */\r\nexport interface ABTestVariant {\r\n  /** 变体ID */\r\n  id: string\r\n  /** 模板名称 */\r\n  template: string\r\n  /** 权重 */\r\n  weight: number\r\n  /** 描述 */\r\n  description?: string\r\n}\r\n\r\n/**\r\n * A/B测试结果\r\n */\r\nexport interface ABTestResult {\r\n  /** 选中的变体 */\r\n  variant: ABTestVariant\r\n  /** 测试ID */\r\n  testId: string\r\n  /** 分配原因 */\r\n  reason: string\r\n  /** 时间戳 */\r\n  timestamp: number\r\n}\r\n\r\n/**\r\n * 使用条件渲染\r\n */\r\nexport function useTemplateCondition(\r\n  conditions: TemplateCondition[] = [],\r\n  context: Ref<TemplateContext> | TemplateContext = {}\r\n) {\r\n  const contextRef = ref(context)\r\n  const selectedTemplate = ref<string | null>(null)\r\n  const evaluating = ref(false)\r\n  const lastEvaluation = ref<Date | null>(null)\r\n  \r\n  /**\r\n   * 评估条件\r\n   */\r\n  const evaluateConditions = async (): Promise<string | null> => {\r\n    evaluating.value = true\r\n    \r\n    try {\r\n      // 过滤启用的条件\r\n      const enabledConditions = conditions.filter(c => c.enabled !== false)\r\n      \r\n      // 按优先级排序\r\n      const sortedConditions = [...enabledConditions].sort(\r\n        (a, b) => (b.priority || 0) - (a.priority || 0)\r\n      )\r\n      \r\n      // 逐个测试条件\r\n      for (const condition of sortedConditions) {\r\n        try {\r\n          const result = await condition.test(contextRef.value)\r\n          if (result) {\r\n            lastEvaluation.value = new Date()\r\n            return condition.template\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error evaluating condition ${condition.id}:`, error)\r\n        }\r\n      }\r\n      \r\n      return null\r\n    } finally {\r\n      evaluating.value = false\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 选择模板\r\n   */\r\n  const selectTemplate = async () => {\r\n    const template = await evaluateConditions()\r\n    selectedTemplate.value = template\r\n    return template\r\n  }\r\n  \r\n  /**\r\n   * 强制重新评估\r\n   */\r\n  const reevaluate = () => {\r\n    return selectTemplate()\r\n  }\r\n  \r\n  // 监听上下文变化\r\n  watch(contextRef, () => {\r\n    selectTemplate()\r\n  }, { deep: true })\r\n  \r\n  // 初始评估\r\n  onMounted(() => {\r\n    selectTemplate()\r\n  })\r\n  \r\n  return {\r\n    selectedTemplate: computed(() => selectedTemplate.value),\r\n    evaluating: computed(() => evaluating.value),\r\n    lastEvaluation: computed(() => lastEvaluation.value),\r\n    context: contextRef,\r\n    selectTemplate,\r\n    reevaluate\r\n  }\r\n}\r\n\r\n/**\r\n * 使用A/B测试\r\n */\r\nexport function useTemplateABTest(\r\n  config: ABTestConfig,\r\n  userId?: string\r\n) {\r\n  const currentVariant = ref<ABTestVariant | null>(null)\r\n  const testResult = ref<ABTestResult | null>(null)\r\n  const isActive = ref(false)\r\n  \r\n  /**\r\n   * 检查测试是否激活\r\n   */\r\n  const checkActive = (): boolean => {\r\n    if (!config.enabled) return false\r\n    \r\n    const now = new Date()\r\n    \r\n    if (config.startDate && now < config.startDate) return false\r\n    if (config.endDate && now > config.endDate) return false\r\n    \r\n    return true\r\n  }\r\n  \r\n  /**\r\n   * 哈希分配\r\n   */\r\n  const assignByHash = (): ABTestVariant => {\r\n    const seed = config.seed || config.id\r\n    const hash = hashCode(`${seed}-${userId || Math.random()}`)\r\n    const totalWeight = config.variants.reduce((sum, v) => sum + v.weight, 0)\r\n    \r\n    let threshold = 0\r\n    const normalizedHash = Math.abs(hash % totalWeight)\r\n    \r\n    for (const variant of config.variants) {\r\n      threshold += variant.weight\r\n      if (normalizedHash < threshold) {\r\n        return variant\r\n      }\r\n    }\r\n    \r\n    return config.variants[0]\r\n  }\r\n  \r\n  /**\r\n   * 权重分配\r\n   */\r\n  const assignByWeight = (): ABTestVariant => {\r\n    const totalWeight = config.variants.reduce((sum, v) => sum + v.weight, 0)\r\n    const random = Math.random() * totalWeight\r\n    \r\n    let threshold = 0\r\n    for (const variant of config.variants) {\r\n      threshold += variant.weight\r\n      if (random < threshold) {\r\n        return variant\r\n      }\r\n    }\r\n    \r\n    return config.variants[0]\r\n  }\r\n  \r\n  /**\r\n   * 随机分配\r\n   */\r\n  const assignRandomly = (): ABTestVariant => {\r\n    const index = Math.floor(Math.random() * config.variants.length)\r\n    return config.variants[index]\r\n  }\r\n  \r\n  /**\r\n   * 分配变体\r\n   */\r\n  const assignVariant = (): ABTestVariant => {\r\n    const strategy = config.strategy || 'random'\r\n    \r\n    switch (strategy) {\r\n      case 'hash':\r\n        return assignByHash()\r\n      case 'weighted':\r\n        return assignByWeight()\r\n      case 'random':\r\n      default:\r\n        return assignRandomly()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 运行测试\r\n   */\r\n  const runTest = (): ABTestResult | null => {\r\n    isActive.value = checkActive()\r\n    \r\n    if (!isActive.value) return null\r\n    \r\n    const variant = assignVariant()\r\n    currentVariant.value = variant\r\n    \r\n    const result: ABTestResult = {\r\n      variant,\r\n      testId: config.id,\r\n      reason: `Assigned by ${config.strategy || 'random'} strategy`,\r\n      timestamp: Date.now()\r\n    }\r\n    \r\n    testResult.value = result\r\n    \r\n    // 保存到localStorage（可选）\r\n    if (userId) {\r\n      try {\r\n        const key = `ab-test-${config.id}-${userId}`\r\n        localStorage.setItem(key, JSON.stringify(result))\r\n      } catch (error) {\r\n        console.error('Failed to save A/B test result:', error)\r\n      }\r\n    }\r\n    \r\n    return result\r\n  }\r\n  \r\n  /**\r\n   * 获取保存的测试结果\r\n   */\r\n  const getSavedResult = (): ABTestResult | null => {\r\n    if (!userId) return null\r\n    \r\n    try {\r\n      const key = `ab-test-${config.id}-${userId}`\r\n      const saved = localStorage.getItem(key)\r\n      if (saved) {\r\n        return JSON.parse(saved)\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load saved A/B test result:', error)\r\n    }\r\n    \r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * 记录指标\r\n   */\r\n  const trackMetric = (metric: string, value?: any) => {\r\n    if (!currentVariant.value) return\r\n    \r\n    const event = {\r\n      testId: config.id,\r\n      variantId: currentVariant.value.id,\r\n      metric,\r\n      value,\r\n      timestamp: Date.now(),\r\n      userId\r\n    }\r\n    \r\n    // 发送到分析服务（需要实现）\r\n    if (typeof window !== 'undefined') {\r\n      window.dispatchEvent(new CustomEvent('ab-test-metric', { detail: event }))\r\n    }\r\n  }\r\n  \r\n  // 初始化\r\n  onMounted(() => {\r\n    // 尝试加载保存的结果\r\n    const saved = getSavedResult()\r\n    if (saved && checkActive()) {\r\n      const variant = config.variants.find(v => v.id === saved.variant.id)\r\n      if (variant) {\r\n        currentVariant.value = variant\r\n        testResult.value = saved\r\n        isActive.value = true\r\n        return\r\n      }\r\n    }\r\n    \r\n    // 运行新测试\r\n    runTest()\r\n  })\r\n  \r\n  return {\r\n    variant: computed(() => currentVariant.value),\r\n    template: computed(() => currentVariant.value?.template || null),\r\n    isActive: computed(() => isActive.value),\r\n    result: computed(() => testResult.value),\r\n    runTest,\r\n    trackMetric\r\n  }\r\n}\r\n\r\n/**\r\n * 哈希函数\r\n */\r\nfunction hashCode(str: string): number {\r\n  let hash = 0\r\n  for (let i = 0; i < str.length; i++) {\r\n    const char = str.charCodeAt(i)\r\n    hash = ((hash << 5) - hash) + char\r\n    hash = hash & hash // Convert to 32bit integer\r\n  }\r\n  return hash\r\n}\r\n\r\n/**\r\n * 预定义条件\r\n */\r\nexport const TEMPLATE_CONDITIONS = {\r\n  /** 新用户条件 */\r\n  isNewUser: (template: string): TemplateCondition => ({\r\n    id: 'new-user',\r\n    test: (ctx) => ctx.user?.isNewUser === true,\r\n    template,\r\n    description: '新用户',\r\n    priority: 10\r\n  }),\r\n  \r\n  /** VIP用户条件 */\r\n  isVipUser: (template: string): TemplateCondition => ({\r\n    id: 'vip-user',\r\n    test: (ctx) => ctx.user?.isVip === true,\r\n    template,\r\n    description: 'VIP用户',\r\n    priority: 20\r\n  }),\r\n  \r\n  /** 设备条件 */\r\n  isDevice: (device: DeviceType, template: string): TemplateCondition => ({\r\n    id: `device-${device}`,\r\n    test: (ctx) => ctx.device?.type === device,\r\n    template,\r\n    description: `设备类型: ${device}`,\r\n    priority: 5\r\n  }),\r\n  \r\n  /** 时间段条件 */\r\n  timeRange: (startHour: number, endHour: number, template: string): TemplateCondition => ({\r\n    id: `time-${startHour}-${endHour}`,\r\n    test: (ctx) => {\r\n      const hour = ctx.time?.hour ?? new Date().getHours()\r\n      return hour >= startHour && hour < endHour\r\n    },\r\n    template,\r\n    description: `时间段: ${startHour}:00 - ${endHour}:00`,\r\n    priority: 3\r\n  }),\r\n  \r\n  /** 功能标记条件 */\r\n  hasFeature: (feature: string, template: string): TemplateCondition => ({\r\n    id: `feature-${feature}`,\r\n    test: (ctx) => ctx.features?.[feature] === true,\r\n    template,\r\n    description: `功能: ${feature}`,\r\n    priority: 15\r\n  }),\r\n  \r\n  /** 语言条件 */\r\n  isLanguage: (language: string, template: string): TemplateCondition => ({\r\n    id: `language-${language}`,\r\n    test: (ctx) => ctx.geo?.language === language,\r\n    template,\r\n    description: `语言: ${language}`,\r\n    priority: 8\r\n  }),\r\n  \r\n  /** 自定义条件 */\r\n  custom: (test: (ctx: TemplateContext) => boolean, template: string, options?: {\r\n    id?: string\r\n    description?: string\r\n    priority?: number\r\n  }): TemplateCondition => ({\r\n    id: options?.id || 'custom',\r\n    test,\r\n    template,\r\n    description: options?.description,\r\n    priority: options?.priority || 0\r\n  })\r\n}\r\n\r\n/**\r\n * A/B测试预设\r\n */\r\nexport function createABTest(\r\n  id: string,\r\n  variants: Array<{ template: string; weight?: number }>,\r\n  options?: Partial<ABTestConfig>\r\n): ABTestConfig {\r\n  return {\r\n    id,\r\n    variants: variants.map((v, index) => ({\r\n      id: `variant-${index}`,\r\n      template: v.template,\r\n      weight: v.weight || 1\r\n    })),\r\n    enabled: true,\r\n    strategy: 'weighted',\r\n    ...options\r\n  }\r\n}"],"names":["useTemplateCondition","conditions","context","contextRef","ref","selectedTemplate","evaluating","lastEvaluation","evaluateConditions","value","enabledConditions","filter","c","enabled","sortedConditions","sort","a","b","priority","condition","result","test","Date","template","error","console","id","selectTemplate","reevaluate","watch","deep","onMounted","computed","useTemplateABTest","config","userId","currentVariant","testResult","isActive","checkActive","now","startDate","endDate","assignByHash","seed","hash","hashCode","Math","random","totalWeight","variants","reduce","sum","v","weight","threshold","normalizedHash","abs","variant","assignByWeight","assignRandomly","index","floor","length","assignVariant","strategy","runTest","testId","reason","timestamp","key","localStorage","setItem","JSON","stringify","getSavedResult","saved","getItem","parse","trackMetric","metric","event","variantId","window","dispatchEvent","CustomEvent","detail","find","str","i","char","charCodeAt","TEMPLATE_CONDITIONS","isNewUser","ctx","user","description","isVipUser","isVip","isDevice","device","type","timeRange","startHour","endHour","hour","time","getHours","hasFeature","feature","features","isLanguage","language","geo","custom","options","createABTest","map"],"mappings":"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"}
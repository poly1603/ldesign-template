{"version":3,"file":"useTemplateForm.cjs","sources":["../../src/composables/useTemplateForm.ts"],"sourcesContent":["/**\n * 模板表单系统\n * \n * 提供双向数据绑定、表单验证、自动保存等功能\n */\n\nimport { computed, onUnmounted, reactive, readonly, ref, watch } from 'vue'\n\n/**\n * 验证规则类型\n */\nexport interface ValidationRule {\n  required?: boolean | ((value: any) => boolean)\n  min?: number\n  max?: number\n  minLength?: number\n  maxLength?: number\n  pattern?: RegExp\n  email?: boolean\n  url?: boolean\n  custom?: (value: any, data: any) => boolean | string | Promise<boolean | string>\n  message?: string\n  trigger?: 'blur' | 'change' | 'submit'\n}\n\n/**\n * 字段验证规则\n */\nexport type FieldRules = ValidationRule | ValidationRule[]\n\n/**\n * 表单验证规则\n */\nexport type FormRules<T = any> = {\n  [K in keyof T]?: FieldRules\n}\n\n/**\n * 字段错误\n */\nexport interface FieldError {\n  field: string\n  message: string\n  rule?: ValidationRule\n}\n\n/**\n * 表单状态\n */\nexport interface FormState<T = any> {\n  data: T\n  errors: Map<keyof T, string>\n  touched: Set<keyof T>\n  dirty: boolean\n  valid: boolean\n  validating: boolean\n  submitting: boolean\n}\n\n/**\n * 表单选项\n */\nexport interface FormOptions<T = any> {\n  initialValues?: Partial<T>\n  rules?: FormRules<T>\n  validateOnChange?: boolean\n  validateOnBlur?: boolean\n  autoSave?: boolean\n  autoSaveDelay?: number\n  onSubmit?: (values: T) => void | Promise<void>\n  onError?: (errors: FieldError[]) => void\n  onSave?: (values: T) => void | Promise<void>\n}\n\n/**\n * 内置验证器\n */\nconst validators = {\n  required: (value: any, rule: ValidationRule): boolean | string => {\n    const isEmpty = value === undefined || value === null || value === '' ||\n                   (Array.isArray(value) && value.length === 0)\n    \n    if (typeof rule.required === 'function') {\n      return rule.required(value) ? !isEmpty : true\n    }\n    \n    return rule.required ? !isEmpty : true\n  },\n  \n  min: (value: any, rule: ValidationRule): boolean | string => {\n    if (rule.min === undefined) return true\n    const num = Number(value)\n    return !Number.isNaN(num) && num >= rule.min\n  },\n  \n  max: (value: any, rule: ValidationRule): boolean | string => {\n    if (rule.max === undefined) return true\n    const num = Number(value)\n    return !Number.isNaN(num) && num <= rule.max\n  },\n  \n  minLength: (value: any, rule: ValidationRule): boolean | string => {\n    if (rule.minLength === undefined) return true\n    const len = String(value).length\n    return len >= rule.minLength\n  },\n  \n  maxLength: (value: any, rule: ValidationRule): boolean | string => {\n    if (rule.maxLength === undefined) return true\n    const len = String(value).length\n    return len <= rule.maxLength\n  },\n  \n  pattern: (value: any, rule: ValidationRule): boolean | string => {\n    if (!rule.pattern) return true\n    return rule.pattern.test(String(value))\n  },\n  \n  email: (value: any, rule: ValidationRule): boolean | string => {\n    if (!rule.email) return true\n    const emailRegex = /^[^\\s@]+@[^\\s@][^\\s.@]*\\.[^\\s@]+$/\n    return emailRegex.test(String(value))\n  },\n  \n  url: (value: any, rule: ValidationRule): boolean | string => {\n    if (!rule.url) return true\n    try {\n      const _url = new URL(String(value))\n      return !!_url\n    } catch {\n      return false\n    }\n  }\n}\n\n/**\n * 验证单个字段\n */\nasync function validateField<T>(\n  field: keyof T,\n  value: any,\n  rules: FieldRules | undefined,\n  data: T\n): Promise<string | null> {\n  if (!rules) return null\n  \n  const ruleArray = Array.isArray(rules) ? rules : [rules]\n  \n  for (const rule of ruleArray) {\n    // 自定义验证\n    if (rule.custom) {\n      const result = await rule.custom(value, data)\n      if (result !== true) {\n        return typeof result === 'string' ? result : rule.message || '验证失败'\n      }\n    }\n    \n    // 内置验证\n    for (const [key, validator] of Object.entries(validators)) {\n      if (key in rule) {\n        const result = validator(value, rule)\n        if (result !== true) {\n          return rule.message || getDefaultMessage(key, rule)\n        }\n      }\n    }\n  }\n  \n  return null\n}\n\n/**\n * 获取默认错误消息\n */\nfunction getDefaultMessage(type: string, rule: ValidationRule): string {\n  switch (type) {\n    case 'required':\n      return '此字段为必填项'\n    case 'min':\n      return `值必须大于或等于 ${rule.min}`\n    case 'max':\n      return `值必须小于或等于 ${rule.max}`\n    case 'minLength':\n      return `长度至少为 ${rule.minLength} 个字符`\n    case 'maxLength':\n      return `长度不能超过 ${rule.maxLength} 个字符`\n    case 'pattern':\n      return '格式不正确'\n    case 'email':\n      return '请输入有效的邮箱地址'\n    case 'url':\n      return '请输入有效的URL'\n    default:\n      return '验证失败'\n  }\n}\n\n/**\n * 创建表单模型\n */\nexport function useTemplateForm<T extends Record<string, any>>(\n  options: FormOptions<T> = {}\n) {\n  // 表单数据\n  const formData = reactive(\n    (options.initialValues || {}) as T\n  ) as T\n  \n  // 表单状态\n  const errors = reactive(new Map<keyof T, string>())\n  const touched = reactive(new Set<keyof T>())\n  const dirty = ref(false)\n  const validating = ref(false)\n  const submitting = ref(false)\n  \n  // 自动保存定时器\n  let autoSaveTimer: ReturnType<typeof setTimeout> | null = null\n  \n  /**\n   * 保存表单\n   */\n  const saveForm = async () => {\n    if (!dirty.value) return\n    \n    try {\n      await options.onSave?.(formData)\n      dirty.value = false\n    } catch (error) {\n      console.error('Auto-save failed:', error)\n    }\n  }\n  \n  /**\n   * 调度自动保存\n   */\n  const scheduleAutoSave = () => {\n    if (autoSaveTimer) {\n      clearTimeout(autoSaveTimer)\n    }\n    \n    autoSaveTimer = setTimeout(() => {\n      saveForm()\n    }, options.autoSaveDelay || 1000)\n  }\n  \n  /**\n   * 验证单个字段\n   */\n  const validateSingleField = async <K extends keyof T>(field: K) => {\n    const value = (formData as T)[field]\n    const rules = options.rules?.[field]\n    \n    if (!rules) {\n      errors.delete(field)\n      return true\n    }\n    \n    validating.value = true\n    \n    try {\n    const error = await validateField(field, value, rules, formData as T)\n      \n      if (error) {\n        errors.set(field, error)\n        return false\n      } else {\n        errors.delete(field)\n        return true\n      }\n    } finally {\n      validating.value = false\n    }\n  }\n  \n  /**\n   * 设置字段值\n   */\n  const setFieldValue = <K extends keyof T>(field: K, value: T[K]) => {\n    (formData as T)[field] = value\n    dirty.value = true\n    \n    // 标记为已触摸\n    touched.add(field as any)\n    \n    // 验证字段\n    if (options.validateOnChange) {\n      validateSingleField(field as any)\n    }\n    \n    // 触发自动保存\n    if (options.autoSave) {\n      scheduleAutoSave()\n    }\n  }\n  \n  /**\n   * 设置多个字段值\n   */\n  const setValues = (values: Partial<T>) => {\n    Object.assign(formData, values)\n    dirty.value = true\n    \n    // 验证所有更改的字段\n    if (options.validateOnChange) {\n      Object.keys(values).forEach(field => {\n        validateSingleField(field as any)\n      })\n    }\n    \n    // 触发自动保存\n    if (options.autoSave) {\n      scheduleAutoSave()\n    }\n  }\n  \n  /**\n   * 获取字段值\n   */\n  const getFieldValue = <K extends keyof T>(field: K): T[K] => {\n    return (formData as T)[field]\n  }\n  \n  \n  /**\n   * 验证所有字段\n   */\n  const validate = async (): Promise<boolean> => {\n    if (!options.rules) return true\n    \n    validating.value = true\n    errors.clear()\n    \n    try {\n      const validationResults = await Promise.all(\n        Object.entries(options.rules).map(async ([field, rules]) => {\n          const value = (formData as T)[field as keyof T]\n          const error = await validateField(field as keyof T, value, rules, formData as T)\n          \n          if (error) {\n            errors.set(field as keyof T, error)\n            return false\n          }\n          return true\n        })\n      )\n      \n      const isValid = validationResults.every(result => result)\n      \n      if (!isValid && options.onError) {\n        const errorList: FieldError[] = Array.from(errors.entries()).map(\n          ([field, message]) => ({\n            field: String(field),\n            message\n          })\n        )\n        options.onError(errorList)\n      }\n      \n      return isValid\n    } finally {\n      validating.value = false\n    }\n  }\n  \n  /**\n   * 重置表单\n   */\n  const reset = () => {\n    Object.assign(formData, options.initialValues || {})\n    errors.clear()\n    touched.clear()\n    dirty.value = false\n    validating.value = false\n    submitting.value = false\n    \n    if (autoSaveTimer) {\n      clearTimeout(autoSaveTimer)\n      autoSaveTimer = null\n    }\n  }\n  \n  /**\n   * 提交表单\n   */\n  const submit = async () => {\n    if (submitting.value) return\n    \n    // 标记所有字段为已触摸\n    Object.keys(formData).forEach(field => {\n      touched.add(field as keyof T)\n    })\n    \n    // 验证表单\n    const isValid = await validate()\n    if (!isValid) return\n    \n    submitting.value = true\n    \n    try {\n      await options.onSubmit?.(formData)\n      dirty.value = false\n    } finally {\n      submitting.value = false\n    }\n  }\n  \n  \n  /**\n   * 字段处理器\n   */\n  const createFieldHandlers = <K extends keyof T>(field: K) => ({\n    value: computed({\n      get: () => formData[field],\n      set: (value) => setFieldValue(field, value)\n    }),\n    error: computed(() => errors.get(field as any)),\n    touched: computed(() => touched.has(field as any)),\n    onBlur: () => {\n      touched.add(field as any)\n      if (options.validateOnBlur) {\n        validateSingleField(field as any)\n      }\n    },\n    onChange: (value: T[K]) => {\n      setFieldValue(field, value)\n    }\n  })\n  \n  /**\n   * 计算属性\n   */\n  const isValid = computed(() => errors.size === 0)\n  const isDirty = computed(() => dirty.value)\n  const isValidating = computed(() => validating.value)\n  const isSubmitting = computed(() => submitting.value)\n  const errorMessages = computed(() => Array.from(errors.values()))\n  const hasErrors = computed(() => errors.size > 0)\n  \n  // 监听数据变化\n  const stopWatching = watch(\n    () => formData,\n    () => {\n      dirty.value = true\n    },\n    { deep: true }\n  )\n  \n  // 清理函数\n  const cleanup = () => {\n    if (autoSaveTimer) {\n      clearTimeout(autoSaveTimer)\n      autoSaveTimer = null\n    }\n    stopWatching()\n  }\n  \n  // 组件卸载时清理\n  onUnmounted(cleanup)\n  \n  return {\n    // 数据\n    values: readonly(formData),\n    errors: readonly(errors),\n    touched: readonly(touched),\n    \n    // 状态\n    isValid,\n    isDirty,\n    isValidating,\n    isSubmitting,\n    hasErrors,\n    errorMessages,\n    \n    // 方法\n    setFieldValue,\n    setValues,\n    getFieldValue,\n    validate,\n    validateField: validateSingleField,\n    reset,\n    submit,\n    saveForm,\n    \n    // 字段处理器工厂\n    createFieldHandlers,\n    \n    // 便捷的字段绑定\n    register: <K extends keyof T>(field: K) => ({\n      modelValue: formData[field],\n      'onUpdate:modelValue': (value: T[K]) => setFieldValue(field, value),\n      error: errors.get(field),\n      onBlur: () => {\n        touched.add(field)\n        if (options.validateOnBlur) {\n          validateSingleField(field)\n        }\n      }\n    })\n  }\n}\n\n/**\n * 创建简单的表单模型（v-model支持）\n */\nexport function useTemplateModel<T extends Record<string, any>>(\n  initialValue: T,\n  options?: {\n    autoSave?: boolean\n    autoSaveDelay?: number\n    onChange?: (value: T) => void\n    onSave?: (value: T) => void | Promise<void>\n  }\n) {\n  const model = ref<T>(initialValue)\n  const original = ref<T>({ ...initialValue })\n  const dirty = computed(() => JSON.stringify(model.value) !== JSON.stringify(original.value))\n  \n  let autoSaveTimer: ReturnType<typeof setTimeout> | null = null\n  \n  // 监听变化\n  const stopWatching = watch(model, (newValue) => {\n    options?.onChange?.(newValue)\n    \n    if (options?.autoSave) {\n      if (autoSaveTimer) {\n        clearTimeout(autoSaveTimer)\n      }\n      \n      autoSaveTimer = setTimeout(async () => {\n        await options.onSave?.(newValue)\n        original.value = { ...newValue }\n      }, options.autoSaveDelay || 1000)\n    }\n  }, { deep: true })\n  \n  // 组件卸载时清理\n  onUnmounted(() => {\n    if (autoSaveTimer) {\n      clearTimeout(autoSaveTimer)\n      autoSaveTimer = null\n    }\n    stopWatching()\n  })\n  \n  const reset = () => {\n    model.value = { ...original.value }\n  }\n  \n  const save = async () => {\n    await options?.onSave?.(model.value)\n    original.value = { ...model.value }\n  }\n  \n  return {\n    model,\n    dirty,\n    reset,\n    save\n  }\n}"],"names":["validators","required","value","rule","isEmpty","undefined","Array","isArray","length","min","num","Number","isNaN","max","minLength","len","String","maxLength","pattern","test","email","emailRegex","url","_url","URL","validateField","field","rules","data","ruleArray","custom","result","message","key","validator","Object","entries","getDefaultMessage","type","useTemplateForm","options","formData","reactive","initialValues","errors","Map","touched","Set","dirty","ref","validating","submitting","autoSaveTimer","saveForm","onSave","error","console","scheduleAutoSave","clearTimeout","setTimeout","autoSaveDelay","validateSingleField","delete","set","setFieldValue","add","validateOnChange","autoSave","setValues","values","assign","keys","forEach","getFieldValue","validate","clear","validationResults","Promise","all","map","isValid","every","onError","errorList","from","reset","submit","onSubmit","createFieldHandlers","computed","get","has","onBlur","validateOnBlur","onChange","size","isDirty","isValidating","isSubmitting","errorMessages","hasErrors","stopWatching","watch","deep","cleanup","onUnmounted","readonly","register","modelValue","useTemplateModel","initialValue","model","original","JSON","stringify","newValue","save"],"mappings":"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"}
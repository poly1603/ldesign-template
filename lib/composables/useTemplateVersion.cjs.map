{"version":3,"file":"useTemplateVersion.cjs","sources":["../../src/composables/useTemplateVersion.ts"],"sourcesContent":["/**\n * 模板版本控制组合式函数\n */\n\nimport type { Ref } from 'vue';\nimport type {\n  ChangeLog,\n  Migration,\n  MigrationOptions,\n  TemplateVersion,\n  VersionComparison,\n  VersionedTemplate} from '../core/version';\nimport type { Template } from '../types'\nimport { computed, reactive, ref, watch } from 'vue'\nimport {\n  createMigration,\n  createVersionedTemplate,\n  versionManager\n} from '../core/version'\n\n/**\n * 版本控制选项\n */\nexport interface UseTemplateVersionOptions {\n  /**\n   * 初始版本\n   */\n  initialVersion?: string\n  \n  /**\n   * 是否自动注册\n   */\n  autoRegister?: boolean\n  \n  /**\n   * 是否自动迁移\n   */\n  autoMigrate?: boolean\n  \n  /**\n   * 是否启用备份\n   */\n  enableBackup?: boolean\n  \n  /**\n   * 保留版本数量\n   */\n  keepVersions?: number\n  \n  /**\n   * 版本信息\n   */\n  versionInfo?: Partial<TemplateVersion>\n}\n\n/**\n * 版本状态\n */\nexport interface VersionState {\n  /**\n   * 当前版本\n   */\n  current: string\n  \n  /**\n   * 可用版本列表\n   */\n  available: string[]\n  \n  /**\n   * 是否有新版本\n   */\n  hasUpdate: boolean\n  \n  /**\n   * 是否已废弃\n   */\n  isDeprecated: boolean\n  \n  /**\n   * 迁移进度\n   */\n  migrationProgress?: {\n    from: string\n    to: string\n    step: number\n    total: number\n  }\n}\n\n/**\n * 使用模板版本控制\n */\nexport function useTemplateVersion(\n  template: Ref<Template> | Template,\n  options: UseTemplateVersionOptions = {}\n) {\n  const {\n    initialVersion = '1.0.0',\n    autoRegister = true,\n    autoMigrate = false,\n    enableBackup = true,\n    keepVersions = 10,\n    versionInfo = {}\n  } = options\n  \n  // 响应式模板\n  const templateRef = ref(template)\n  const currentTemplate = computed<Template>(() => \n    'value' in templateRef.value ? templateRef.value.value : templateRef.value\n  )\n  \n  // 版本状态\n  const versionState = reactive<VersionState>({\n    current: initialVersion,\n    available: [],\n    hasUpdate: false,\n    isDeprecated: false\n  })\n  \n  // 版本化模板\n  const versionedTemplate = ref<VersionedTemplate | null>(null)\n  \n  // 变更日志\n  const changelog = ref<ChangeLog[]>([])\n  \n  // 迁移队列\n  const migrationQueue = ref<Migration[]>([])\n  \n  // 是否正在迁移\n  const isMigrating = ref(false)\n  \n  // 初始化\n  const initialize = () => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) {\n      console.warn('Template must have an id for version control')\n      return\n    }\n    \n    // 创建版本化模板\n    const versioned = createVersionedTemplate(\n      currentTemplate.value,\n      initialVersion,\n      versionInfo\n    )\n    \n    if (autoRegister) {\n      versionManager.registerVersion(\n        templateId,\n        initialVersion,\n        currentTemplate.value,\n        versionInfo\n      )\n    }\n    \n    versionedTemplate.value = versioned\n    updateVersionState()\n  }\n  \n  // 更新版本状态\n  function updateVersionState() {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return\n    \n    const allVersions = versionManager.getAllVersions(templateId)\n    versionState.available = allVersions.map(v => v.version.version)\n    \n    const current = versionManager.getVersion(templateId)\n    if (current) {\n      versionState.current = current.version.version\n      versionState.isDeprecated = current.version.deprecated || false\n      \n      // 检查更新\n      const latest = allVersions[0]\n      if (latest) {\n        const comparison = versionManager.compareVersions(\n          latest.version.version,\n          versionState.current\n        )\n        versionState.hasUpdate = comparison.newer\n      }\n    }\n    \n    // 更新变更日志\n    changelog.value = versionManager.getChangelog(templateId)\n  }\n  \n  /**\n   * 创建新版本\n   */\n  const createVersion = (\n    version: string,\n    changes: Partial<Template>,\n    info?: Partial<TemplateVersion>\n  ): VersionedTemplate | undefined => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return undefined\n    \n    const newVersion = versionManager.createVersion(\n      templateId,\n      version,\n      changes,\n      info\n    )\n    \n    versionedTemplate.value = newVersion\n    updateVersionState()\n    \n    // 清理旧版本\n    if (keepVersions > 0) {\n      versionManager.cleanupOldVersions(templateId, keepVersions)\n    }\n    \n    return newVersion\n  }\n  \n  /**\n   * 切换版本\n   */\n  const switchVersion = async (version: string): Promise<boolean> => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return false\n    \n    const targetVersion = versionManager.getVersion(templateId, version)\n    if (!targetVersion) {\n      console.error(`Version ${version} not found`)\n      return false\n    }\n    \n    // 检查是否需要迁移\n    if (autoMigrate && versionState.current !== version) {\n      const migrated = await migrate(versionState.current, version)\n      if (migrated) {\n        versionedTemplate.value = migrated\n        updateVersionState()\n        return true\n      }\n      return false\n    }\n    \n    versionedTemplate.value = targetVersion\n    versionState.current = version\n    updateVersionState()\n    \n    return true\n  }\n  \n  /**\n   * 执行迁移\n   */\n  async function migrate(\n    from: string,\n    to: string,\n    migrationOptions?: MigrationOptions\n  ): Promise<VersionedTemplate | null> {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return null\n    \n    isMigrating.value = true\n    \n    try {\n      const options: MigrationOptions = {\n        backup: enableBackup,\n        validate: true,\n        ...migrationOptions\n      }\n      \n      const result = await versionManager.migrate(\n        templateId,\n        from,\n        to,\n        options\n      )\n      \n      versionedTemplate.value = result\n      updateVersionState()\n      \n      return result\n    } catch (error) {\n      console.error('Migration failed:', error)\n      return null\n    } finally {\n      isMigrating.value = false\n    }\n  }\n  \n  /**\n   * 注册迁移\n   */\n  const registerMigration = (migration: Migration) => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return\n    \n    versionManager.registerMigration(templateId, migration)\n    migrationQueue.value.push(migration)\n  }\n  \n  /**\n   * 创建并注册迁移\n   */\n  const addMigration = (\n    from: string,\n    to: string,\n    migrateFn: Migration['migrate'],\n    rollbackFn?: Migration['rollback']\n  ) => {\n    const migration = createMigration(from, to, migrateFn, {\n      rollback: rollbackFn,\n      auto: autoMigrate\n    })\n    \n    registerMigration(migration)\n  }\n  \n  /**\n   * 发布版本\n   */\n  const publish = (version?: string) => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return\n    \n    const targetVersion = version || versionState.current\n    versionManager.publishVersion(templateId, targetVersion)\n    updateVersionState()\n  }\n  \n  /**\n   * 废弃版本\n   */\n  const deprecate = (\n    version: string,\n    reason: string,\n    alternative?: string\n  ) => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return\n    \n    versionManager.deprecateVersion(templateId, version, reason, alternative)\n    updateVersionState()\n  }\n  \n  /**\n   * 比较版本\n   */\n  const compareVersions = (v1: string, v2: string): VersionComparison => {\n    return versionManager.compareVersions(v1, v2)\n  }\n  \n  /**\n   * 恢复备份\n   */\n  const restoreBackup = (index?: number): VersionedTemplate | undefined => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return undefined\n    \n    const restored = versionManager.restoreBackup(templateId, index)\n    if (restored) {\n      versionedTemplate.value = restored\n      updateVersionState()\n    }\n    \n    return restored\n  }\n  \n  /**\n   * 获取版本详情\n   */\n  const getVersionDetails = (version?: string): VersionedTemplate | undefined => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return undefined\n    \n    return versionManager.getVersion(templateId, version)\n  }\n  \n  /**\n   * 获取版本历史\n   */\n  const getVersionHistory = (): VersionedTemplate[] => {\n    const templateId = currentTemplate.value.id\n    if (!templateId) return []\n    \n    return versionManager.getAllVersions(templateId)\n  }\n  \n  // 监听模板变化\n  watch(currentTemplate, () => {\n    initialize()\n  }, { immediate: true })\n  \n  return {\n    // 状态\n    versionState,\n    versionedTemplate,\n    changelog,\n    migrationQueue,\n    isMigrating,\n    \n    // 方法\n    createVersion,\n    switchVersion,\n    migrate,\n    registerMigration,\n    addMigration,\n    publish,\n    deprecate,\n    compareVersions,\n    restoreBackup,\n    getVersionDetails,\n    getVersionHistory,\n    updateVersionState\n  }\n}\n\n/**\n * 使用版本比较\n */\nexport function useVersionComparison(v1: Ref<string>, v2: Ref<string>) {\n  const comparison = computed(() => {\n    return versionManager.compareVersions(v1.value, v2.value)\n  })\n  \n  const isNewer = computed(() => comparison.value.newer)\n  const isOlder = computed(() => comparison.value.older)\n  const isEqual = computed(() => comparison.value.equal)\n  \n  const majorDiff = computed(() => comparison.value.majorDiff)\n  const minorDiff = computed(() => comparison.value.minorDiff)\n  const patchDiff = computed(() => comparison.value.patchDiff)\n  \n  const needsMajorUpdate = computed(() => majorDiff.value > 0)\n  const needsMinorUpdate = computed(() => minorDiff.value > 0)\n  const needsPatchUpdate = computed(() => patchDiff.value > 0)\n  \n  return {\n    comparison,\n    isNewer,\n    isOlder,\n    isEqual,\n    majorDiff,\n    minorDiff,\n    patchDiff,\n    needsMajorUpdate,\n    needsMinorUpdate,\n    needsPatchUpdate\n  }\n}\n\n/**\n * 使用自动迁移\n */\nexport function useAutoMigration(\n  templateId: string,\n  targetVersion: string,\n  options?: MigrationOptions\n) {\n  const isRunning = ref(false)\n  const progress = ref(0)\n  const error = ref<Error | null>(null)\n  const result = ref<VersionedTemplate | null>(null)\n  \n  const run = async () => {\n    isRunning.value = true\n    error.value = null\n    progress.value = 0\n    \n    try {\n      const current = versionManager.getVersion(templateId)\n      if (!current) {\n        throw new Error(`Template ${templateId} not found`)\n      }\n      \n      const migrated = await versionManager.migrate(\n        templateId,\n        current.version.version,\n        targetVersion,\n        {\n          ...options,\n          data: {\n            ...options?.data,\n            onProgress: (p: number) => {\n              progress.value = p\n            }\n          }\n        }\n      )\n      \n      result.value = migrated\n      progress.value = 100\n      \n      return migrated\n    } catch (err) {\n      error.value = err as Error\n      return null\n    } finally {\n      isRunning.value = false\n    }\n  }\n  \n  return {\n    run,\n    isRunning,\n    progress,\n    error,\n    result\n  }\n}"],"names":["useTemplateVersion","template","options","initialVersion","autoRegister","autoMigrate","enableBackup","keepVersions","versionInfo","templateRef","ref","currentTemplate","computed","value","versionState","reactive","current","available","hasUpdate","isDeprecated","versionedTemplate","changelog","migrationQueue","isMigrating","initialize","templateId","id","console","warn","versioned","createVersionedTemplate","versionManager","registerVersion","updateVersionState","allVersions","getAllVersions","map","v","version","getVersion","deprecated","latest","comparison","compareVersions","newer","getChangelog","createVersion","changes","info","undefined","newVersion","cleanupOldVersions","switchVersion","targetVersion","error","migrated","migrate","from","to","migrationOptions","backup","validate","result","registerMigration","migration","push","addMigration","migrateFn","rollbackFn","createMigration","rollback","auto","publish","publishVersion","deprecate","reason","alternative","deprecateVersion","v1","v2","restoreBackup","index","restored","getVersionDetails","getVersionHistory","watch","immediate","useVersionComparison","isNewer","isOlder","older","isEqual","equal","majorDiff","minorDiff","patchDiff","needsMajorUpdate","needsMinorUpdate","needsPatchUpdate","useAutoMigration","isRunning","progress","run","Error","data","onProgress","p","err"],"mappings":"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"}
{"version":3,"file":"objectPool.cjs","sources":["../../src/utils/objectPool.ts"],"sourcesContent":["/**\n * 对象池工具类 - 用于复用对象，减少内存分配和垃圾回收\n */\n\nexport interface PoolOptions<T> {\n  maxSize?: number\n  preAllocate?: number\n  factory: () => T\n  reset?: (obj: T) => void\n  validate?: (obj: T) => boolean\n}\n\n/**\n * 通用对象池\n */\nexport class ObjectPool<T> {\n  private pool: T[] = []\n  private readonly maxSize: number\n  private readonly factory: () => T\n  private readonly reset?: (obj: T) => void\n  private readonly validate?: (obj: T) => boolean\n  private totalCreated = 0\n  private totalAcquired = 0\n  private totalReleased = 0\n\n  constructor(options: PoolOptions<T>) {\n    this.maxSize = options.maxSize ?? 100\n    this.factory = options.factory\n    this.reset = options.reset\n    this.validate = options.validate\n\n    // 预分配对象\n    const preAllocate = Math.min(options.preAllocate ?? 0, this.maxSize)\n    for (let i = 0; i < preAllocate; i++) {\n      this.pool.push(this.factory())\n      this.totalCreated++\n    }\n  }\n\n  /**\n   * 获取对象\n   */\n  acquire(): T {\n    this.totalAcquired++\n    \n    // 优先从池中获取\n    while (this.pool.length > 0) {\n      const obj = this.pool.pop()!\n      if (!this.validate || this.validate(obj)) {\n        return obj\n      }\n    }\n\n    // 创建新对象\n    this.totalCreated++\n    return this.factory()\n  }\n\n  /**\n   * 释放对象\n   */\n  release(obj: T): void {\n    if (!obj) return\n    \n    this.totalReleased++\n    \n    // 验证对象是否有效\n    if (this.validate && !this.validate(obj)) {\n      return\n    }\n\n    // 检查池是否已满\n    if (this.pool.length >= this.maxSize) {\n      return\n    }\n\n    // 重置对象\n    this.reset?.(obj)\n    \n    // 放回池中\n    this.pool.push(obj)\n  }\n\n  /**\n   * 批量释放对象\n   */\n  releaseMany(objects: T[]): void {\n    for (const obj of objects) {\n      this.release(obj)\n    }\n  }\n\n  /**\n   * 清空池\n   */\n  clear(): void {\n    this.pool.length = 0\n  }\n\n  /**\n   * 获取统计信息\n   */\n  getStats() {\n    return {\n      poolSize: this.pool.length,\n      maxSize: this.maxSize,\n      totalCreated: this.totalCreated,\n      totalAcquired: this.totalAcquired,\n      totalReleased: this.totalReleased,\n      reuseRate: this.totalAcquired > 0 \n        ? `${((this.totalAcquired - this.totalCreated) / this.totalAcquired * 100).toFixed(2)  }%`\n        : '0%'\n    }\n  }\n\n  /**\n   * 缩减池大小\n   */\n  shrink(targetSize: number = Math.floor(this.maxSize / 2)): void {\n    while (this.pool.length > targetSize) {\n      this.pool.pop()\n    }\n  }\n}\n\n/**\n * 创建数组池\n */\nexport function createArrayPool<T>(maxSize = 50): ObjectPool<T[]> {\n  return new ObjectPool<T[]>({\n    maxSize,\n    factory: () => [],\n    reset: (arr) => { arr.length = 0 },\n    validate: (arr) => Array.isArray(arr)\n  })\n}\n\n/**\n * 创建对象池\n */\nexport function createObjectPool<T extends Record<string, any>>(\n  factory: () => T,\n  maxSize = 50\n): ObjectPool<T> {\n  return new ObjectPool({\n    maxSize,\n    factory,\n    reset: (obj) => {\n      for (const key in obj) {\n        delete obj[key]\n      }\n    }\n  })\n}\n\n/**\n * 创建 Map 池\n */\nexport function createMapPool<K, V>(maxSize = 50): ObjectPool<Map<K, V>> {\n  return new ObjectPool({\n    maxSize,\n    factory: () => new Map<K, V>(),\n    reset: (map) => map.clear(),\n    validate: (map) => map instanceof Map\n  })\n}\n\n/**\n * 创建 Set 池\n */\nexport function createSetPool<T>(maxSize = 50): ObjectPool<Set<T>> {\n  return new ObjectPool({\n    maxSize,\n    factory: () => new Set<T>(),\n    reset: (set) => set.clear(),\n    validate: (set) => set instanceof Set\n  })\n}\n\n/**\n * 全局池管理器\n */\nclass PoolManager {\n  private pools = new Map<string, ObjectPool<any>>()\n\n  register<T>(name: string, pool: ObjectPool<T>): void {\n    this.pools.set(name, pool)\n  }\n\n  get<T>(name: string): ObjectPool<T> | undefined {\n    return this.pools.get(name)\n  }\n\n  clearAll(): void {\n    for (const pool of this.pools.values()) {\n      pool.clear()\n    }\n  }\n\n  getStats() {\n    const stats: Record<string, any> = {}\n    for (const [name, pool] of this.pools.entries()) {\n      stats[name] = pool.getStats()\n    }\n    return stats\n  }\n}\n\nexport const poolManager = new PoolManager()"],"names":["ObjectPool","constructor","options","pool","totalCreated","totalAcquired","totalReleased","maxSize","factory","reset","validate","preAllocate","Math","min","i","push","acquire","length","obj","pop","release","releaseMany","objects","clear","getStats","poolSize","reuseRate","toFixed","shrink","targetSize","floor","createArrayPool","arr","Array","isArray","createObjectPool","key","createMapPool","Map","map","createSetPool","Set","set","PoolManager","pools","register","name","get","clearAll","values","stats","entries","poolManager"],"mappings":"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"}
{"version":3,"file":"errorHandler.cjs","sources":["../../src/utils/errorHandler.ts"],"sourcesContent":["/**\n * Enhanced Error Handling System\n * \n * Comprehensive error boundaries and recovery mechanisms\n */\n\nimport type { Component } from 'vue'\nimport { computed, defineComponent, h, provide, ref  } from 'vue'\n\n\n\n/**\n * Template error types\n */\nexport enum TemplateErrorType {\n  LOAD_ERROR = 'LOAD_ERROR',\n  NOT_FOUND = 'NOT_FOUND',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  PARSE_ERROR = 'PARSE_ERROR',\n  TIMEOUT = 'TIMEOUT',\n  PERMISSION_DENIED = 'PERMISSION_DENIED',\n  UNKNOWN = 'UNKNOWN'\n}\n\n/**\n * Template error class with enhanced details\n */\nexport class TemplateError extends Error {\n  public readonly type: TemplateErrorType\n  public readonly code: string\n  public readonly details?: Record<string, any>\n  public readonly retryable: boolean\n  public readonly timestamp: Date\n  public readonly context?: {\n    category?: string\n    device?: string\n    template?: string\n    [key: string]: any\n  }\n\n  constructor(\n    message: string,\n    type: TemplateErrorType = TemplateErrorType.UNKNOWN,\n    options?: {\n      code?: string\n      details?: Record<string, any>\n      retryable?: boolean\n      context?: Record<string, any>\n      cause?: Error\n    }\n  ) {\n    super(message)\n    this.name = 'TemplateError'\n    this.type = type\n    this.code = options?.code || type\n    this.details = options?.details\n    this.retryable = options?.retryable ?? true\n    this.timestamp = new Date()\n    this.context = options?.context\n    \n    // Set cause if provided (ES2022)\n    if (options?.cause) {\n      (this as any).cause = options.cause\n    }\n    \n    // Maintain proper stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, TemplateError)\n    }\n  }\n  \n  /**\n   * Get user-friendly error message\n   */\n  getUserMessage(): string {\n    switch (this.type) {\n      case TemplateErrorType.LOAD_ERROR:\n        return '模板加载失败，请稍后重试'\n      case TemplateErrorType.NOT_FOUND:\n        return '找不到请求的模板'\n      case TemplateErrorType.NETWORK_ERROR:\n        return '网络连接失败，请检查网络设置'\n      case TemplateErrorType.PARSE_ERROR:\n        return '模板解析错误，请联系管理员'\n      case TemplateErrorType.TIMEOUT:\n        return '加载超时，请重试'\n      case TemplateErrorType.PERMISSION_DENIED:\n        return '没有访问该模板的权限'\n      default:\n        return '发生未知错误'\n    }\n  }\n  \n  /**\n   * Get recovery suggestions\n   */\n  getRecoverySuggestions(): string[] {\n    const suggestions: string[] = []\n    \n    switch (this.type) {\n      case TemplateErrorType.NETWORK_ERROR:\n        suggestions.push('检查网络连接')\n        suggestions.push('尝试刷新页面')\n        suggestions.push('稍后重试')\n        break\n      case TemplateErrorType.NOT_FOUND:\n        suggestions.push('检查模板名称是否正确')\n        suggestions.push('使用默认模板')\n        suggestions.push('联系技术支持')\n        break\n      case TemplateErrorType.TIMEOUT:\n        suggestions.push('检查网络速度')\n        suggestions.push('减少并发请求')\n        suggestions.push('稍后重试')\n        break\n      case TemplateErrorType.PERMISSION_DENIED:\n        suggestions.push('检查用户权限')\n        suggestions.push('联系管理员')\n        break\n      default:\n        suggestions.push('刷新页面重试')\n        suggestions.push('清除浏览器缓存')\n        suggestions.push('联系技术支持')\n    }\n    \n    return suggestions\n  }\n  \n  /**\n   * Convert to plain object for serialization\n   */\n  toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      message: this.message,\n      type: this.type,\n      code: this.code,\n      details: this.details,\n      retryable: this.retryable,\n      timestamp: this.timestamp,\n      context: this.context,\n      stack: this.stack\n    }\n  }\n}\n\n/**\n * Error recovery strategies\n */\nexport interface ErrorRecoveryStrategy {\n  canRecover: (error: TemplateError) => boolean\n  recover: (error: TemplateError) => Promise<void>\n  priority: number\n}\n\n/**\n * Default recovery strategies\n */\nexport const defaultRecoveryStrategies: ErrorRecoveryStrategy[] = [\n  {\n    // Retry strategy for network errors\ncanRecover: (templateError) => templateError.type === TemplateErrorType.NETWORK_ERROR && templateError.retryable,\nrecover: async (_templateError) => {\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      // Retry logic would be implemented by the caller\n    },\n    priority: 1\n  },\n  {\n    // Fallback to default template\n    canRecover: (templateError) => templateError.type === TemplateErrorType.NOT_FOUND,\n    recover: async (_templateError) => {\n      // Load default template instead\n      if (_templateError.context?.category) {\n        // This would be handled by the template manager\n      }\n    },\n    priority: 2\n  },\n  {\n    // Clear cache and retry\ncanRecover: (templateError) => templateError.type === TemplateErrorType.PARSE_ERROR,\nrecover: async (_templateError) => {\n      // Clear cache\n      if (typeof localStorage !== 'undefined') {\n        localStorage.removeItem('template-cache')\n      }\n    },\n    priority: 3\n  }\n]\n\n/**\n * Error recovery manager\n */\nexport class ErrorRecoveryManager {\n  private strategies: ErrorRecoveryStrategy[] = []\n  private retryCount = new Map<string, number>()\n  private readonly maxRetries = 3\n  private retryCleanupTimer: ReturnType<typeof setTimeout> | null = null\n  \n  constructor(strategies: ErrorRecoveryStrategy[] = defaultRecoveryStrategies) {\n    this.strategies = [...strategies].sort((a, b) => a.priority - b.priority)\n  }\n  \n  /**\n   * Add recovery strategy\n   */\n  addStrategy(strategy: ErrorRecoveryStrategy) {\n    this.strategies.push(strategy)\n    this.strategies.sort((a, b) => a.priority - b.priority)\n  }\n  \n  /**\n   * Attempt to recover from error\n   */\n  async recover(error: TemplateError): Promise<boolean> {\n    const errorKey = `${error.type}-${error.code}`\n    const retries = this.retryCount.get(errorKey) || 0\n    \n    if (retries >= this.maxRetries) {\n      return false\n    }\n    \n    for (const strategy of this.strategies) {\n      if (strategy.canRecover(error)) {\n        try {\n          await strategy.recover(error)\n          this.retryCount.set(errorKey, retries + 1)\n          return true\n        } catch (recoveryError) {\n          console.error('Recovery strategy failed:', recoveryError)\n        }\n      }\n    }\n    \n    return false\n  }\n  \n  /**\n   * Reset retry count\n   */\n  resetRetryCount(error?: TemplateError) {\n    if (error) {\n      const errorKey = `${error.type}-${error.code}`\n      this.retryCount.delete(errorKey)\n    } else {\n      this.retryCount.clear()\n    }\n    // 清理过期的重试计数\n    this.scheduleRetryCleanup()\n  }\n  \n  /**\n   * Schedule cleanup of old retry counts\n   */\n  private scheduleRetryCleanup() {\n    if (this.retryCleanupTimer) {\n      clearTimeout(this.retryCleanupTimer)\n    }\n    // 5分钟后清理重试计数\n    this.retryCleanupTimer = setTimeout(() => {\n      if (this.retryCount.size > 100) {\n        // 只保留最近的50个\n        const entries = Array.from(this.retryCount.entries())\n        this.retryCount.clear()\n        entries.slice(-50).forEach(([key, value]) => {\n          this.retryCount.set(key, value)\n        })\n      }\n      this.retryCleanupTimer = null\n    }, 5 * 60 * 1000)\n  }\n  \n  /**\n   * Dispose the recovery manager\n   */\n  dispose() {\n    if (this.retryCleanupTimer) {\n      clearTimeout(this.retryCleanupTimer)\n      this.retryCleanupTimer = null\n    }\n    this.retryCount.clear()\n    this.strategies.length = 0\n  }\n}\n\n/**\n * Create error boundary component\n */\nexport function createErrorBoundary(options?: {\n  onError?: (error: TemplateError) => void\n  fallback?: Component\n  recovery?: ErrorRecoveryManager\n}) {\n  return defineComponent({\n    name: 'TemplateErrorBoundary',\n    props: {\n      tag: {\n        type: String,\n        default: 'div'\n      }\n    },\n    setup(props, { slots }) {\n      const error = ref<TemplateError | null>(null)\n      const recovering = ref(false)\n      \n      const hasError = computed(() => error.value !== null)\n      \n      const handleError = async (err: Error) => {\n        // Convert to TemplateError if needed\n        const templateError = err instanceof TemplateError \n          ? err \n          : new TemplateError(err.message, TemplateErrorType.UNKNOWN, {\n              cause: err\n            })\n        \n        error.value = templateError\n        options?.onError?.(templateError)\n        \n        // Attempt recovery if available\n        if (options?.recovery && !recovering.value) {\n          recovering.value = true\n          const recovered = await options.recovery.recover(templateError)\n          if (recovered) {\n            error.value = null\n          }\n          recovering.value = false\n        }\n      }\n      \n      const retry = () => {\n        error.value = null\n        // Force re-render\n      }\n      \n      const renderError = () => {\n        if (options?.fallback) {\n          return h(options.fallback, {\n            error: error.value,\n            retry,\n            recovering: recovering.value\n          })\n        }\n        \n        // Default error UI\n        return h('div', { class: 'template-error-boundary' }, [\n          h('div', { class: 'error-icon' }, '⚠️'),\n          h('h3', error.value?.getUserMessage()),\n          h('p', { class: 'error-details' }, error.value?.message),\n          error.value?.retryable && h('button', {\n            class: 'error-retry-btn',\n            onClick: retry\n          }, recovering.value ? '恢复中...' : '重试'),\n          h('details', { class: 'error-suggestions' }, [\n            h('summary', '解决建议'),\n            h('ul', error.value?.getRecoverySuggestions().map(\n              suggestion => h('li', suggestion)\n            ))\n          ])\n        ])\n      }\n      \n      // Provide error handler to children\n      // Children can call this via inject\n      provide('handleError', handleError)\n      \n      return () => {\n        if (hasError.value) {\n          return renderError()\n        }\n        \n        try {\n          return h(props.tag, slots.default?.())\n        } catch (err) {\n          handleError(err as Error)\n          return renderError()\n        }\n      }\n    }\n  })\n}\n\n/**\n * Global error handler\n */\nexport class GlobalTemplateErrorHandler {\n  private static instance: GlobalTemplateErrorHandler | null = null\n  private errorLog: TemplateError[] = []\n  private readonly maxLogSize = 100\n  private listeners = new WeakMap<object, (error: TemplateError) => void>()\n  private listenerRefs = new Set<WeakRef<object>>()\n  private disposed = false\n  \n  private constructor() {}\n  \n  static getInstance(): GlobalTemplateErrorHandler {\n    if (!GlobalTemplateErrorHandler.instance) {\n      GlobalTemplateErrorHandler.instance = new GlobalTemplateErrorHandler()\n    }\n    return GlobalTemplateErrorHandler.instance\n  }\n  \n  /**\n   * Log error\n   */\n  logError(error: TemplateError) {\n    if (this.disposed) return\n    \n    this.errorLog.push(error)\n    \n    // Keep log size under control\n    if (this.errorLog.length > this.maxLogSize) {\n      this.errorLog.shift()\n    }\n    \n    // Notify listeners\n    this.notifyListeners(error)\n    \n    // Send to remote logging if in production\n    if (import.meta.env.PROD) {\n      this.sendToRemote(error)\n    }\n  }\n  \n  /**\n   * Get error log\n   */\n  getErrorLog(): TemplateError[] {\n    return [...this.errorLog]\n  }\n  \n  /**\n   * Clear error log\n   */\n  clearErrorLog() {\n    this.errorLog = []\n  }\n  \n  /**\n   * Subscribe to errors\n   */\n  subscribe(listener: (error: TemplateError) => void): () => void {\n    const listenerObj = {} // Create unique object as key\n    const ref = new WeakRef(listenerObj)\n    this.listeners.set(listenerObj, listener)\n    this.listenerRefs.add(ref)\n    \n    return () => {\n      this.listeners.delete(listenerObj)\n      this.listenerRefs.delete(ref)\n    }\n  }\n  \n  /**\n   * Notify all active listeners\n   */\n  private notifyListeners(error: TemplateError) {\n    const deadRefs = new Set<WeakRef<object>>()\n    \n    this.listenerRefs.forEach(ref => {\n      const obj = ref.deref()\n      if (obj) {\n        const listener = this.listeners.get(obj)\n        if (listener) {\n          listener(error)\n        }\n      } else {\n        deadRefs.add(ref)\n      }\n    })\n    \n    // 清理已失效的引用\n    deadRefs.forEach(ref => this.listenerRefs.delete(ref))\n  }\n  \n  /**\n   * Send error to remote logging service\n   */\nprivate async sendToRemote(_error: TemplateError) {\n    // Implement remote logging\n    // This is a placeholder\n    try {\n      // await fetch('/api/errors', {\n      //   method: 'POST',\n      //   body: JSON.stringify(error.toJSON())\n      // })\n    } catch {\n      // Silently fail remote logging\n    }\n  }\n  \n  /**\n   * Get error statistics\n   */\n  getStatistics() {\n    const stats = {\n      total: this.errorLog.length,\n      byType: {} as Record<TemplateErrorType, number>,\n      retryable: 0,\n      recent: this.errorLog.slice(-10)\n    }\n    \n    for (const error of this.errorLog) {\n      stats.byType[error.type] = (stats.byType[error.type] || 0) + 1\n      if (error.retryable) stats.retryable++\n    }\n    \n    return stats\n  }\n  \n  /**\n   * Destroy the singleton instance\n   */\n  static destroy() {\n    if (GlobalTemplateErrorHandler.instance) {\n      GlobalTemplateErrorHandler.instance.disposed = true\n      GlobalTemplateErrorHandler.instance.clearErrorLog()\n      GlobalTemplateErrorHandler.instance.listeners = new WeakMap()\n      GlobalTemplateErrorHandler.instance.listenerRefs.clear()\n      GlobalTemplateErrorHandler.instance = null\n    }\n  }\n}\n\n// Export singleton instance\nexport const globalErrorHandler = GlobalTemplateErrorHandler.getInstance()\n\n// Re-export memory optimization utilities\nexport * from './memoryLeakDetector'\nexport * from './objectPool'\n"],"names":["TemplateErrorType","TemplateError","Error","constructor","message","type","UNKNOWN","options","name","code","details","retryable","timestamp","Date","context","cause","captureStackTrace","getUserMessage","LOAD_ERROR","NOT_FOUND","NETWORK_ERROR","PARSE_ERROR","TIMEOUT","PERMISSION_DENIED","getRecoverySuggestions","suggestions","push","toJSON","stack","defaultRecoveryStrategies","canRecover","templateError","recover","_templateError","Promise","resolve","setTimeout","priority","category","localStorage","removeItem","ErrorRecoveryManager","strategies","retryCount","Map","maxRetries","retryCleanupTimer","sort","a","b","addStrategy","strategy","error","errorKey","retries","get","set","recoveryError","console","resetRetryCount","delete","clear","scheduleRetryCleanup","clearTimeout","size","entries","Array","from","slice","forEach","key","value","dispose","length","createErrorBoundary","defineComponent","props","tag","String","default","setup","slots","ref","recovering","hasError","computed","handleError","err","onError","recovery","recovered","retry","renderError","fallback","h","class","onClick","map","suggestion","provide","GlobalTemplateErrorHandler","errorLog","maxLogSize","listeners","WeakMap","listenerRefs","Set","disposed","getInstance","instance","logError","shift","notifyListeners","import","PROD","sendToRemote","getErrorLog","clearErrorLog","subscribe","listener","listenerObj","WeakRef","add","deadRefs","obj","deref","_error","getStatistics","stats","total","byType","recent","destroy","globalErrorHandler"],"mappings":"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"}
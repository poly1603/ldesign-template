{"version":3,"file":"typeGenerator.cjs","sources":["../../src/utils/typeGenerator.ts"],"sourcesContent":["import type { Component } from 'vue'\nimport type { TemplateMetadata } from '../types'\n\n/**\n * 模板类型定义\n */\nexport interface TemplateTypeDefinition {\n  name: string\n  props?: Record<string, PropTypeDefinition>\n  emits?: Record<string, EmitTypeDefinition>\n  slots?: Record<string, SlotTypeDefinition>\n  metadata?: TemplateMetadata\n}\n\n/**\n * 属性类型定义\n */\nexport interface PropTypeDefinition {\n  type: string | string[] // 类型名称\n  required?: boolean\n  default?: any\n  validator?: string // 验证器函数的字符串表示\n  description?: string\n}\n\n/**\n * 事件类型定义\n */\nexport interface EmitTypeDefinition {\n  payload?: string // 载荷类型\n  description?: string\n}\n\n/**\n * 插槽类型定义\n */\nexport interface SlotTypeDefinition {\n  props?: Record<string, string> // 插槽属性类型\n  description?: string\n}\n\n/**\n * 类型生成选项\n */\nexport interface TypeGeneratorOptions {\n  outputPath?: string // 输出路径\n  moduleFormat?: 'es' | 'cjs' // 模块格式\n  includeComments?: boolean // 包含注释\n  generateDTS?: boolean // 生成 .d.ts 文件\n  strict?: boolean // 严格模式\n}\n\n/**\n * 从组件推断类型\n */\nexport function inferTypeFromComponent(component: Component): TemplateTypeDefinition {\n  const definition: TemplateTypeDefinition = {\n    name: component.name || 'UnnamedTemplate',\n    props: {},\n    emits: {},\n    slots: {},\n  }\n\n  // 推断 props\n  const componentProps = (component as any).props\n  if (componentProps) {\n    if (Array.isArray(componentProps)) {\n      // 数组形式的 props\n      componentProps.forEach((prop: any) => {\n        definition.props![prop] = {\n          type: 'any',\n          required: false,\n        }\n      })\n    } else {\n      // 对象形式的 props\n      Object.entries(componentProps).forEach(([key, value]) => {\n        if (typeof value === 'function') {\n          // 构造函数\n          definition.props![key] = {\n            type: value.name.toLowerCase(),\n            required: false,\n          }\n        } else if (typeof value === 'object' && value !== null) {\n          const propDef = value as any\n          let type = 'any'\n          \n          if (propDef.type) {\n            if (Array.isArray(propDef.type)) {\n              type = propDef.type.map((t: any) => t.name.toLowerCase()).join(' | ')\n            } else {\n              type = propDef.type.name.toLowerCase()\n            }\n          }\n\n          definition.props![key] = {\n            type,\n            required: propDef.required ?? false,\n            default: propDef.default,\n            description: propDef.description,\n          }\n        }\n      })\n    }\n  }\n\n  // 推断 emits\n  const componentEmits = (component as any).emits\n  if (componentEmits) {\n    if (Array.isArray(componentEmits)) {\n      componentEmits.forEach((emit: any) => {\n        definition.emits![emit] = {\n          payload: 'any',\n        }\n      })\n    } else {\n      Object.entries(componentEmits).forEach(([key, value]) => {\n        definition.emits![key] = {\n          payload: 'any',\n          description: typeof value === 'object' ? (value as any).description : undefined,\n        }\n      })\n    }\n  }\n\n  return definition\n}\n\n/**\n * 生成 TypeScript 接口\n */\nexport function generateTypeScriptInterface(\n  definition: TemplateTypeDefinition,\n  options: TypeGeneratorOptions = {}\n): string {\nconst { includeComments = true } = options\n  const lines: string[] = []\n\n  // 添加注释\n  if (includeComments && definition.metadata) {\n    lines.push('/**')\n    lines.push(` * ${definition.metadata.displayName || definition.name}`)\n    if (definition.metadata.description) {\n      lines.push(` * ${definition.metadata.description}`)\n    }\n    lines.push(' */')\n  }\n\n  // 生成 Props 接口\n  if (definition.props && Object.keys(definition.props).length > 0) {\n    lines.push(`export interface ${definition.name}Props {`)\n    \n    Object.entries(definition.props).forEach(([key, prop]) => {\n      if (includeComments && prop.description) {\n        lines.push(`  /** ${prop.description} */`)\n      }\n      \n      const optional = !prop.required || prop.default !== undefined ? '?' : ''\n      const types = Array.isArray(prop.type) ? prop.type.join(' | ') : prop.type\n      \n      lines.push(`  ${key}${optional}: ${types}`)\n    })\n    \n    lines.push('}')\n    lines.push('')\n  }\n\n  // 生成 Emits 接口\n  if (definition.emits && Object.keys(definition.emits).length > 0) {\n    lines.push(`export interface ${definition.name}Emits {`)\n    \n    Object.entries(definition.emits).forEach(([key, emit]) => {\n      if (includeComments && emit.description) {\n        lines.push(`  /** ${emit.description} */`)\n      }\n      \n      const payload = emit.payload || 'void'\n      lines.push(`  (e: '${key}', payload: ${payload}): void`)\n    })\n    \n    lines.push('}')\n    lines.push('')\n  }\n\n  // 生成 Slots 接口\n  if (definition.slots && Object.keys(definition.slots).length > 0) {\n    lines.push(`export interface ${definition.name}Slots {`)\n    \n    Object.entries(definition.slots).forEach(([key, slot]) => {\n      if (includeComments && slot.description) {\n        lines.push(`  /** ${slot.description} */`)\n      }\n      \n      if (slot.props && Object.keys(slot.props).length > 0) {\n        const slotProps = Object.entries(slot.props)\n          .map(([propKey, propType]) => `${propKey}: ${propType}`)\n          .join(', ')\n        lines.push(`  ${key}(props: { ${slotProps} }): any`)\n      } else {\n        lines.push(`  ${key}(): any`)\n      }\n    })\n    \n    lines.push('}')\n    lines.push('')\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * 生成完整的类型声明文件\n */\nexport function generateTypeDeclarationFile(\n  definitions: TemplateTypeDefinition[],\n  options: TypeGeneratorOptions = {}\n): string {\n  const lines: string[] = []\n  \n  // 添加文件头注释\n  lines.push('/**')\n  lines.push(' * Auto-generated template type definitions')\n  lines.push(` * Generated at: ${new Date().toISOString()}`)\n  lines.push(' * Do not edit this file manually')\n  lines.push(' */')\n  lines.push('')\n  \n  // 添加通用导入\n  lines.push(\"import type { Component } from 'vue'\")\n  lines.push('')\n  \n  // 生成每个模板的类型定义\n  definitions.forEach((definition) => {\n    lines.push(generateTypeScriptInterface(definition, options))\n  })\n  \n  // 生成模板映射类型\n  lines.push('/**')\n  lines.push(' * Template name to props mapping')\n  lines.push(' */')\n  lines.push('export interface TemplatePropsMap {')\n  definitions.forEach((definition) => {\n    if (definition.props && Object.keys(definition.props).length > 0) {\n      lines.push(`  '${definition.name}': ${definition.name}Props`)\n    }\n  })\n  lines.push('}')\n  lines.push('')\n  \n  // 生成模板类型联合\n  lines.push('/**')\n  lines.push(' * All available template names')\n  lines.push(' */')\n  const templateNames = definitions.map((d) => `'${d.name}'`).join(' | ')\n  lines.push(`export type TemplateNames = ${templateNames}`)\n  lines.push('')\n  \n  return lines.join('\\n')\n}\n\n/**\n * 验证组件属性类型\n */\nexport function validateComponentProps<T extends Record<string, any>>(\n  props: T,\n  definition: TemplateTypeDefinition,\n  strict = true\n): { valid: boolean; errors: string[] } {\n  const errors: string[] = []\n\n  if (!definition.props) {\n    return { valid: true, errors: [] }\n  }\n\n  // 检查必需属性\n  Object.entries(definition.props).forEach(([key, propDef]) => {\n    if (propDef.required && !(key in props)) {\n      errors.push(`Missing required prop: ${key}`)\n    }\n  })\n\n  // 检查属性类型\n  Object.entries(props).forEach(([key, value]) => {\n    const propDef = definition.props![key]\n    \n    if (!propDef) {\n      if (strict) {\n        errors.push(`Unknown prop: ${key}`)\n      }\n      return\n    }\n\n    const types = Array.isArray(propDef.type) ? propDef.type : [propDef.type]\n    const actualType = typeof value\n    \n    const isValidType = types.some((type) => {\n      if (type === 'any') return true\n      if (type === actualType) return true\n      if (type === 'array' && Array.isArray(value)) return true\n      if (type === 'object' && value !== null && actualType === 'object') return true\n      return false\n    })\n\n    if (!isValidType) {\n      errors.push(`Invalid type for prop ${key}: expected ${types.join(' | ')}, got ${actualType}`)\n    }\n  })\n\n  return {\n    valid: errors.length === 0,\n    errors,\n  }\n}\n\n/**\n * 生成运行时类型守卫\n */\nexport function generateTypeGuard(definition: TemplateTypeDefinition): string {\n  const lines: string[] = []\n  \n  lines.push(`export function is${definition.name}Props(props: any): props is ${definition.name}Props {`)\n  lines.push('  if (!props || typeof props !== \\'object\\') return false')\n  \n  if (definition.props) {\n    Object.entries(definition.props).forEach(([key, prop]) => {\n      if (prop.required) {\n        lines.push(`  if (!('${key}' in props)) return false`)\n      }\n      \n      const types = Array.isArray(prop.type) ? prop.type : [prop.type]\n      const typeChecks = types.map((type) => {\n        switch (type) {\n          case 'string':\n          case 'number':\n          case 'boolean':\n            return `typeof props.${key} === '${type}'`\n          case 'array':\n            return `Array.isArray(props.${key})`\n          case 'object':\n            return `typeof props.${key} === 'object' && props.${key} !== null`\n          default:\n            return 'true' // any type\n        }\n      })\n      \n      if (prop.required) {\n        lines.push(`  if (!(${typeChecks.join(' || ')})) return false`)\n      } else {\n        lines.push(`  if ('${key}' in props && !(${typeChecks.join(' || ')})) return false`)\n      }\n    })\n  }\n  \n  lines.push('  return true')\n  lines.push('}')\n  \n  return lines.join('\\n')\n}\n\n/**\n * 从模板定义生成 JSON Schema\n */\nexport function generateJSONSchema(definition: TemplateTypeDefinition): object {\n  const schema: any = {\n    $schema: 'http://json-schema.org/draft-07/schema#',\n    type: 'object',\n    title: definition.name,\n    properties: {},\n    required: [],\n  }\n\n  if (definition.metadata?.description) {\n    schema.description = definition.metadata.description\n  }\n\n  if (definition.props) {\n    Object.entries(definition.props).forEach(([key, prop]) => {\n      const propSchema: any = {\n        description: prop.description,\n      }\n\n      const types = Array.isArray(prop.type) ? prop.type : [prop.type]\n      if (types.length === 1) {\n        propSchema.type = types[0]\n      } else {\n        propSchema.oneOf = types.map((type) => ({ type }))\n      }\n\n      if (prop.default !== undefined) {\n        propSchema.default = prop.default\n      }\n\n      schema.properties[key] = propSchema\n\n      if (prop.required) {\n        schema.required.push(key)\n      }\n    })\n  }\n\n  return schema\n}\n\n/**\n * 类型生成器类\n */\nexport class TemplateTypeGenerator {\n  private definitions: Map<string, TemplateTypeDefinition> = new Map()\n  private maxDefinitions = 1000 // 防止无限增长\n\n  /**\n   * 注册模板定义\n   */\n  register(definition: TemplateTypeDefinition) {\n    // 限制定义数量，防止内存泄漏\n    if (this.definitions.size >= this.maxDefinitions) {\n      // 删除最早的定义\n      const firstKey = this.definitions.keys().next().value\n      if (firstKey) {\n        this.definitions.delete(firstKey)\n      }\n    }\n    this.definitions.set(definition.name, definition)\n  }\n\n  /**\n   * 从组件注册\n   */\n  registerComponent(component: Component) {\n    const definition = inferTypeFromComponent(component)\n    this.register(definition)\n  }\n\n  /**\n   * 获取定义\n   */\n  getDefinition(name: string): TemplateTypeDefinition | undefined {\n    return this.definitions.get(name)\n  }\n\n  /**\n   * 获取所有定义\n   */\n  getAllDefinitions(): TemplateTypeDefinition[] {\n    return Array.from(this.definitions.values())\n  }\n\n  /**\n   * 生成类型文件\n   */\n  generateTypes(options?: TypeGeneratorOptions): string {\n    return generateTypeDeclarationFile(this.getAllDefinitions(), options)\n  }\n\n  /**\n   * 生成类型守卫文件\n   */\n  generateGuards(): string {\n    return this.getAllDefinitions()\n      .map((definition) => generateTypeGuard(definition))\n      .join('\\n\\n')\n  }\n\n  /**\n   * 生成 JSON Schema\n   */\n  generateSchemas(): Record<string, object> {\n    const schemas: Record<string, object> = {}\n    this.getAllDefinitions().forEach((definition) => {\n      schemas[definition.name] = generateJSONSchema(definition)\n    })\n    return schemas\n  }\n\n  /**\n   * 清除所有定义\n   */\n  clear() {\n    this.definitions.clear()\n  }\n}\n\n// 导出单例实例 - 使用懒加载\nlet _typeGenerator: TemplateTypeGenerator | null = null\n\nexport function getTypeGenerator(): TemplateTypeGenerator {\n  if (!_typeGenerator) {\n    _typeGenerator = new TemplateTypeGenerator()\n  }\n  return _typeGenerator\n}\n\n// 清理单例实例\nexport function destroyTypeGenerator() {\n  if (_typeGenerator) {\n    _typeGenerator.clear()\n    _typeGenerator = null\n  }\n}\n\n// 使用getter延迟加载，避免立即创建实例\nlet _typeGeneratorProxy: TemplateTypeGenerator | null = null\nexport const typeGenerator = new Proxy({} as TemplateTypeGenerator, {\n  get(target, prop) {\n    if (!_typeGeneratorProxy) {\n      _typeGeneratorProxy = getTypeGenerator()\n    }\n    return (_typeGeneratorProxy as any)[prop]\n  }\n})\n"],"names":["inferTypeFromComponent","component","definition","name","props","emits","slots","componentProps","Array","isArray","forEach","prop","type","required","Object","entries","key","value","toLowerCase","propDef","map","t","join","default","description","componentEmits","emit","payload","undefined","generateTypeScriptInterface","options","includeComments","lines","metadata","push","displayName","keys","length","optional","types","slot","slotProps","propKey","propType","generateTypeDeclarationFile","definitions","Date","toISOString","templateNames","d","validateComponentProps","strict","errors","valid","actualType","isValidType","some","generateTypeGuard","typeChecks","generateJSONSchema","schema","$schema","title","properties","propSchema","oneOf","TemplateTypeGenerator","constructor","Map","maxDefinitions","register","size","firstKey","next","delete","set","registerComponent","getDefinition","get","getAllDefinitions","from","values","generateTypes","generateGuards","generateSchemas","schemas","clear","_typeGenerator","getTypeGenerator","destroyTypeGenerator","_typeGeneratorProxy","typeGenerator","Proxy","target"],"mappings":"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"}
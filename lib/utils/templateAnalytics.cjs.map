{"version":3,"file":"templateAnalytics.cjs","sources":["../../src/utils/templateAnalytics.ts"],"sourcesContent":["import { computed, onUnmounted, readonly } from 'vue'\r\n\r\n/**\r\n * 模板使用统计\r\n */\r\nexport interface TemplateUsage {\r\n  templateId: string\r\n  templateName: string\r\n  loadCount: number // 加载次数\r\n  renderCount: number // 渲染次数\r\n  errorCount: number // 错误次数\r\n  totalLoadTime: number // 总加载时间\r\n  averageLoadTime: number // 平均加载时间\r\n  totalRenderTime: number // 总渲染时间\r\n  averageRenderTime: number // 平均渲染时间\r\n  lastUsedAt: number // 最后使用时间\r\n  firstUsedAt: number // 首次使用时间\r\n}\r\n\r\n/**\r\n * 性能指标\r\n */\r\nexport interface PerformanceMetrics {\r\n  templateId: string\r\n  metric: 'load' | 'render' | 'interaction'\r\n  duration: number\r\n  timestamp: number\r\n  metadata?: Record<string, any>\r\n}\r\n\r\n/**\r\n * 用户交互事件\r\n */\r\nexport interface InteractionEvent {\r\n  templateId: string\r\n  eventType: string\r\n  timestamp: number\r\n  data?: any\r\n}\r\n\r\n/**\r\n * 分析报告\r\n */\r\nexport interface AnalyticsReport {\r\n  totalTemplates: number\r\n  totalUsage: number\r\n  mostUsedTemplates: TemplateUsage[]\r\n  leastUsedTemplates: TemplateUsage[]\r\n  slowestTemplates: TemplateUsage[]\r\n  errorProneTemplates: TemplateUsage[]\r\n  performanceScore: number\r\n  recommendations: string[]\r\n}\r\n\r\n/**\r\n * 模板分析器配置\r\n */\r\nexport interface AnalyticsConfig {\r\n  enabled?: boolean\r\n  sampleRate?: number // 采样率 (0-1)\r\n  maxEvents?: number // 最大事件数\r\n  enablePerformanceTracking?: boolean\r\n  enableErrorTracking?: boolean\r\n  enableInteractionTracking?: boolean\r\n}\r\n\r\n/**\r\n * 模板分析器类\r\n */\r\nexport class TemplateAnalytics {\r\n  private config: Required<AnalyticsConfig>\r\n  private usageMap = new Map<string, TemplateUsage>()\r\n  private performanceMetrics: PerformanceMetrics[] = []\r\n  private interactionEvents: InteractionEvent[] = []\r\n  private sessionStartTime = Date.now()\r\n  private disposed = false\r\n  private cleanupTimer: ReturnType<typeof setTimeout> | null = null\r\n\r\n  constructor(config: AnalyticsConfig = {}) {\r\n    this.config = {\r\n      enabled: config.enabled ?? true,\r\n      sampleRate: config.sampleRate ?? 1,\r\n      maxEvents: config.maxEvents ?? 1000,\r\n      enablePerformanceTracking: config.enablePerformanceTracking ?? true,\r\n      enableErrorTracking: config.enableErrorTracking ?? true,\r\n      enableInteractionTracking: config.enableInteractionTracking ?? true,\r\n    }\r\n    \r\n    // 定期清理老旧数据\r\n    this.scheduleCleanup()\r\n  }\r\n\r\n  /**\r\n   * 判断是否应该记录事件（基于采样率）\r\n   */\r\n  private shouldRecord(): boolean {\r\n    if (this.disposed || !this.config.enabled) return false\r\n    return Math.random() < this.config.sampleRate\r\n  }\r\n\r\n  /**\r\n   * 记录模板加载\r\n   */\r\n  trackLoad(templateId: string, templateName: string, duration: number) {\r\n    if (!this.shouldRecord()) return\r\n\r\n    const usage = this.getOrCreateUsage(templateId, templateName)\r\n    usage.loadCount++\r\n    usage.totalLoadTime += duration\r\n    usage.averageLoadTime = usage.totalLoadTime / usage.loadCount\r\n    usage.lastUsedAt = Date.now()\r\n\r\n    if (this.config.enablePerformanceTracking) {\r\n      this.recordPerformanceMetric({\r\n        templateId,\r\n        metric: 'load',\r\n        duration,\r\n        timestamp: Date.now(),\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录模板渲染\r\n   */\r\n  trackRender(templateId: string, templateName: string, duration: number) {\r\n    if (!this.shouldRecord()) return\r\n\r\n    const usage = this.getOrCreateUsage(templateId, templateName)\r\n    usage.renderCount++\r\n    usage.totalRenderTime += duration\r\n    usage.averageRenderTime = usage.totalRenderTime / usage.renderCount\r\n    usage.lastUsedAt = Date.now()\r\n\r\n    if (this.config.enablePerformanceTracking) {\r\n      this.recordPerformanceMetric({\r\n        templateId,\r\n        metric: 'render',\r\n        duration,\r\n        timestamp: Date.now(),\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录模板错误\r\n   */\r\n  trackError(templateId: string, templateName: string, error: Error) {\r\n    if (this.disposed || !this.config.enableErrorTracking) return\r\n\r\n    const usage = this.getOrCreateUsage(templateId, templateName)\r\n    usage.errorCount++\r\n    usage.lastUsedAt = Date.now()\r\n\r\nif (import.meta.env.DEV) {\r\n      console.warn(`Template error tracked: ${templateId}`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录用户交互\r\n   */\r\n  trackInteraction(templateId: string, eventType: string, data?: any) {\r\n    if (this.disposed || !this.config.enableInteractionTracking || !this.shouldRecord()) return\r\n\r\n    const event: InteractionEvent = {\r\n      templateId,\r\n      eventType,\r\n      timestamp: Date.now(),\r\n      data,\r\n    }\r\n\r\n    this.interactionEvents.push(event)\r\n\r\n    // 限制事件数量\r\n    if (this.interactionEvents.length > this.config.maxEvents) {\r\n      this.interactionEvents.shift()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录性能指标\r\n   */\r\n  private recordPerformanceMetric(metric: PerformanceMetrics) {\r\n    this.performanceMetrics.push(metric)\r\n\r\n    // 限制指标数量\r\n    if (this.performanceMetrics.length > this.config.maxEvents) {\r\n      this.performanceMetrics.shift()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取或创建模板使用统计\r\n   */\r\n  private getOrCreateUsage(templateId: string, templateName: string): TemplateUsage {\r\n    let usage = this.usageMap.get(templateId)\r\n    \r\n    if (!usage) {\r\n      usage = {\r\n        templateId,\r\n        templateName,\r\n        loadCount: 0,\r\n        renderCount: 0,\r\n        errorCount: 0,\r\n        totalLoadTime: 0,\r\n        averageLoadTime: 0,\r\n        totalRenderTime: 0,\r\n        averageRenderTime: 0,\r\n        lastUsedAt: Date.now(),\r\n        firstUsedAt: Date.now(),\r\n      }\r\n      this.usageMap.set(templateId, usage)\r\n    }\r\n\r\n    return usage\r\n  }\r\n\r\n  /**\r\n   * 获取所有使用统计\r\n   */\r\n  getAllUsage(): TemplateUsage[] {\r\n    return Array.from(this.usageMap.values())\r\n  }\r\n\r\n  /**\r\n   * 获取特定模板的统计\r\n   */\r\n  getUsage(templateId: string): TemplateUsage | undefined {\r\n    return this.usageMap.get(templateId)\r\n  }\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  getPerformanceMetrics(templateId?: string): PerformanceMetrics[] {\r\n    if (templateId) {\r\n      return this.performanceMetrics.filter((m) => m.templateId === templateId)\r\n    }\r\n    return this.performanceMetrics\r\n  }\r\n\r\n  /**\r\n   * 获取交互事件\r\n   */\r\n  getInteractionEvents(templateId?: string): InteractionEvent[] {\r\n    if (templateId) {\r\n      return this.interactionEvents.filter((e) => e.templateId === templateId)\r\n    }\r\n    return this.interactionEvents\r\n  }\r\n\r\n  /**\r\n   * 生成分析报告\r\n   */\r\n  generateReport(): AnalyticsReport {\r\n    const allUsage = this.getAllUsage()\r\n    const totalUsage = allUsage.reduce((sum, u) => sum + u.renderCount, 0)\r\n\r\n    // 优化: 使用部分排序减少不必要的排序操作\r\n    const partialSort = <T>(arr: T[], compareFn: (a: T, b: T) => number, k: number): T[] => {\r\n      if (arr.length <= k) return [...arr].sort(compareFn)\r\n      \r\n      const result = arr.slice(0, k)\r\n      result.sort(compareFn)\r\n      \r\n      for (let i = k; i < arr.length; i++) {\r\n        const item = arr[i]\r\n        if (compareFn(item, result[k - 1]) < 0) {\r\n          result[k - 1] = item\r\n          result.sort(compareFn)\r\n        }\r\n      }\r\n      return result\r\n    }\r\n\r\n    // 最常用的模板\r\n    const mostUsed = partialSort(\r\n      allUsage,\r\n      (a, b) => b.renderCount - a.renderCount,\r\n      5\r\n    )\r\n\r\n    // 最少使用的模板\r\n    const leastUsed = partialSort(\r\n      allUsage,\r\n      (a, b) => a.renderCount - b.renderCount,\r\n      5\r\n    )\r\n\r\n    // 最慢的模板\r\n    const slowest = partialSort(\r\n      allUsage,\r\n      (a, b) => b.averageRenderTime - a.averageRenderTime,\r\n      5\r\n    )\r\n\r\n    // 错误最多的模板\r\n    const errorProne = partialSort(\r\n      allUsage.filter((u) => u.errorCount > 0),\r\n      (a, b) => b.errorCount - a.errorCount,\r\n      5\r\n    )\r\n\r\n    // 性能评分 (0-100)\r\n    const averageLoadTime =\r\n      allUsage.reduce((sum, u) => sum + u.averageLoadTime, 0) / allUsage.length || 0\r\n    const averageRenderTime =\r\n      allUsage.reduce((sum, u) => sum + u.averageRenderTime, 0) / allUsage.length || 0\r\n    const errorRate = allUsage.reduce((sum, u) => sum + u.errorCount, 0) / totalUsage || 0\r\n\r\n    let performanceScore = 100\r\n    if (averageLoadTime > 1000) performanceScore -= 20\r\n    if (averageLoadTime > 2000) performanceScore -= 20\r\n    if (averageRenderTime > 100) performanceScore -= 15\r\n    if (averageRenderTime > 200) performanceScore -= 15\r\n    if (errorRate > 0.01) performanceScore -= 15\r\n    if (errorRate > 0.05) performanceScore -= 15\r\n\r\n    performanceScore = Math.max(0, performanceScore)\r\n\r\n    // 生成建议\r\n    const recommendations: string[] = []\r\n    \r\n    if (averageLoadTime > 1000) {\r\n      recommendations.push('Consider implementing lazy loading for templates')\r\n    }\r\n    \r\n    if (averageRenderTime > 100) {\r\n      recommendations.push('Optimize template rendering performance')\r\n    }\r\n    \r\n    if (errorRate > 0.01) {\r\n      recommendations.push('Investigate and fix templates with high error rates')\r\n    }\r\n    \r\n    if (leastUsed.length > 0 && leastUsed[0].renderCount === 0) {\r\n      recommendations.push('Remove unused templates to reduce bundle size')\r\n    }\r\n    \r\n    slowest.forEach((template) => {\r\n      if (template.averageRenderTime > 200) {\r\n        recommendations.push(`Optimize ${template.templateName} - slow rendering detected`)\r\n      }\r\n    })\r\n\r\n    return {\r\n      totalTemplates: allUsage.length,\r\n      totalUsage,\r\n      mostUsedTemplates: mostUsed,\r\n      leastUsedTemplates: leastUsed,\r\n      slowestTemplates: slowest,\r\n      errorProneTemplates: errorProne,\r\n      performanceScore,\r\n      recommendations,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 导出数据\r\n   */\r\n  exportData(): {\r\n    usage: TemplateUsage[]\r\n    metrics: PerformanceMetrics[]\r\n    interactions: InteractionEvent[]\r\n    sessionDuration: number\r\n  } {\r\n    return {\r\n      usage: this.getAllUsage(),\r\n      metrics: this.getPerformanceMetrics(),\r\n      interactions: this.getInteractionEvents(),\r\n      sessionDuration: Date.now() - this.sessionStartTime,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除所有数据\r\n   */\r\n  clear() {\r\n    this.usageMap.clear()\r\n    this.performanceMetrics.length = 0\r\n    this.interactionEvents.length = 0\r\n    this.sessionStartTime = Date.now()\r\n  }\r\n\r\n  /**\r\n   * 销毁分析器实例\r\n   */\r\n  dispose() {\r\n    this.disposed = true\r\n    if (this.cleanupTimer) {\r\n      clearTimeout(this.cleanupTimer)\r\n      this.cleanupTimer = null\r\n    }\r\n    this.clear()\r\n    this.usageMap.clear()\r\n  }\r\n  \r\n  /**\r\n   * 定期清理老旧数据\r\n   */\r\n  private scheduleCleanup() {\r\n    if (this.cleanupTimer) {\r\n      clearTimeout(this.cleanupTimer)\r\n    }\r\n    \r\n    // 每10分钟清理一次老旧数据\r\n    this.cleanupTimer = setTimeout(() => {\r\n      if (!this.disposed) {\r\n        const now = Date.now()\r\n        const maxAge = 30 * 60 * 1000 // 30分钟\r\n        \r\n        // 清理老旧的性能指标\r\n        this.performanceMetrics = this.performanceMetrics.filter(\r\n          m => (now - m.timestamp) < maxAge\r\n        )\r\n        \r\n        // 清理老旧的交互事件\r\n        this.interactionEvents = this.interactionEvents.filter(\r\n          e => (now - e.timestamp) < maxAge\r\n        )\r\n        \r\n        // 递归调度下次清理\r\n        this.scheduleCleanup()\r\n      }\r\n    }, 10 * 60 * 1000)\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   */\r\n  updateConfig(config: Partial<AnalyticsConfig>) {\r\n    Object.assign(this.config, config)\r\n  }\r\n\r\n  /**\r\n   * 启用分析\r\n   */\r\n  enable() {\r\n    this.config.enabled = true\r\n  }\r\n\r\n  /**\r\n   * 禁用分析\r\n   */\r\n  disable() {\r\n    this.config.enabled = false\r\n  }\r\n\r\n  /**\r\n   * 获取配置\r\n   */\r\n  getConfig(): Readonly<Required<AnalyticsConfig>> {\r\n    return readonly(this.config)\r\n  }\r\n}\r\n\r\n// 全局分析器实例 - 使用懒加载\r\nlet _globalAnalytics: TemplateAnalytics | null = null\r\n\r\nexport function getGlobalAnalytics(): TemplateAnalytics {\r\n  if (!_globalAnalytics) {\r\n    _globalAnalytics = new TemplateAnalytics()\r\n  }\r\n  return _globalAnalytics\r\n}\r\n\r\n// 清理全局实例\r\nexport function destroyGlobalAnalytics() {\r\n  if (_globalAnalytics) {\r\n    _globalAnalytics.dispose()\r\n    _globalAnalytics = null\r\n  }\r\n}\r\n\r\n// 使用getter延迟加载，避免立即创建实例\r\nlet _globalAnalyticsProxy: TemplateAnalytics | null = null\r\nexport const globalAnalytics = new Proxy({} as TemplateAnalytics, {\r\n  get(target, prop) {\r\n    if (!_globalAnalyticsProxy) {\r\n      _globalAnalyticsProxy = getGlobalAnalytics()\r\n    }\r\n    return (_globalAnalyticsProxy as any)[prop]\r\n  }\r\n})\r\n\r\n/**\r\n * 使用模板分析 (组合式函数)\r\n */\r\nexport function useTemplateAnalytics(config?: AnalyticsConfig) {\r\n  // Create a dedicated instance if config is provided\r\n  const analytics = config ? new TemplateAnalytics(config) : getGlobalAnalytics()\r\n  const isCustomInstance = !!config\r\n\r\n  const allUsage = computed(() => analytics.getAllUsage())\r\n  const report = computed(() => analytics.generateReport())\r\n\r\n  const trackLoad = (templateId: string, templateName: string, duration: number) => {\r\n    analytics.trackLoad(templateId, templateName, duration)\r\n  }\r\n\r\n  const trackRender = (templateId: string, templateName: string, duration: number) => {\r\n    analytics.trackRender(templateId, templateName, duration)\r\n  }\r\n\r\n  const trackError = (templateId: string, templateName: string, error: Error) => {\r\n    analytics.trackError(templateId, templateName, error)\r\n  }\r\n\r\n  const trackInteraction = (templateId: string, eventType: string, data?: any) => {\r\n    analytics.trackInteraction(templateId, eventType, data)\r\n  }\r\n\r\n  const getUsage = (templateId: string) => {\r\n    return analytics.getUsage(templateId)\r\n  }\r\n\r\n  const getPerformanceMetrics = (templateId?: string) => {\r\n    return analytics.getPerformanceMetrics(templateId)\r\n  }\r\n\r\n  const exportData = () => {\r\n    return analytics.exportData()\r\n  }\r\n\r\n  const clear = () => {\r\n    analytics.clear()\r\n  }\r\n\r\n  // Cleanup custom instance on unmount\r\n  if (isCustomInstance) {\r\n    onUnmounted(() => {\r\n      analytics.dispose()\r\n    })\r\n  }\r\n\r\n  return {\r\n    allUsage,\r\n    report,\r\n    trackLoad,\r\n    trackRender,\r\n    trackError,\r\n    trackInteraction,\r\n    getUsage,\r\n    getPerformanceMetrics,\r\n    exportData,\r\n    clear,\r\n  }\r\n}\r\n\r\n/**\r\n * 性能监控装饰器\r\n */\r\nexport function withPerformanceTracking<T extends (...args: any[]) => any>(\r\n  fn: T,\r\n  templateId: string,\r\n  metric: 'load' | 'render' | 'interaction'\r\n): T {\r\n  return ((...args: any[]) => {\r\n    const startTime = performance.now()\r\n    \r\n    try {\r\n      const result = fn(...args)\r\n      \r\n      // 处理异步函数\r\n      if (result instanceof Promise) {\r\n        return result.finally(() => {\r\n          const duration = performance.now() - startTime\r\n          // Use private method through a workaround\r\n          ;(globalAnalytics as any).recordPerformanceMetric({\r\n            templateId,\r\n            metric,\r\n            duration,\r\n            timestamp: Date.now(),\r\n          })\r\n        })\r\n      }\r\n      \r\n      const duration = performance.now() - startTime\r\n      // Use private method through a workaround\r\n      ;(globalAnalytics as any).recordPerformanceMetric({\r\n        templateId,\r\n        metric,\r\n        duration,\r\n        timestamp: Date.now(),\r\n      })\r\n      \r\n      return result\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime\r\n      // Use private method through a workaround\r\n      ;(globalAnalytics as any).recordPerformanceMetric({\r\n        templateId,\r\n        metric,\r\n        duration,\r\n        timestamp: Date.now(),\r\n        metadata: { error: true },\r\n      })\r\n      throw error\r\n    }\r\n  }) as T\r\n}\r\n"],"names":["TemplateAnalytics","constructor","config","usageMap","Map","performanceMetrics","interactionEvents","sessionStartTime","Date","now","disposed","cleanupTimer","enabled","sampleRate","maxEvents","enablePerformanceTracking","enableErrorTracking","enableInteractionTracking","scheduleCleanup","shouldRecord","Math","random","trackLoad","templateId","templateName","duration","usage","getOrCreateUsage","loadCount","totalLoadTime","averageLoadTime","lastUsedAt","recordPerformanceMetric","metric","timestamp","trackRender","renderCount","totalRenderTime","averageRenderTime","trackError","error","errorCount","import","DEV","console","warn","trackInteraction","eventType","data","event","push","length","shift","get","firstUsedAt","set","getAllUsage","Array","from","values","getUsage","getPerformanceMetrics","filter","m","getInteractionEvents","e","generateReport","allUsage","totalUsage","reduce","sum","u","partialSort","arr","compareFn","k","sort","result","slice","i","item","mostUsed","a","b","leastUsed","slowest","errorProne","errorRate","performanceScore","max","recommendations","forEach","template","totalTemplates","mostUsedTemplates","leastUsedTemplates","slowestTemplates","errorProneTemplates","exportData","metrics","interactions","sessionDuration","clear","dispose","clearTimeout","setTimeout","maxAge","updateConfig","Object","assign","enable","disable","getConfig","readonly","_globalAnalytics","getGlobalAnalytics","destroyGlobalAnalytics","_globalAnalyticsProxy","globalAnalytics","Proxy","target","prop","useTemplateAnalytics","analytics","isCustomInstance","computed","report","onUnmounted","withPerformanceTracking","fn","args","startTime","performance","Promise","finally","metadata"],"mappings":"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"}
{"version":3,"file":"performance.cjs","sources":["../../src/utils/performance.ts"],"sourcesContent":["/**\r\n * 性能优化工具函数\r\n */\r\n\r\n/**\r\n * 创建防抖函数 - 优化版\r\n * 使用 WeakMap 缓存定时器，支持多实例\r\n */\r\nconst debounceTimers = new WeakMap<Function, ReturnType<typeof setTimeout>>()\r\n\r\nexport function debounce<T extends (...args: any[]) => any>(\r\n  fn: T,\r\n  delay: number = 300\r\n): (...args: Parameters<T>) => void {\r\n  return function(this: any, ...args: Parameters<T>) {\r\n    const existingTimer = debounceTimers.get(fn)\r\n    if (existingTimer) {\r\n      clearTimeout(existingTimer)\r\n    }\r\n    \r\n    const timer = setTimeout(() => {\r\n      fn.apply(this, args)\r\n      debounceTimers.delete(fn)\r\n    }, delay)\r\n    \r\n    debounceTimers.set(fn, timer)\r\n  }\r\n}\r\n\r\n/**\r\n * 创建节流函数 - 优化版\r\n * 支持前缘触发和后缘触发\r\n */\r\ninterface ThrottleOptions {\r\n  leading?: boolean  // 是否在延迟开始前调用\r\n  trailing?: boolean // 是否在延迟结束后调用\r\n}\r\n\r\nexport function throttle<T extends (...args: any[]) => any>(\r\n  fn: T,\r\n  limit: number = 300,\r\n  options: ThrottleOptions = { leading: true, trailing: true }\r\n): (...args: Parameters<T>) => void {\r\n  let inThrottle = false\r\n  let lastArgs: Parameters<T> | null = null\r\n  let timeoutId: ReturnType<typeof setTimeout> | null = null\r\n\r\n  return function(this: any, ...args: Parameters<T>) {\r\n    if (!inThrottle) {\r\n      // 前缘触发\r\n      if (options.leading !== false) {\r\n        fn.apply(this, args)\r\n      }\r\n      inThrottle = true\r\n      \r\n      timeoutId = setTimeout(() => {\r\n        inThrottle = false\r\n        \r\n        // 后缘触发\r\n        if (options.trailing !== false && lastArgs) {\r\n          fn.apply(this, lastArgs)\r\n          lastArgs = null\r\n        }\r\n        \r\n        timeoutId = null\r\n      }, limit)\r\n    } else {\r\n      lastArgs = args\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 批量处理 - 将多次调用合并为一次\r\n */\r\nexport function batch<T>(\r\n  fn: (items: T[]) => void,\r\n  delay: number = 16\r\n): (item: T) => void {\r\n  let items: T[] = []\r\n  let timeoutId: ReturnType<typeof setTimeout> | null = null\r\n\r\n  return function(item: T) {\r\n    items.push(item)\r\n    \r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId)\r\n    }\r\n    \r\n    timeoutId = setTimeout(() => {\r\n      fn(items)\r\n      items = []\r\n      timeoutId = null\r\n    }, delay)\r\n  }\r\n}\r\n\r\n/**\r\n * 惰性初始化 - 延迟创建开销大的对象\r\n */\r\nexport function lazy<T>(factory: () => T): () => T {\r\n  let instance: T | null = null\r\n  \r\n  return function() {\r\n    if (instance === null) {\r\n      instance = factory()\r\n    }\r\n    return instance\r\n  }\r\n}\r\n\r\n/**\r\n * Memoization - 缓存函数结果\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(\r\n  fn: T,\r\n  options: {\r\n    maxSize?: number\r\n    keyGenerator?: (...args: Parameters<T>) => string\r\n  } = {}\r\n): T {\r\n  const cache = new Map<string, ReturnType<T>>()\r\n  const { maxSize = 100, keyGenerator = (...args) => JSON.stringify(args) } = options\r\n  \r\n  return function(this: any, ...args: Parameters<T>): ReturnType<T> {\r\n    const key = keyGenerator(...args)\r\n    \r\n    if (cache.has(key)) {\r\n      return cache.get(key)!\r\n    }\r\n    \r\n    const result = fn.apply(this, args)\r\n    \r\n    // 限制缓存大小\r\n    if (cache.size >= maxSize) {\r\n      const firstKey = cache.keys().next().value\r\n      cache.delete(firstKey)\r\n    }\r\n    \r\n    cache.set(key, result)\r\n    return result\r\n  } as T\r\n}\r\n\r\n/**\r\n * 使用 requestIdleCallback 优化非关键任务\r\n */\r\nexport function runWhenIdle(\r\n  callback: () => void,\r\n  options?: IdleRequestOptions\r\n): void {\r\n  if (typeof requestIdleCallback !== 'undefined') {\r\n    requestIdleCallback(callback, options)\r\n  } else {\r\n    // 降级方案\r\n    setTimeout(callback, 1)\r\n  }\r\n}\r\n\r\n/**\r\n * 使用 requestAnimationFrame 优化动画\r\n */\r\nexport function runInNextFrame(callback: () => void): number {\r\n  return requestAnimationFrame(callback)\r\n}\r\n\r\n/**\r\n * 分批处理大数组 - 避免阻塞主线程\r\n */\r\nexport async function processBatch<T, R>(\r\n  items: T[],\r\n  processor: (item: T) => R,\r\n  batchSize: number = 100\r\n): Promise<R[]> {\r\n  const results: R[] = []\r\n  \r\n  for (let i = 0; i < items.length; i += batchSize) {\r\n    const batch = items.slice(i, i + batchSize)\r\n    const batchResults = batch.map(processor)\r\n    results.push(...batchResults)\r\n    \r\n    // 让出主线程\r\n    if (i + batchSize < items.length) {\r\n      await new Promise(resolve => setTimeout(resolve, 0))\r\n    }\r\n  }\r\n  \r\n  return results\r\n}\r\n\r\n/**\r\n * 虚拟滚动辅助函数\r\n */\r\nexport function calculateVisibleRange(\r\n  scrollTop: number,\r\n  containerHeight: number,\r\n  itemHeight: number,\r\n  totalItems: number,\r\n  overscan: number = 3\r\n): { start: number; end: number } {\r\n  const start = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan)\r\n  const visibleCount = Math.ceil(containerHeight / itemHeight)\r\n  const end = Math.min(totalItems, start + visibleCount + overscan * 2)\r\n  \r\n  return { start, end }\r\n}\r\n\r\n/**\r\n * 对象池 - 重用对象减少 GC 压力\r\n */\r\nexport class ObjectPool<T> {\r\n  private pool: T[] = []\r\n  private factory: () => T\r\n  private reset?: (obj: T) => void\r\n\r\n  constructor(factory: () => T, reset?: (obj: T) => void, initialSize: number = 10) {\r\n    this.factory = factory\r\n    this.reset = reset\r\n    \r\n    // 预创建对象\r\n    for (let i = 0; i < initialSize; i++) {\r\n      this.pool.push(factory())\r\n    }\r\n  }\r\n\r\n  acquire(): T {\r\n    if (this.pool.length > 0) {\r\n      return this.pool.pop()!\r\n    }\r\n    return this.factory()\r\n  }\r\n\r\n  release(obj: T): void {\r\n    if (this.reset) {\r\n      this.reset(obj)\r\n    }\r\n    this.pool.push(obj)\r\n  }\r\n\r\n  clear(): void {\r\n    this.pool = []\r\n  }\r\n}\r\n\r\n"],"names":["debounceTimers","WeakMap","debounce","fn","delay","args","existingTimer","get","clearTimeout","timer","setTimeout","apply","delete","set","throttle","limit","options","leading","trailing","inThrottle","lastArgs","timeoutId","batch","items","item","push","lazy","factory","instance","memoize","cache","Map","maxSize","keyGenerator","JSON","stringify","key","has","result","size","firstKey","keys","next","value","runWhenIdle","callback","requestIdleCallback","runInNextFrame","requestAnimationFrame","processBatch","processor","batchSize","results","i","length","slice","batchResults","map","Promise","resolve","calculateVisibleRange","scrollTop","containerHeight","itemHeight","totalItems","overscan","start","Math","max","floor","visibleCount","ceil","end","min","ObjectPool","constructor","reset","initialSize","pool","acquire","pop","release","obj","clear"],"mappings":"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"}